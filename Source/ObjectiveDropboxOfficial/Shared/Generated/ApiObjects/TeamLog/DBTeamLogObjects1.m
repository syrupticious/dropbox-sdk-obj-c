///
/// Copyright (c) 2016 Dropbox, Inc. All rights reserved.
///
/// Auto-generated by Stone, do not modify.
///

/// Arguments, results, and errors for the `TeamLog` namespace.

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccessMethodLogInfo.h"
#import "DBTEAMLOGApiSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccessMethodLogInfo

@synthesize adminConsole = _adminConsole;
@synthesize api = _api;
@synthesize contentManager = _contentManager;
@synthesize endUser = _endUser;
@synthesize enterpriseConsole = _enterpriseConsole;
@synthesize signInAs = _signInAs;

#pragma mark - Constructors

- (instancetype)initWithAdminConsole:(DBTEAMLOGWebSessionLogInfo *)adminConsole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoAdminConsole;
    _adminConsole = adminConsole;
  }
  return self;
}

- (instancetype)initWithApi:(DBTEAMLOGApiSessionLogInfo *)api {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoApi;
    _api = api;
  }
  return self;
}

- (instancetype)initWithContentManager:(DBTEAMLOGWebSessionLogInfo *)contentManager {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoContentManager;
    _contentManager = contentManager;
  }
  return self;
}

- (instancetype)initWithEndUser:(DBTEAMLOGSessionLogInfo *)endUser {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoEndUser;
    _endUser = endUser;
  }
  return self;
}

- (instancetype)initWithEnterpriseConsole:(DBTEAMLOGWebSessionLogInfo *)enterpriseConsole {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoEnterpriseConsole;
    _enterpriseConsole = enterpriseConsole;
  }
  return self;
}

- (instancetype)initWithSignInAs:(DBTEAMLOGWebSessionLogInfo *)signInAs {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoSignInAs;
    _signInAs = signInAs;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccessMethodLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGWebSessionLogInfo *)adminConsole {
  if (![self isAdminConsole]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoAdminConsole, but was %@.", [self tagName]];
  }
  return _adminConsole;
}

- (DBTEAMLOGApiSessionLogInfo *)api {
  if (![self isApi]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoApi, but was %@.", [self tagName]];
  }
  return _api;
}

- (DBTEAMLOGWebSessionLogInfo *)contentManager {
  if (![self isContentManager]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoContentManager, but was %@.", [self tagName]];
  }
  return _contentManager;
}

- (DBTEAMLOGSessionLogInfo *)endUser {
  if (![self isEndUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoEndUser, but was %@.", [self tagName]];
  }
  return _endUser;
}

- (DBTEAMLOGWebSessionLogInfo *)enterpriseConsole {
  if (![self isEnterpriseConsole]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoEnterpriseConsole, but was %@.", [self tagName]];
  }
  return _enterpriseConsole;
}

- (DBTEAMLOGWebSessionLogInfo *)signInAs {
  if (![self isSignInAs]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAccessMethodLogInfoSignInAs, but was %@.", [self tagName]];
  }
  return _signInAs;
}

#pragma mark - Tag state methods

- (BOOL)isAdminConsole {
  return _tag == DBTEAMLOGAccessMethodLogInfoAdminConsole;
}

- (BOOL)isApi {
  return _tag == DBTEAMLOGAccessMethodLogInfoApi;
}

- (BOOL)isContentManager {
  return _tag == DBTEAMLOGAccessMethodLogInfoContentManager;
}

- (BOOL)isEndUser {
  return _tag == DBTEAMLOGAccessMethodLogInfoEndUser;
}

- (BOOL)isEnterpriseConsole {
  return _tag == DBTEAMLOGAccessMethodLogInfoEnterpriseConsole;
}

- (BOOL)isSignInAs {
  return _tag == DBTEAMLOGAccessMethodLogInfoSignInAs;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccessMethodLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return @"DBTEAMLOGAccessMethodLogInfoAdminConsole";
  case DBTEAMLOGAccessMethodLogInfoApi:
    return @"DBTEAMLOGAccessMethodLogInfoApi";
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return @"DBTEAMLOGAccessMethodLogInfoContentManager";
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return @"DBTEAMLOGAccessMethodLogInfoEndUser";
  case DBTEAMLOGAccessMethodLogInfoEnterpriseConsole:
    return @"DBTEAMLOGAccessMethodLogInfoEnterpriseConsole";
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return @"DBTEAMLOGAccessMethodLogInfoSignInAs";
  case DBTEAMLOGAccessMethodLogInfoOther:
    return @"DBTEAMLOGAccessMethodLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccessMethodLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccessMethodLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccessMethodLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    result = prime * result + [self.adminConsole hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoApi:
    result = prime * result + [self.api hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    result = prime * result + [self.contentManager hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    result = prime * result + [self.endUser hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoEnterpriseConsole:
    result = prime * result + [self.enterpriseConsole hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    result = prime * result + [self.signInAs hash];
    break;
  case DBTEAMLOGAccessMethodLogInfoOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccessMethodLogInfo:other];
}

- (BOOL)isEqualToAccessMethodLogInfo:(DBTEAMLOGAccessMethodLogInfo *)anAccessMethodLogInfo {
  if (self == anAccessMethodLogInfo) {
    return YES;
  }
  if (self.tag != anAccessMethodLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccessMethodLogInfoAdminConsole:
    return [self.adminConsole isEqual:anAccessMethodLogInfo.adminConsole];
  case DBTEAMLOGAccessMethodLogInfoApi:
    return [self.api isEqual:anAccessMethodLogInfo.api];
  case DBTEAMLOGAccessMethodLogInfoContentManager:
    return [self.contentManager isEqual:anAccessMethodLogInfo.contentManager];
  case DBTEAMLOGAccessMethodLogInfoEndUser:
    return [self.endUser isEqual:anAccessMethodLogInfo.endUser];
  case DBTEAMLOGAccessMethodLogInfoEnterpriseConsole:
    return [self.enterpriseConsole isEqual:anAccessMethodLogInfo.enterpriseConsole];
  case DBTEAMLOGAccessMethodLogInfoSignInAs:
    return [self.signInAs isEqual:anAccessMethodLogInfo.signInAs];
  case DBTEAMLOGAccessMethodLogInfoOther:
    return [[self tagName] isEqual:[anAccessMethodLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccessMethodLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccessMethodLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAdminConsole]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.adminConsole]];
    jsonDict[@".tag"] = @"admin_console";
  } else if ([valueObj isApi]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGApiSessionLogInfoSerializer serialize:valueObj.api]];
    jsonDict[@".tag"] = @"api";
  } else if ([valueObj isContentManager]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.contentManager]];
    jsonDict[@".tag"] = @"content_manager";
  } else if ([valueObj isEndUser]) {
    jsonDict[@"end_user"] = [[DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.endUser] mutableCopy];
    jsonDict[@".tag"] = @"end_user";
  } else if ([valueObj isEnterpriseConsole]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.enterpriseConsole]];
    jsonDict[@".tag"] = @"enterprise_console";
  } else if ([valueObj isSignInAs]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionLogInfoSerializer serialize:valueObj.signInAs]];
    jsonDict[@".tag"] = @"sign_in_as";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccessMethodLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"admin_console"]) {
    DBTEAMLOGWebSessionLogInfo *adminConsole = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithAdminConsole:adminConsole];
  } else if ([tag isEqualToString:@"api"]) {
    DBTEAMLOGApiSessionLogInfo *api = [DBTEAMLOGApiSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithApi:api];
  } else if ([tag isEqualToString:@"content_manager"]) {
    DBTEAMLOGWebSessionLogInfo *contentManager = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithContentManager:contentManager];
  } else if ([tag isEqualToString:@"end_user"]) {
    DBTEAMLOGSessionLogInfo *endUser = [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"end_user"]];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithEndUser:endUser];
  } else if ([tag isEqualToString:@"enterprise_console"]) {
    DBTEAMLOGWebSessionLogInfo *enterpriseConsole = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithEnterpriseConsole:enterpriseConsole];
  } else if ([tag isEqualToString:@"sign_in_as"]) {
    DBTEAMLOGWebSessionLogInfo *signInAs = [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithSignInAs:signInAs];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccessMethodLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureAvailability.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureAvailability

#pragma mark - Constructors

- (instancetype)initWithAvailable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityAvailable;
  }
  return self;
}

- (instancetype)initWithUnavailable {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityUnavailable;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureAvailabilityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAvailable {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityAvailable;
}

- (BOOL)isUnavailable {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityUnavailable;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCaptureAvailabilityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    return @"DBTEAMLOGAccountCaptureAvailabilityAvailable";
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    return @"DBTEAMLOGAccountCaptureAvailabilityUnavailable";
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    return @"DBTEAMLOGAccountCaptureAvailabilityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureAvailability:other];
}

- (BOOL)isEqualToAccountCaptureAvailability:(DBTEAMLOGAccountCaptureAvailability *)anAccountCaptureAvailability {
  if (self == anAccountCaptureAvailability) {
    return YES;
  }
  if (self.tag != anAccountCaptureAvailability.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCaptureAvailabilityAvailable:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  case DBTEAMLOGAccountCaptureAvailabilityUnavailable:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  case DBTEAMLOGAccountCaptureAvailabilityOther:
    return [[self tagName] isEqual:[anAccountCaptureAvailability tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureAvailabilitySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureAvailability *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAvailable]) {
    jsonDict[@".tag"] = @"available";
  } else if ([valueObj isUnavailable]) {
    jsonDict[@".tag"] = @"unavailable";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureAvailability *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"available"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithAvailable];
  } else if ([tag isEqualToString:@"unavailable"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithUnavailable];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCaptureAvailability alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureAvailability.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCaptureAvailability *)dNewValue
                    previousValue:(DBTEAMLOGAccountCaptureAvailability *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCaptureAvailability *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangeAvailabilityDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)anAccountCaptureChangeAvailabilityDetails {
  if (self == anAccountCaptureChangeAvailabilityDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAccountCaptureChangeAvailabilityDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anAccountCaptureChangeAvailabilityDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAccountCaptureAvailabilitySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccountCaptureAvailability *dNewValue =
      [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAccountCaptureAvailability *previousValue =
      valueDict[@"previous_value"]
          ? [DBTEAMLOGAccountCaptureAvailabilitySerializer deserialize:valueDict[@"previous_value"]]
          : nil;

  return [[DBTEAMLOGAccountCaptureChangeAvailabilityDetails alloc] initWithDNewValue:dNewValue
                                                                       previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangeAvailabilityType:other];
}

- (BOOL)isEqualToAccountCaptureChangeAvailabilityType:
    (DBTEAMLOGAccountCaptureChangeAvailabilityType *)anAccountCaptureChangeAvailabilityType {
  if (self == anAccountCaptureChangeAvailabilityType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureChangeAvailabilityType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangeAvailabilityTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangeAvailabilityType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangeAvailabilityType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureChangeAvailabilityType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue
                    previousValue:(DBTEAMLOGAccountCapturePolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMLOGAccountCapturePolicy *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangePolicyDetails:other];
}

- (BOOL)isEqualToAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)anAccountCaptureChangePolicyDetails {
  if (self == anAccountCaptureChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAccountCaptureChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anAccountCaptureChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGAccountCapturePolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccountCapturePolicy *dNewValue =
      [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAccountCapturePolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGAccountCapturePolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGAccountCaptureChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureChangePolicyType:other];
}

- (BOOL)isEqualToAccountCaptureChangePolicyType:
    (DBTEAMLOGAccountCaptureChangePolicyType *)anAccountCaptureChangePolicyType {
  if (self == anAccountCaptureChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureMigrateAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)anAccountCaptureMigrateAccountDetails {
  if (self == anAccountCaptureMigrateAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureMigrateAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureMigrateAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureMigrateAccountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];

  return [[DBTEAMLOGAccountCaptureMigrateAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureMigrateAccountType:other];
}

- (BOOL)isEqualToAccountCaptureMigrateAccountType:
    (DBTEAMLOGAccountCaptureMigrateAccountType *)anAccountCaptureMigrateAccountType {
  if (self == anAccountCaptureMigrateAccountType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureMigrateAccountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureMigrateAccountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureMigrateAccountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureMigrateAccountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureMigrateAccountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentDetails.h"
#import "DBTEAMLOGAccountCaptureNotificationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName
                  notificationType:(DBTEAMLOGAccountCaptureNotificationType *)notificationType {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _notificationType = notificationType;
  }
  return self;
}

- (instancetype)initWithDomainName:(NSString *)domainName {
  return [self initWithDomainName:domainName notificationType:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  if (self.notificationType != nil) {
    result = prime * result + [self.notificationType hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureNotificationEmailsSentDetails:other];
}

- (BOOL)isEqualToAccountCaptureNotificationEmailsSentDetails:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)anAccountCaptureNotificationEmailsSentDetails {
  if (self == anAccountCaptureNotificationEmailsSentDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureNotificationEmailsSentDetails.domainName]) {
    return NO;
  }
  if (self.notificationType) {
    if (![self.notificationType isEqual:anAccountCaptureNotificationEmailsSentDetails.notificationType]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;
  if (valueObj.notificationType) {
    jsonDict[@"notification_type"] =
        [DBTEAMLOGAccountCaptureNotificationTypeSerializer serialize:valueObj.notificationType];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];
  DBTEAMLOGAccountCaptureNotificationType *notificationType =
      valueDict[@"notification_type"]
          ? [DBTEAMLOGAccountCaptureNotificationTypeSerializer deserialize:valueDict[@"notification_type"]]
          : nil;

  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentDetails alloc] initWithDomainName:domainName
                                                                         notificationType:notificationType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureNotificationEmailsSentType:other];
}

- (BOOL)isEqualToAccountCaptureNotificationEmailsSentType:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)anAccountCaptureNotificationEmailsSentType {
  if (self == anAccountCaptureNotificationEmailsSentType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureNotificationEmailsSentType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureNotificationEmailsSentTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureNotificationEmailsSentType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureNotificationEmailsSentType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureNotificationEmailsSentType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureNotificationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureNotificationType

#pragma mark - Constructors

- (instancetype)initWithActionableNotification {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureNotificationTypeActionableNotification;
  }
  return self;
}

- (instancetype)initWithProactiveWarningNotification {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCaptureNotificationTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isActionableNotification {
  return _tag == DBTEAMLOGAccountCaptureNotificationTypeActionableNotification;
}

- (BOOL)isProactiveWarningNotification {
  return _tag == DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCaptureNotificationTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCaptureNotificationTypeActionableNotification:
    return @"DBTEAMLOGAccountCaptureNotificationTypeActionableNotification";
  case DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification:
    return @"DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification";
  case DBTEAMLOGAccountCaptureNotificationTypeOther:
    return @"DBTEAMLOGAccountCaptureNotificationTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureNotificationTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureNotificationTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureNotificationTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCaptureNotificationTypeActionableNotification:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCaptureNotificationTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureNotificationType:other];
}

- (BOOL)isEqualToAccountCaptureNotificationType:
    (DBTEAMLOGAccountCaptureNotificationType *)anAccountCaptureNotificationType {
  if (self == anAccountCaptureNotificationType) {
    return YES;
  }
  if (self.tag != anAccountCaptureNotificationType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCaptureNotificationTypeActionableNotification:
    return [[self tagName] isEqual:[anAccountCaptureNotificationType tagName]];
  case DBTEAMLOGAccountCaptureNotificationTypeProactiveWarningNotification:
    return [[self tagName] isEqual:[anAccountCaptureNotificationType tagName]];
  case DBTEAMLOGAccountCaptureNotificationTypeOther:
    return [[self tagName] isEqual:[anAccountCaptureNotificationType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureNotificationTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureNotificationType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isActionableNotification]) {
    jsonDict[@".tag"] = @"actionable_notification";
  } else if ([valueObj isProactiveWarningNotification]) {
    jsonDict[@".tag"] = @"proactive_warning_notification";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureNotificationType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"actionable_notification"]) {
    return [[DBTEAMLOGAccountCaptureNotificationType alloc] initWithActionableNotification];
  } else if ([tag isEqualToString:@"proactive_warning_notification"]) {
    return [[DBTEAMLOGAccountCaptureNotificationType alloc] initWithProactiveWarningNotification];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCaptureNotificationType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCaptureNotificationType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCapturePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCapturePolicy

#pragma mark - Constructors

- (instancetype)initWithAllUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyAllUsers;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithInvitedUsers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyInvitedUsers;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountCapturePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyAllUsers;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGAccountCapturePolicyDisabled;
}

- (BOOL)isInvitedUsers {
  return _tag == DBTEAMLOGAccountCapturePolicyInvitedUsers;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountCapturePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return @"DBTEAMLOGAccountCapturePolicyAllUsers";
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return @"DBTEAMLOGAccountCapturePolicyDisabled";
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return @"DBTEAMLOGAccountCapturePolicyInvitedUsers";
  case DBTEAMLOGAccountCapturePolicyOther:
    return @"DBTEAMLOGAccountCapturePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCapturePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCapturePolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCapturePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCapturePolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountCapturePolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCapturePolicy:other];
}

- (BOOL)isEqualToAccountCapturePolicy:(DBTEAMLOGAccountCapturePolicy *)anAccountCapturePolicy {
  if (self == anAccountCapturePolicy) {
    return YES;
  }
  if (self.tag != anAccountCapturePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountCapturePolicyAllUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyDisabled:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyInvitedUsers:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  case DBTEAMLOGAccountCapturePolicyOther:
    return [[self tagName] isEqual:[anAccountCapturePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCapturePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCapturePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllUsers]) {
    jsonDict[@".tag"] = @"all_users";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isInvitedUsers]) {
    jsonDict[@".tag"] = @"invited_users";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCapturePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"all_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithAllUsers];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"invited_users"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithInvitedUsers];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountCapturePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureRelinquishAccountDetails:other];
}

- (BOOL)isEqualToAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)anAccountCaptureRelinquishAccountDetails {
  if (self == anAccountCaptureRelinquishAccountDetails) {
    return YES;
  }
  if (![self.domainName isEqual:anAccountCaptureRelinquishAccountDetails.domainName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureRelinquishAccountDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];

  return [[DBTEAMLOGAccountCaptureRelinquishAccountDetails alloc] initWithDomainName:domainName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountCaptureRelinquishAccountType:other];
}

- (BOOL)isEqualToAccountCaptureRelinquishAccountType:
    (DBTEAMLOGAccountCaptureRelinquishAccountType *)anAccountCaptureRelinquishAccountType {
  if (self == anAccountCaptureRelinquishAccountType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountCaptureRelinquishAccountType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountCaptureRelinquishAccountTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountCaptureRelinquishAccountType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountCaptureRelinquishAccountType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountCaptureRelinquishAccountType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountLockOrUnlockedDetails.h"
#import "DBTEAMLOGAccountState.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountLockOrUnlockedDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGAccountState *)previousValue
                            dNewValue:(DBTEAMLOGAccountState *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountLockOrUnlockedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountLockOrUnlockedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountLockOrUnlockedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountLockOrUnlockedDetails:other];
}

- (BOOL)isEqualToAccountLockOrUnlockedDetails:(DBTEAMLOGAccountLockOrUnlockedDetails *)anAccountLockOrUnlockedDetails {
  if (self == anAccountLockOrUnlockedDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:anAccountLockOrUnlockedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:anAccountLockOrUnlockedDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountLockOrUnlockedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountLockOrUnlockedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGAccountStateSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGAccountStateSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountLockOrUnlockedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAccountState *previousValue = [DBTEAMLOGAccountStateSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGAccountState *dNewValue = [DBTEAMLOGAccountStateSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGAccountLockOrUnlockedDetails alloc] initWithPreviousValue:previousValue dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountLockOrUnlockedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountLockOrUnlockedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountLockOrUnlockedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountLockOrUnlockedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountLockOrUnlockedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountLockOrUnlockedType:other];
}

- (BOOL)isEqualToAccountLockOrUnlockedType:(DBTEAMLOGAccountLockOrUnlockedType *)anAccountLockOrUnlockedType {
  if (self == anAccountLockOrUnlockedType) {
    return YES;
  }
  if (![self.description_ isEqual:anAccountLockOrUnlockedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountLockOrUnlockedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountLockOrUnlockedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountLockOrUnlockedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAccountLockOrUnlockedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountState.h"

#pragma mark - API Object

@implementation DBTEAMLOGAccountState

#pragma mark - Constructors

- (instancetype)initWithLocked {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountStateLocked;
  }
  return self;
}

- (instancetype)initWithUnlocked {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountStateUnlocked;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAccountStateOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLocked {
  return _tag == DBTEAMLOGAccountStateLocked;
}

- (BOOL)isUnlocked {
  return _tag == DBTEAMLOGAccountStateUnlocked;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAccountStateOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAccountStateLocked:
    return @"DBTEAMLOGAccountStateLocked";
  case DBTEAMLOGAccountStateUnlocked:
    return @"DBTEAMLOGAccountStateUnlocked";
  case DBTEAMLOGAccountStateOther:
    return @"DBTEAMLOGAccountStateOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAccountStateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAccountStateSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAccountStateSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAccountStateLocked:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountStateUnlocked:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAccountStateOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAccountState:other];
}

- (BOOL)isEqualToAccountState:(DBTEAMLOGAccountState *)anAccountState {
  if (self == anAccountState) {
    return YES;
  }
  if (self.tag != anAccountState.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAccountStateLocked:
    return [[self tagName] isEqual:[anAccountState tagName]];
  case DBTEAMLOGAccountStateUnlocked:
    return [[self tagName] isEqual:[anAccountState tagName]];
  case DBTEAMLOGAccountStateOther:
    return [[self tagName] isEqual:[anAccountState tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAccountStateSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAccountState *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLocked]) {
    jsonDict[@".tag"] = @"locked";
  } else if ([valueObj isUnlocked]) {
    jsonDict[@".tag"] = @"unlocked";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAccountState *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"locked"]) {
    return [[DBTEAMLOGAccountState alloc] initWithLocked];
  } else if ([tag isEqualToString:@"unlocked"]) {
    return [[DBTEAMLOGAccountState alloc] initWithUnlocked];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAccountState alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAccountState alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActionDetails.h"
#import "DBTEAMLOGJoinTeamDetails.h"
#import "DBTEAMLOGMemberRemoveActionType.h"
#import "DBTEAMLOGTeamInviteDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGActionDetails

@synthesize removeAction = _removeAction;
@synthesize teamInviteDetails = _teamInviteDetails;
@synthesize teamJoinDetails = _teamJoinDetails;

#pragma mark - Constructors

- (instancetype)initWithRemoveAction:(DBTEAMLOGMemberRemoveActionType *)removeAction {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsRemoveAction;
    _removeAction = removeAction;
  }
  return self;
}

- (instancetype)initWithTeamInviteDetails:(DBTEAMLOGTeamInviteDetails *)teamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsTeamInviteDetails;
    _teamInviteDetails = teamInviteDetails;
  }
  return self;
}

- (instancetype)initWithTeamJoinDetails:(DBTEAMLOGJoinTeamDetails *)teamJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsTeamJoinDetails;
    _teamJoinDetails = teamJoinDetails;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActionDetailsOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGMemberRemoveActionType *)removeAction {
  if (![self isRemoveAction]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActionDetailsRemoveAction, but was %@.", [self tagName]];
  }
  return _removeAction;
}

- (DBTEAMLOGTeamInviteDetails *)teamInviteDetails {
  if (![self isTeamInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActionDetailsTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _teamInviteDetails;
}

- (DBTEAMLOGJoinTeamDetails *)teamJoinDetails {
  if (![self isTeamJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActionDetailsTeamJoinDetails, but was %@.", [self tagName]];
  }
  return _teamJoinDetails;
}

#pragma mark - Tag state methods

- (BOOL)isRemoveAction {
  return _tag == DBTEAMLOGActionDetailsRemoveAction;
}

- (BOOL)isTeamInviteDetails {
  return _tag == DBTEAMLOGActionDetailsTeamInviteDetails;
}

- (BOOL)isTeamJoinDetails {
  return _tag == DBTEAMLOGActionDetailsTeamJoinDetails;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGActionDetailsOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGActionDetailsRemoveAction:
    return @"DBTEAMLOGActionDetailsRemoveAction";
  case DBTEAMLOGActionDetailsTeamInviteDetails:
    return @"DBTEAMLOGActionDetailsTeamInviteDetails";
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    return @"DBTEAMLOGActionDetailsTeamJoinDetails";
  case DBTEAMLOGActionDetailsOther:
    return @"DBTEAMLOGActionDetailsOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGActionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGActionDetailsRemoveAction:
    result = prime * result + [self.removeAction hash];
    break;
  case DBTEAMLOGActionDetailsTeamInviteDetails:
    result = prime * result + [self.teamInviteDetails hash];
    break;
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    result = prime * result + [self.teamJoinDetails hash];
    break;
  case DBTEAMLOGActionDetailsOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActionDetails:other];
}

- (BOOL)isEqualToActionDetails:(DBTEAMLOGActionDetails *)anActionDetails {
  if (self == anActionDetails) {
    return YES;
  }
  if (self.tag != anActionDetails.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGActionDetailsRemoveAction:
    return [self.removeAction isEqual:anActionDetails.removeAction];
  case DBTEAMLOGActionDetailsTeamInviteDetails:
    return [self.teamInviteDetails isEqual:anActionDetails.teamInviteDetails];
  case DBTEAMLOGActionDetailsTeamJoinDetails:
    return [self.teamJoinDetails isEqual:anActionDetails.teamJoinDetails];
  case DBTEAMLOGActionDetailsOther:
    return [[self tagName] isEqual:[anActionDetails tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isRemoveAction]) {
    jsonDict[@"remove_action"] =
        [[DBTEAMLOGMemberRemoveActionTypeSerializer serialize:valueObj.removeAction] mutableCopy];
    jsonDict[@".tag"] = @"remove_action";
  } else if ([valueObj isTeamInviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamInviteDetailsSerializer serialize:valueObj.teamInviteDetails]];
    jsonDict[@".tag"] = @"team_invite_details";
  } else if ([valueObj isTeamJoinDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGJoinTeamDetailsSerializer serialize:valueObj.teamJoinDetails]];
    jsonDict[@".tag"] = @"team_join_details";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"remove_action"]) {
    DBTEAMLOGMemberRemoveActionType *removeAction =
        [DBTEAMLOGMemberRemoveActionTypeSerializer deserialize:valueDict[@"remove_action"]];
    return [[DBTEAMLOGActionDetails alloc] initWithRemoveAction:removeAction];
  } else if ([tag isEqualToString:@"team_invite_details"]) {
    DBTEAMLOGTeamInviteDetails *teamInviteDetails = [DBTEAMLOGTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGActionDetails alloc] initWithTeamInviteDetails:teamInviteDetails];
  } else if ([tag isEqualToString:@"team_join_details"]) {
    DBTEAMLOGJoinTeamDetails *teamJoinDetails = [DBTEAMLOGJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGActionDetails alloc] initWithTeamJoinDetails:teamJoinDetails];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGActionDetails alloc] initWithOther];
  } else {
    return [[DBTEAMLOGActionDetails alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGActorLogInfo.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGResellerLogInfo.h"
#import "DBTEAMLOGUserLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGActorLogInfo

@synthesize admin = _admin;
@synthesize app = _app;
@synthesize reseller = _reseller;
@synthesize user = _user;

#pragma mark - Constructors

- (instancetype)initWithAdmin:(DBTEAMLOGUserLogInfo *)admin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoAdmin;
    _admin = admin;
  }
  return self;
}

- (instancetype)initWithAnonymous {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoAnonymous;
  }
  return self;
}

- (instancetype)initWithApp:(DBTEAMLOGAppLogInfo *)app {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoApp;
    _app = app;
  }
  return self;
}

- (instancetype)initWithDropbox {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoDropbox;
  }
  return self;
}

- (instancetype)initWithReseller:(DBTEAMLOGResellerLogInfo *)reseller {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoReseller;
    _reseller = reseller;
  }
  return self;
}

- (instancetype)initWithUser:(DBTEAMLOGUserLogInfo *)user {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoUser;
    _user = user;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGActorLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGUserLogInfo *)admin {
  if (![self isAdmin]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoAdmin, but was %@.", [self tagName]];
  }
  return _admin;
}

- (DBTEAMLOGAppLogInfo *)app {
  if (![self isApp]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoApp, but was %@.", [self tagName]];
  }
  return _app;
}

- (DBTEAMLOGResellerLogInfo *)reseller {
  if (![self isReseller]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoReseller, but was %@.", [self tagName]];
  }
  return _reseller;
}

- (DBTEAMLOGUserLogInfo *)user {
  if (![self isUser]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGActorLogInfoUser, but was %@.", [self tagName]];
  }
  return _user;
}

#pragma mark - Tag state methods

- (BOOL)isAdmin {
  return _tag == DBTEAMLOGActorLogInfoAdmin;
}

- (BOOL)isAnonymous {
  return _tag == DBTEAMLOGActorLogInfoAnonymous;
}

- (BOOL)isApp {
  return _tag == DBTEAMLOGActorLogInfoApp;
}

- (BOOL)isDropbox {
  return _tag == DBTEAMLOGActorLogInfoDropbox;
}

- (BOOL)isReseller {
  return _tag == DBTEAMLOGActorLogInfoReseller;
}

- (BOOL)isUser {
  return _tag == DBTEAMLOGActorLogInfoUser;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGActorLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGActorLogInfoAdmin:
    return @"DBTEAMLOGActorLogInfoAdmin";
  case DBTEAMLOGActorLogInfoAnonymous:
    return @"DBTEAMLOGActorLogInfoAnonymous";
  case DBTEAMLOGActorLogInfoApp:
    return @"DBTEAMLOGActorLogInfoApp";
  case DBTEAMLOGActorLogInfoDropbox:
    return @"DBTEAMLOGActorLogInfoDropbox";
  case DBTEAMLOGActorLogInfoReseller:
    return @"DBTEAMLOGActorLogInfoReseller";
  case DBTEAMLOGActorLogInfoUser:
    return @"DBTEAMLOGActorLogInfoUser";
  case DBTEAMLOGActorLogInfoOther:
    return @"DBTEAMLOGActorLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGActorLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGActorLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGActorLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGActorLogInfoAdmin:
    result = prime * result + [self.admin hash];
    break;
  case DBTEAMLOGActorLogInfoAnonymous:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGActorLogInfoApp:
    result = prime * result + [self.app hash];
    break;
  case DBTEAMLOGActorLogInfoDropbox:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGActorLogInfoReseller:
    result = prime * result + [self.reseller hash];
    break;
  case DBTEAMLOGActorLogInfoUser:
    result = prime * result + [self.user hash];
    break;
  case DBTEAMLOGActorLogInfoOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToActorLogInfo:other];
}

- (BOOL)isEqualToActorLogInfo:(DBTEAMLOGActorLogInfo *)anActorLogInfo {
  if (self == anActorLogInfo) {
    return YES;
  }
  if (self.tag != anActorLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGActorLogInfoAdmin:
    return [self.admin isEqual:anActorLogInfo.admin];
  case DBTEAMLOGActorLogInfoAnonymous:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  case DBTEAMLOGActorLogInfoApp:
    return [self.app isEqual:anActorLogInfo.app];
  case DBTEAMLOGActorLogInfoDropbox:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  case DBTEAMLOGActorLogInfoReseller:
    return [self.reseller isEqual:anActorLogInfo.reseller];
  case DBTEAMLOGActorLogInfoUser:
    return [self.user isEqual:anActorLogInfo.user];
  case DBTEAMLOGActorLogInfoOther:
    return [[self tagName] isEqual:[anActorLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGActorLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGActorLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAdmin]) {
    jsonDict[@"admin"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.admin] mutableCopy];
    jsonDict[@".tag"] = @"admin";
  } else if ([valueObj isAnonymous]) {
    jsonDict[@".tag"] = @"anonymous";
  } else if ([valueObj isApp]) {
    jsonDict[@"app"] = [[DBTEAMLOGAppLogInfoSerializer serialize:valueObj.app] mutableCopy];
    jsonDict[@".tag"] = @"app";
  } else if ([valueObj isDropbox]) {
    jsonDict[@".tag"] = @"dropbox";
  } else if ([valueObj isReseller]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGResellerLogInfoSerializer serialize:valueObj.reseller]];
    jsonDict[@".tag"] = @"reseller";
  } else if ([valueObj isUser]) {
    jsonDict[@"user"] = [[DBTEAMLOGUserLogInfoSerializer serialize:valueObj.user] mutableCopy];
    jsonDict[@".tag"] = @"user";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGActorLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"admin"]) {
    DBTEAMLOGUserLogInfo *admin = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"admin"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithAdmin:admin];
  } else if ([tag isEqualToString:@"anonymous"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithAnonymous];
  } else if ([tag isEqualToString:@"app"]) {
    DBTEAMLOGAppLogInfo *app = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithApp:app];
  } else if ([tag isEqualToString:@"dropbox"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithDropbox];
  } else if ([tag isEqualToString:@"reseller"]) {
    DBTEAMLOGResellerLogInfo *reseller = [DBTEAMLOGResellerLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGActorLogInfo alloc] initWithReseller:reseller];
  } else if ([tag isEqualToString:@"user"]) {
    DBTEAMLOGUserLogInfo *user = [DBTEAMLOGUserLogInfoSerializer deserialize:valueDict[@"user"]];
    return [[DBTEAMLOGActorLogInfo alloc] initWithUser:user];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGActorLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertCategoryEnum.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertCategoryEnum

#pragma mark - Constructors

- (instancetype)initWithAccountTakeover {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumAccountTakeover;
  }
  return self;
}

- (instancetype)initWithDataLossProtection {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumDataLossProtection;
  }
  return self;
}

- (instancetype)initWithInformationGovernance {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumInformationGovernance;
  }
  return self;
}

- (instancetype)initWithMalwareSharing {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumMalwareSharing;
  }
  return self;
}

- (instancetype)initWithMassiveFileOperation {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation;
  }
  return self;
}

- (instancetype)initWithNa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumNa;
  }
  return self;
}

- (instancetype)initWithThreatManagement {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumThreatManagement;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertCategoryEnumOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAccountTakeover {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumAccountTakeover;
}

- (BOOL)isDataLossProtection {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumDataLossProtection;
}

- (BOOL)isInformationGovernance {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumInformationGovernance;
}

- (BOOL)isMalwareSharing {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumMalwareSharing;
}

- (BOOL)isMassiveFileOperation {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation;
}

- (BOOL)isNa {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumNa;
}

- (BOOL)isThreatManagement {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumThreatManagement;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminAlertCategoryEnumOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminAlertCategoryEnumAccountTakeover:
    return @"DBTEAMLOGAdminAlertCategoryEnumAccountTakeover";
  case DBTEAMLOGAdminAlertCategoryEnumDataLossProtection:
    return @"DBTEAMLOGAdminAlertCategoryEnumDataLossProtection";
  case DBTEAMLOGAdminAlertCategoryEnumInformationGovernance:
    return @"DBTEAMLOGAdminAlertCategoryEnumInformationGovernance";
  case DBTEAMLOGAdminAlertCategoryEnumMalwareSharing:
    return @"DBTEAMLOGAdminAlertCategoryEnumMalwareSharing";
  case DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation:
    return @"DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation";
  case DBTEAMLOGAdminAlertCategoryEnumNa:
    return @"DBTEAMLOGAdminAlertCategoryEnumNa";
  case DBTEAMLOGAdminAlertCategoryEnumThreatManagement:
    return @"DBTEAMLOGAdminAlertCategoryEnumThreatManagement";
  case DBTEAMLOGAdminAlertCategoryEnumOther:
    return @"DBTEAMLOGAdminAlertCategoryEnumOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertCategoryEnumSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertCategoryEnumSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertCategoryEnumSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminAlertCategoryEnumAccountTakeover:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumDataLossProtection:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumInformationGovernance:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumMalwareSharing:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumNa:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumThreatManagement:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertCategoryEnumOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertCategoryEnum:other];
}

- (BOOL)isEqualToAdminAlertCategoryEnum:(DBTEAMLOGAdminAlertCategoryEnum *)anAdminAlertCategoryEnum {
  if (self == anAdminAlertCategoryEnum) {
    return YES;
  }
  if (self.tag != anAdminAlertCategoryEnum.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminAlertCategoryEnumAccountTakeover:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumDataLossProtection:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumInformationGovernance:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumMalwareSharing:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumMassiveFileOperation:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumNa:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumThreatManagement:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  case DBTEAMLOGAdminAlertCategoryEnumOther:
    return [[self tagName] isEqual:[anAdminAlertCategoryEnum tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertCategoryEnumSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertCategoryEnum *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAccountTakeover]) {
    jsonDict[@".tag"] = @"account_takeover";
  } else if ([valueObj isDataLossProtection]) {
    jsonDict[@".tag"] = @"data_loss_protection";
  } else if ([valueObj isInformationGovernance]) {
    jsonDict[@".tag"] = @"information_governance";
  } else if ([valueObj isMalwareSharing]) {
    jsonDict[@".tag"] = @"malware_sharing";
  } else if ([valueObj isMassiveFileOperation]) {
    jsonDict[@".tag"] = @"massive_file_operation";
  } else if ([valueObj isNa]) {
    jsonDict[@".tag"] = @"na";
  } else if ([valueObj isThreatManagement]) {
    jsonDict[@".tag"] = @"threat_management";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertCategoryEnum *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"account_takeover"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithAccountTakeover];
  } else if ([tag isEqualToString:@"data_loss_protection"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithDataLossProtection];
  } else if ([tag isEqualToString:@"information_governance"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithInformationGovernance];
  } else if ([tag isEqualToString:@"malware_sharing"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithMalwareSharing];
  } else if ([tag isEqualToString:@"massive_file_operation"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithMassiveFileOperation];
  } else if ([tag isEqualToString:@"na"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithNa];
  } else if ([tag isEqualToString:@"threat_management"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithThreatManagement];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminAlertCategoryEnum alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertGeneralStateEnum.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertGeneralStateEnum

#pragma mark - Constructors

- (instancetype)initWithActive {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumActive;
  }
  return self;
}

- (instancetype)initWithDismissed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumDismissed;
  }
  return self;
}

- (instancetype)initWithInProgress {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumInProgress;
  }
  return self;
}

- (instancetype)initWithNa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumNa;
  }
  return self;
}

- (instancetype)initWithResolved {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumResolved;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertGeneralStateEnumOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isActive {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumActive;
}

- (BOOL)isDismissed {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumDismissed;
}

- (BOOL)isInProgress {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumInProgress;
}

- (BOOL)isNa {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumNa;
}

- (BOOL)isResolved {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumResolved;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminAlertGeneralStateEnumOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminAlertGeneralStateEnumActive:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumActive";
  case DBTEAMLOGAdminAlertGeneralStateEnumDismissed:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumDismissed";
  case DBTEAMLOGAdminAlertGeneralStateEnumInProgress:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumInProgress";
  case DBTEAMLOGAdminAlertGeneralStateEnumNa:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumNa";
  case DBTEAMLOGAdminAlertGeneralStateEnumResolved:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumResolved";
  case DBTEAMLOGAdminAlertGeneralStateEnumOther:
    return @"DBTEAMLOGAdminAlertGeneralStateEnumOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertGeneralStateEnumSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertGeneralStateEnumSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertGeneralStateEnumSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminAlertGeneralStateEnumActive:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertGeneralStateEnumDismissed:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertGeneralStateEnumInProgress:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertGeneralStateEnumNa:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertGeneralStateEnumResolved:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertGeneralStateEnumOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertGeneralStateEnum:other];
}

- (BOOL)isEqualToAdminAlertGeneralStateEnum:(DBTEAMLOGAdminAlertGeneralStateEnum *)anAdminAlertGeneralStateEnum {
  if (self == anAdminAlertGeneralStateEnum) {
    return YES;
  }
  if (self.tag != anAdminAlertGeneralStateEnum.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminAlertGeneralStateEnumActive:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  case DBTEAMLOGAdminAlertGeneralStateEnumDismissed:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  case DBTEAMLOGAdminAlertGeneralStateEnumInProgress:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  case DBTEAMLOGAdminAlertGeneralStateEnumNa:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  case DBTEAMLOGAdminAlertGeneralStateEnumResolved:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  case DBTEAMLOGAdminAlertGeneralStateEnumOther:
    return [[self tagName] isEqual:[anAdminAlertGeneralStateEnum tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertGeneralStateEnumSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertGeneralStateEnum *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isActive]) {
    jsonDict[@".tag"] = @"active";
  } else if ([valueObj isDismissed]) {
    jsonDict[@".tag"] = @"dismissed";
  } else if ([valueObj isInProgress]) {
    jsonDict[@".tag"] = @"in_progress";
  } else if ([valueObj isNa]) {
    jsonDict[@".tag"] = @"na";
  } else if ([valueObj isResolved]) {
    jsonDict[@".tag"] = @"resolved";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertGeneralStateEnum *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"active"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithActive];
  } else if ([tag isEqualToString:@"dismissed"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithDismissed];
  } else if ([tag isEqualToString:@"in_progress"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithInProgress];
  } else if ([tag isEqualToString:@"na"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithNa];
  } else if ([tag isEqualToString:@"resolved"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithResolved];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminAlertGeneralStateEnum alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertSeverityEnum.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertSeverityEnum

#pragma mark - Constructors

- (instancetype)initWithHigh {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumHigh;
  }
  return self;
}

- (instancetype)initWithInfo {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumInfo;
  }
  return self;
}

- (instancetype)initWithLow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumLow;
  }
  return self;
}

- (instancetype)initWithMedium {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumMedium;
  }
  return self;
}

- (instancetype)initWithNa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumNa;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertSeverityEnumOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isHigh {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumHigh;
}

- (BOOL)isInfo {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumInfo;
}

- (BOOL)isLow {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumLow;
}

- (BOOL)isMedium {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumMedium;
}

- (BOOL)isNa {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumNa;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminAlertSeverityEnumOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminAlertSeverityEnumHigh:
    return @"DBTEAMLOGAdminAlertSeverityEnumHigh";
  case DBTEAMLOGAdminAlertSeverityEnumInfo:
    return @"DBTEAMLOGAdminAlertSeverityEnumInfo";
  case DBTEAMLOGAdminAlertSeverityEnumLow:
    return @"DBTEAMLOGAdminAlertSeverityEnumLow";
  case DBTEAMLOGAdminAlertSeverityEnumMedium:
    return @"DBTEAMLOGAdminAlertSeverityEnumMedium";
  case DBTEAMLOGAdminAlertSeverityEnumNa:
    return @"DBTEAMLOGAdminAlertSeverityEnumNa";
  case DBTEAMLOGAdminAlertSeverityEnumOther:
    return @"DBTEAMLOGAdminAlertSeverityEnumOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertSeverityEnumSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertSeverityEnumSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertSeverityEnumSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminAlertSeverityEnumHigh:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertSeverityEnumInfo:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertSeverityEnumLow:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertSeverityEnumMedium:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertSeverityEnumNa:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertSeverityEnumOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertSeverityEnum:other];
}

- (BOOL)isEqualToAdminAlertSeverityEnum:(DBTEAMLOGAdminAlertSeverityEnum *)anAdminAlertSeverityEnum {
  if (self == anAdminAlertSeverityEnum) {
    return YES;
  }
  if (self.tag != anAdminAlertSeverityEnum.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminAlertSeverityEnumHigh:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  case DBTEAMLOGAdminAlertSeverityEnumInfo:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  case DBTEAMLOGAdminAlertSeverityEnumLow:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  case DBTEAMLOGAdminAlertSeverityEnumMedium:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  case DBTEAMLOGAdminAlertSeverityEnumNa:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  case DBTEAMLOGAdminAlertSeverityEnumOther:
    return [[self tagName] isEqual:[anAdminAlertSeverityEnum tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertSeverityEnumSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertSeverityEnum *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHigh]) {
    jsonDict[@".tag"] = @"high";
  } else if ([valueObj isInfo]) {
    jsonDict[@".tag"] = @"info";
  } else if ([valueObj isLow]) {
    jsonDict[@".tag"] = @"low";
  } else if ([valueObj isMedium]) {
    jsonDict[@".tag"] = @"medium";
  } else if ([valueObj isNa]) {
    jsonDict[@".tag"] = @"na";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertSeverityEnum *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"high"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithHigh];
  } else if ([tag isEqualToString:@"info"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithInfo];
  } else if ([tag isEqualToString:@"low"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithLow];
  } else if ([tag isEqualToString:@"medium"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithMedium];
  } else if ([tag isEqualToString:@"na"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithNa];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminAlertSeverityEnum alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingAlertConfiguration.h"
#import "DBTEAMLOGAdminAlertingAlertSensitivity.h"
#import "DBTEAMLOGAdminAlertingAlertStatePolicy.h"
#import "DBTEAMLOGRecipientsConfiguration.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingAlertConfiguration

#pragma mark - Constructors

- (instancetype)initWithAlertState:(DBTEAMLOGAdminAlertingAlertStatePolicy *)alertState
                  sensitivityLevel:(DBTEAMLOGAdminAlertingAlertSensitivity *)sensitivityLevel
                recipientsSettings:(DBTEAMLOGRecipientsConfiguration *)recipientsSettings
                              text:(NSString *)text
            excludedFileExtensions:(NSString *)excludedFileExtensions {

  self = [super init];
  if (self) {
    _alertState = alertState;
    _sensitivityLevel = sensitivityLevel;
    _recipientsSettings = recipientsSettings;
    _text = text;
    _excludedFileExtensions = excludedFileExtensions;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAlertState:nil sensitivityLevel:nil recipientsSettings:nil text:nil excludedFileExtensions:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingAlertConfigurationSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingAlertConfigurationSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingAlertConfigurationSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.alertState != nil) {
    result = prime * result + [self.alertState hash];
  }
  if (self.sensitivityLevel != nil) {
    result = prime * result + [self.sensitivityLevel hash];
  }
  if (self.recipientsSettings != nil) {
    result = prime * result + [self.recipientsSettings hash];
  }
  if (self.text != nil) {
    result = prime * result + [self.text hash];
  }
  if (self.excludedFileExtensions != nil) {
    result = prime * result + [self.excludedFileExtensions hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingAlertConfiguration:other];
}

- (BOOL)isEqualToAdminAlertingAlertConfiguration:
    (DBTEAMLOGAdminAlertingAlertConfiguration *)anAdminAlertingAlertConfiguration {
  if (self == anAdminAlertingAlertConfiguration) {
    return YES;
  }
  if (self.alertState) {
    if (![self.alertState isEqual:anAdminAlertingAlertConfiguration.alertState]) {
      return NO;
    }
  }
  if (self.sensitivityLevel) {
    if (![self.sensitivityLevel isEqual:anAdminAlertingAlertConfiguration.sensitivityLevel]) {
      return NO;
    }
  }
  if (self.recipientsSettings) {
    if (![self.recipientsSettings isEqual:anAdminAlertingAlertConfiguration.recipientsSettings]) {
      return NO;
    }
  }
  if (self.text) {
    if (![self.text isEqual:anAdminAlertingAlertConfiguration.text]) {
      return NO;
    }
  }
  if (self.excludedFileExtensions) {
    if (![self.excludedFileExtensions isEqual:anAdminAlertingAlertConfiguration.excludedFileExtensions]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingAlertConfigurationSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingAlertConfiguration *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.alertState) {
    jsonDict[@"alert_state"] = [DBTEAMLOGAdminAlertingAlertStatePolicySerializer serialize:valueObj.alertState];
  }
  if (valueObj.sensitivityLevel) {
    jsonDict[@"sensitivity_level"] =
        [DBTEAMLOGAdminAlertingAlertSensitivitySerializer serialize:valueObj.sensitivityLevel];
  }
  if (valueObj.recipientsSettings) {
    jsonDict[@"recipients_settings"] =
        [DBTEAMLOGRecipientsConfigurationSerializer serialize:valueObj.recipientsSettings];
  }
  if (valueObj.text) {
    jsonDict[@"text"] = valueObj.text;
  }
  if (valueObj.excludedFileExtensions) {
    jsonDict[@"excluded_file_extensions"] = valueObj.excludedFileExtensions;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingAlertConfiguration *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAdminAlertingAlertStatePolicy *alertState =
      valueDict[@"alert_state"]
          ? [DBTEAMLOGAdminAlertingAlertStatePolicySerializer deserialize:valueDict[@"alert_state"]]
          : nil;
  DBTEAMLOGAdminAlertingAlertSensitivity *sensitivityLevel =
      valueDict[@"sensitivity_level"]
          ? [DBTEAMLOGAdminAlertingAlertSensitivitySerializer deserialize:valueDict[@"sensitivity_level"]]
          : nil;
  DBTEAMLOGRecipientsConfiguration *recipientsSettings =
      valueDict[@"recipients_settings"]
          ? [DBTEAMLOGRecipientsConfigurationSerializer deserialize:valueDict[@"recipients_settings"]]
          : nil;
  NSString *text = valueDict[@"text"] ?: nil;
  NSString *excludedFileExtensions = valueDict[@"excluded_file_extensions"] ?: nil;

  return [[DBTEAMLOGAdminAlertingAlertConfiguration alloc] initWithAlertState:alertState
                                                             sensitivityLevel:sensitivityLevel
                                                           recipientsSettings:recipientsSettings
                                                                         text:text
                                                       excludedFileExtensions:excludedFileExtensions];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingAlertSensitivity.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingAlertSensitivity

#pragma mark - Constructors

- (instancetype)initWithHigh {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityHigh;
  }
  return self;
}

- (instancetype)initWithHighest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityHighest;
  }
  return self;
}

- (instancetype)initWithInvalid {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityInvalid;
  }
  return self;
}

- (instancetype)initWithLow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityLow;
  }
  return self;
}

- (instancetype)initWithLowest {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityLowest;
  }
  return self;
}

- (instancetype)initWithMedium {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityMedium;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertSensitivityOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isHigh {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityHigh;
}

- (BOOL)isHighest {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityHighest;
}

- (BOOL)isInvalid {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityInvalid;
}

- (BOOL)isLow {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityLow;
}

- (BOOL)isLowest {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityLowest;
}

- (BOOL)isMedium {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityMedium;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminAlertingAlertSensitivityOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertSensitivityHigh:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityHigh";
  case DBTEAMLOGAdminAlertingAlertSensitivityHighest:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityHighest";
  case DBTEAMLOGAdminAlertingAlertSensitivityInvalid:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityInvalid";
  case DBTEAMLOGAdminAlertingAlertSensitivityLow:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityLow";
  case DBTEAMLOGAdminAlertingAlertSensitivityLowest:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityLowest";
  case DBTEAMLOGAdminAlertingAlertSensitivityMedium:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityMedium";
  case DBTEAMLOGAdminAlertingAlertSensitivityOther:
    return @"DBTEAMLOGAdminAlertingAlertSensitivityOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingAlertSensitivitySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingAlertSensitivitySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingAlertSensitivitySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertSensitivityHigh:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityHighest:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityInvalid:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityLow:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityLowest:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityMedium:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertSensitivityOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingAlertSensitivity:other];
}

- (BOOL)isEqualToAdminAlertingAlertSensitivity:
    (DBTEAMLOGAdminAlertingAlertSensitivity *)anAdminAlertingAlertSensitivity {
  if (self == anAdminAlertingAlertSensitivity) {
    return YES;
  }
  if (self.tag != anAdminAlertingAlertSensitivity.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertSensitivityHigh:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityHighest:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityInvalid:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityLow:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityLowest:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityMedium:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  case DBTEAMLOGAdminAlertingAlertSensitivityOther:
    return [[self tagName] isEqual:[anAdminAlertingAlertSensitivity tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingAlertSensitivitySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingAlertSensitivity *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isHigh]) {
    jsonDict[@".tag"] = @"high";
  } else if ([valueObj isHighest]) {
    jsonDict[@".tag"] = @"highest";
  } else if ([valueObj isInvalid]) {
    jsonDict[@".tag"] = @"invalid";
  } else if ([valueObj isLow]) {
    jsonDict[@".tag"] = @"low";
  } else if ([valueObj isLowest]) {
    jsonDict[@".tag"] = @"lowest";
  } else if ([valueObj isMedium]) {
    jsonDict[@".tag"] = @"medium";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingAlertSensitivity *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"high"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithHigh];
  } else if ([tag isEqualToString:@"highest"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithHighest];
  } else if ([tag isEqualToString:@"invalid"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithInvalid];
  } else if ([tag isEqualToString:@"low"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithLow];
  } else if ([tag isEqualToString:@"lowest"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithLowest];
  } else if ([tag isEqualToString:@"medium"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithMedium];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminAlertingAlertSensitivity alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertCategoryEnum.h"
#import "DBTEAMLOGAdminAlertGeneralStateEnum.h"
#import "DBTEAMLOGAdminAlertSeverityEnum.h"
#import "DBTEAMLOGAdminAlertingAlertStateChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingAlertStateChangedDetails

#pragma mark - Constructors

- (instancetype)initWithAlertName:(NSString *)alertName
                    alertSeverity:(DBTEAMLOGAdminAlertSeverityEnum *)alertSeverity
                    alertCategory:(DBTEAMLOGAdminAlertCategoryEnum *)alertCategory
                  alertInstanceId:(NSString *)alertInstanceId
                    previousValue:(DBTEAMLOGAdminAlertGeneralStateEnum *)previousValue
                        dNewValue:(DBTEAMLOGAdminAlertGeneralStateEnum *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](alertName);
  [DBStoneValidators nonnullValidator:nil](alertSeverity);
  [DBStoneValidators nonnullValidator:nil](alertCategory);
  [DBStoneValidators nonnullValidator:nil](alertInstanceId);
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _alertName = alertName;
    _alertSeverity = alertSeverity;
    _alertCategory = alertCategory;
    _alertInstanceId = alertInstanceId;
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.alertName hash];
  result = prime * result + [self.alertSeverity hash];
  result = prime * result + [self.alertCategory hash];
  result = prime * result + [self.alertInstanceId hash];
  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingAlertStateChangedDetails:other];
}

- (BOOL)isEqualToAdminAlertingAlertStateChangedDetails:
    (DBTEAMLOGAdminAlertingAlertStateChangedDetails *)anAdminAlertingAlertStateChangedDetails {
  if (self == anAdminAlertingAlertStateChangedDetails) {
    return YES;
  }
  if (![self.alertName isEqual:anAdminAlertingAlertStateChangedDetails.alertName]) {
    return NO;
  }
  if (![self.alertSeverity isEqual:anAdminAlertingAlertStateChangedDetails.alertSeverity]) {
    return NO;
  }
  if (![self.alertCategory isEqual:anAdminAlertingAlertStateChangedDetails.alertCategory]) {
    return NO;
  }
  if (![self.alertInstanceId isEqual:anAdminAlertingAlertStateChangedDetails.alertInstanceId]) {
    return NO;
  }
  if (![self.previousValue isEqual:anAdminAlertingAlertStateChangedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:anAdminAlertingAlertStateChangedDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingAlertStateChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"alert_name"] = valueObj.alertName;
  jsonDict[@"alert_severity"] = [DBTEAMLOGAdminAlertSeverityEnumSerializer serialize:valueObj.alertSeverity];
  jsonDict[@"alert_category"] = [DBTEAMLOGAdminAlertCategoryEnumSerializer serialize:valueObj.alertCategory];
  jsonDict[@"alert_instance_id"] = valueObj.alertInstanceId;
  jsonDict[@"previous_value"] = [DBTEAMLOGAdminAlertGeneralStateEnumSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGAdminAlertGeneralStateEnumSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingAlertStateChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *alertName = valueDict[@"alert_name"];
  DBTEAMLOGAdminAlertSeverityEnum *alertSeverity =
      [DBTEAMLOGAdminAlertSeverityEnumSerializer deserialize:valueDict[@"alert_severity"]];
  DBTEAMLOGAdminAlertCategoryEnum *alertCategory =
      [DBTEAMLOGAdminAlertCategoryEnumSerializer deserialize:valueDict[@"alert_category"]];
  NSString *alertInstanceId = valueDict[@"alert_instance_id"];
  DBTEAMLOGAdminAlertGeneralStateEnum *previousValue =
      [DBTEAMLOGAdminAlertGeneralStateEnumSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGAdminAlertGeneralStateEnum *dNewValue =
      [DBTEAMLOGAdminAlertGeneralStateEnumSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGAdminAlertingAlertStateChangedDetails alloc] initWithAlertName:alertName
                                                                     alertSeverity:alertSeverity
                                                                     alertCategory:alertCategory
                                                                   alertInstanceId:alertInstanceId
                                                                     previousValue:previousValue
                                                                         dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingAlertStateChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingAlertStateChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingAlertStateChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingAlertStateChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingAlertStateChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingAlertStateChangedType:other];
}

- (BOOL)isEqualToAdminAlertingAlertStateChangedType:
    (DBTEAMLOGAdminAlertingAlertStateChangedType *)anAdminAlertingAlertStateChangedType {
  if (self == anAdminAlertingAlertStateChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:anAdminAlertingAlertStateChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingAlertStateChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingAlertStateChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingAlertStateChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAdminAlertingAlertStateChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingAlertStatePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingAlertStatePolicy

#pragma mark - Constructors

- (instancetype)initWithOff {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertStatePolicyOff;
  }
  return self;
}

- (instancetype)initWithOn {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertStatePolicyOn;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminAlertingAlertStatePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOff {
  return _tag == DBTEAMLOGAdminAlertingAlertStatePolicyOff;
}

- (BOOL)isOn {
  return _tag == DBTEAMLOGAdminAlertingAlertStatePolicyOn;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminAlertingAlertStatePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertStatePolicyOff:
    return @"DBTEAMLOGAdminAlertingAlertStatePolicyOff";
  case DBTEAMLOGAdminAlertingAlertStatePolicyOn:
    return @"DBTEAMLOGAdminAlertingAlertStatePolicyOn";
  case DBTEAMLOGAdminAlertingAlertStatePolicyOther:
    return @"DBTEAMLOGAdminAlertingAlertStatePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingAlertStatePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingAlertStatePolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingAlertStatePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertStatePolicyOff:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertStatePolicyOn:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminAlertingAlertStatePolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingAlertStatePolicy:other];
}

- (BOOL)isEqualToAdminAlertingAlertStatePolicy:
    (DBTEAMLOGAdminAlertingAlertStatePolicy *)anAdminAlertingAlertStatePolicy {
  if (self == anAdminAlertingAlertStatePolicy) {
    return YES;
  }
  if (self.tag != anAdminAlertingAlertStatePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminAlertingAlertStatePolicyOff:
    return [[self tagName] isEqual:[anAdminAlertingAlertStatePolicy tagName]];
  case DBTEAMLOGAdminAlertingAlertStatePolicyOn:
    return [[self tagName] isEqual:[anAdminAlertingAlertStatePolicy tagName]];
  case DBTEAMLOGAdminAlertingAlertStatePolicyOther:
    return [[self tagName] isEqual:[anAdminAlertingAlertStatePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingAlertStatePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingAlertStatePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOff]) {
    jsonDict[@".tag"] = @"off";
  } else if ([valueObj isOn]) {
    jsonDict[@".tag"] = @"on";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingAlertStatePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"off"]) {
    return [[DBTEAMLOGAdminAlertingAlertStatePolicy alloc] initWithOff];
  } else if ([tag isEqualToString:@"on"]) {
    return [[DBTEAMLOGAdminAlertingAlertStatePolicy alloc] initWithOn];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminAlertingAlertStatePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminAlertingAlertStatePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingAlertConfiguration.h"
#import "DBTEAMLOGAdminAlertingChangedAlertConfigDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingChangedAlertConfigDetails

#pragma mark - Constructors

- (instancetype)initWithAlertName:(NSString *)alertName
              previousAlertConfig:(DBTEAMLOGAdminAlertingAlertConfiguration *)previousAlertConfig
                  dNewAlertConfig:(DBTEAMLOGAdminAlertingAlertConfiguration *)dNewAlertConfig {
  [DBStoneValidators nonnullValidator:nil](alertName);
  [DBStoneValidators nonnullValidator:nil](previousAlertConfig);
  [DBStoneValidators nonnullValidator:nil](dNewAlertConfig);

  self = [super init];
  if (self) {
    _alertName = alertName;
    _previousAlertConfig = previousAlertConfig;
    _dNewAlertConfig = dNewAlertConfig;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.alertName hash];
  result = prime * result + [self.previousAlertConfig hash];
  result = prime * result + [self.dNewAlertConfig hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingChangedAlertConfigDetails:other];
}

- (BOOL)isEqualToAdminAlertingChangedAlertConfigDetails:
    (DBTEAMLOGAdminAlertingChangedAlertConfigDetails *)anAdminAlertingChangedAlertConfigDetails {
  if (self == anAdminAlertingChangedAlertConfigDetails) {
    return YES;
  }
  if (![self.alertName isEqual:anAdminAlertingChangedAlertConfigDetails.alertName]) {
    return NO;
  }
  if (![self.previousAlertConfig isEqual:anAdminAlertingChangedAlertConfigDetails.previousAlertConfig]) {
    return NO;
  }
  if (![self.dNewAlertConfig isEqual:anAdminAlertingChangedAlertConfigDetails.dNewAlertConfig]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingChangedAlertConfigDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"alert_name"] = valueObj.alertName;
  jsonDict[@"previous_alert_config"] =
      [DBTEAMLOGAdminAlertingAlertConfigurationSerializer serialize:valueObj.previousAlertConfig];
  jsonDict[@"new_alert_config"] =
      [DBTEAMLOGAdminAlertingAlertConfigurationSerializer serialize:valueObj.dNewAlertConfig];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingChangedAlertConfigDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *alertName = valueDict[@"alert_name"];
  DBTEAMLOGAdminAlertingAlertConfiguration *previousAlertConfig =
      [DBTEAMLOGAdminAlertingAlertConfigurationSerializer deserialize:valueDict[@"previous_alert_config"]];
  DBTEAMLOGAdminAlertingAlertConfiguration *dNewAlertConfig =
      [DBTEAMLOGAdminAlertingAlertConfigurationSerializer deserialize:valueDict[@"new_alert_config"]];

  return [[DBTEAMLOGAdminAlertingChangedAlertConfigDetails alloc] initWithAlertName:alertName
                                                                previousAlertConfig:previousAlertConfig
                                                                    dNewAlertConfig:dNewAlertConfig];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingChangedAlertConfigType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingChangedAlertConfigType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingChangedAlertConfigTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingChangedAlertConfigTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingChangedAlertConfigTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingChangedAlertConfigType:other];
}

- (BOOL)isEqualToAdminAlertingChangedAlertConfigType:
    (DBTEAMLOGAdminAlertingChangedAlertConfigType *)anAdminAlertingChangedAlertConfigType {
  if (self == anAdminAlertingChangedAlertConfigType) {
    return YES;
  }
  if (![self.description_ isEqual:anAdminAlertingChangedAlertConfigType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingChangedAlertConfigTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingChangedAlertConfigType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingChangedAlertConfigType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAdminAlertingChangedAlertConfigType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertCategoryEnum.h"
#import "DBTEAMLOGAdminAlertSeverityEnum.h"
#import "DBTEAMLOGAdminAlertingTriggeredAlertDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingTriggeredAlertDetails

#pragma mark - Constructors

- (instancetype)initWithAlertName:(NSString *)alertName
                    alertSeverity:(DBTEAMLOGAdminAlertSeverityEnum *)alertSeverity
                    alertCategory:(DBTEAMLOGAdminAlertCategoryEnum *)alertCategory
                  alertInstanceId:(NSString *)alertInstanceId {
  [DBStoneValidators nonnullValidator:nil](alertName);
  [DBStoneValidators nonnullValidator:nil](alertSeverity);
  [DBStoneValidators nonnullValidator:nil](alertCategory);
  [DBStoneValidators nonnullValidator:nil](alertInstanceId);

  self = [super init];
  if (self) {
    _alertName = alertName;
    _alertSeverity = alertSeverity;
    _alertCategory = alertCategory;
    _alertInstanceId = alertInstanceId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.alertName hash];
  result = prime * result + [self.alertSeverity hash];
  result = prime * result + [self.alertCategory hash];
  result = prime * result + [self.alertInstanceId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingTriggeredAlertDetails:other];
}

- (BOOL)isEqualToAdminAlertingTriggeredAlertDetails:
    (DBTEAMLOGAdminAlertingTriggeredAlertDetails *)anAdminAlertingTriggeredAlertDetails {
  if (self == anAdminAlertingTriggeredAlertDetails) {
    return YES;
  }
  if (![self.alertName isEqual:anAdminAlertingTriggeredAlertDetails.alertName]) {
    return NO;
  }
  if (![self.alertSeverity isEqual:anAdminAlertingTriggeredAlertDetails.alertSeverity]) {
    return NO;
  }
  if (![self.alertCategory isEqual:anAdminAlertingTriggeredAlertDetails.alertCategory]) {
    return NO;
  }
  if (![self.alertInstanceId isEqual:anAdminAlertingTriggeredAlertDetails.alertInstanceId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingTriggeredAlertDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"alert_name"] = valueObj.alertName;
  jsonDict[@"alert_severity"] = [DBTEAMLOGAdminAlertSeverityEnumSerializer serialize:valueObj.alertSeverity];
  jsonDict[@"alert_category"] = [DBTEAMLOGAdminAlertCategoryEnumSerializer serialize:valueObj.alertCategory];
  jsonDict[@"alert_instance_id"] = valueObj.alertInstanceId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingTriggeredAlertDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *alertName = valueDict[@"alert_name"];
  DBTEAMLOGAdminAlertSeverityEnum *alertSeverity =
      [DBTEAMLOGAdminAlertSeverityEnumSerializer deserialize:valueDict[@"alert_severity"]];
  DBTEAMLOGAdminAlertCategoryEnum *alertCategory =
      [DBTEAMLOGAdminAlertCategoryEnumSerializer deserialize:valueDict[@"alert_category"]];
  NSString *alertInstanceId = valueDict[@"alert_instance_id"];

  return [[DBTEAMLOGAdminAlertingTriggeredAlertDetails alloc] initWithAlertName:alertName
                                                                  alertSeverity:alertSeverity
                                                                  alertCategory:alertCategory
                                                                alertInstanceId:alertInstanceId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminAlertingTriggeredAlertType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminAlertingTriggeredAlertType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminAlertingTriggeredAlertTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminAlertingTriggeredAlertTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminAlertingTriggeredAlertTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminAlertingTriggeredAlertType:other];
}

- (BOOL)isEqualToAdminAlertingTriggeredAlertType:
    (DBTEAMLOGAdminAlertingTriggeredAlertType *)anAdminAlertingTriggeredAlertType {
  if (self == anAdminAlertingTriggeredAlertType) {
    return YES;
  }
  if (![self.description_ isEqual:anAdminAlertingTriggeredAlertType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminAlertingTriggeredAlertTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminAlertingTriggeredAlertType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminAlertingTriggeredAlertType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAdminAlertingTriggeredAlertType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminConsoleAppPermission.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminConsoleAppPermission

#pragma mark - Constructors

- (instancetype)initWithDefaultForListedApps {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps;
  }
  return self;
}

- (instancetype)initWithDefaultForUnlistedApps {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPermissionOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefaultForListedApps {
  return _tag == DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps;
}

- (BOOL)isDefaultForUnlistedApps {
  return _tag == DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminConsoleAppPermissionOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps:
    return @"DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps";
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps:
    return @"DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps";
  case DBTEAMLOGAdminConsoleAppPermissionOther:
    return @"DBTEAMLOGAdminConsoleAppPermissionOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminConsoleAppPermissionSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminConsoleAppPermissionSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminConsoleAppPermissionSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminConsoleAppPermissionOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminConsoleAppPermission:other];
}

- (BOOL)isEqualToAdminConsoleAppPermission:(DBTEAMLOGAdminConsoleAppPermission *)anAdminConsoleAppPermission {
  if (self == anAdminConsoleAppPermission) {
    return YES;
  }
  if (self.tag != anAdminConsoleAppPermission.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForListedApps:
    return [[self tagName] isEqual:[anAdminConsoleAppPermission tagName]];
  case DBTEAMLOGAdminConsoleAppPermissionDefaultForUnlistedApps:
    return [[self tagName] isEqual:[anAdminConsoleAppPermission tagName]];
  case DBTEAMLOGAdminConsoleAppPermissionOther:
    return [[self tagName] isEqual:[anAdminConsoleAppPermission tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminConsoleAppPermissionSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminConsoleAppPermission *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefaultForListedApps]) {
    jsonDict[@".tag"] = @"default_for_listed_apps";
  } else if ([valueObj isDefaultForUnlistedApps]) {
    jsonDict[@".tag"] = @"default_for_unlisted_apps";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminConsoleAppPermission *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default_for_listed_apps"]) {
    return [[DBTEAMLOGAdminConsoleAppPermission alloc] initWithDefaultForListedApps];
  } else if ([tag isEqualToString:@"default_for_unlisted_apps"]) {
    return [[DBTEAMLOGAdminConsoleAppPermission alloc] initWithDefaultForUnlistedApps];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminConsoleAppPermission alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminConsoleAppPermission alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminConsoleAppPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminConsoleAppPolicy

#pragma mark - Constructors

- (instancetype)initWithAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPolicyAllow;
  }
  return self;
}

- (instancetype)initWithBlock {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPolicyBlock;
  }
  return self;
}

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminConsoleAppPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllow {
  return _tag == DBTEAMLOGAdminConsoleAppPolicyAllow;
}

- (BOOL)isBlock {
  return _tag == DBTEAMLOGAdminConsoleAppPolicyBlock;
}

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGAdminConsoleAppPolicyDefault_;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminConsoleAppPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPolicyAllow:
    return @"DBTEAMLOGAdminConsoleAppPolicyAllow";
  case DBTEAMLOGAdminConsoleAppPolicyBlock:
    return @"DBTEAMLOGAdminConsoleAppPolicyBlock";
  case DBTEAMLOGAdminConsoleAppPolicyDefault_:
    return @"DBTEAMLOGAdminConsoleAppPolicyDefault_";
  case DBTEAMLOGAdminConsoleAppPolicyOther:
    return @"DBTEAMLOGAdminConsoleAppPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminConsoleAppPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminConsoleAppPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminConsoleAppPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPolicyAllow:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminConsoleAppPolicyBlock:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminConsoleAppPolicyDefault_:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminConsoleAppPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminConsoleAppPolicy:other];
}

- (BOOL)isEqualToAdminConsoleAppPolicy:(DBTEAMLOGAdminConsoleAppPolicy *)anAdminConsoleAppPolicy {
  if (self == anAdminConsoleAppPolicy) {
    return YES;
  }
  if (self.tag != anAdminConsoleAppPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminConsoleAppPolicyAllow:
    return [[self tagName] isEqual:[anAdminConsoleAppPolicy tagName]];
  case DBTEAMLOGAdminConsoleAppPolicyBlock:
    return [[self tagName] isEqual:[anAdminConsoleAppPolicy tagName]];
  case DBTEAMLOGAdminConsoleAppPolicyDefault_:
    return [[self tagName] isEqual:[anAdminConsoleAppPolicy tagName]];
  case DBTEAMLOGAdminConsoleAppPolicyOther:
    return [[self tagName] isEqual:[anAdminConsoleAppPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminConsoleAppPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminConsoleAppPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllow]) {
    jsonDict[@".tag"] = @"allow";
  } else if ([valueObj isBlock]) {
    jsonDict[@".tag"] = @"block";
  } else if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminConsoleAppPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"allow"]) {
    return [[DBTEAMLOGAdminConsoleAppPolicy alloc] initWithAllow];
  } else if ([tag isEqualToString:@"block"]) {
    return [[DBTEAMLOGAdminConsoleAppPolicy alloc] initWithBlock];
  } else if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGAdminConsoleAppPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminConsoleAppPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminConsoleAppPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminEmailRemindersChangedDetails.h"
#import "DBTEAMLOGAdminEmailRemindersPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminEmailRemindersChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGAdminEmailRemindersPolicy *)dNewValue
                    previousValue:(DBTEAMLOGAdminEmailRemindersPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminEmailRemindersChangedDetails:other];
}

- (BOOL)isEqualToAdminEmailRemindersChangedDetails:
    (DBTEAMLOGAdminEmailRemindersChangedDetails *)anAdminEmailRemindersChangedDetails {
  if (self == anAdminEmailRemindersChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anAdminEmailRemindersChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:anAdminEmailRemindersChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminEmailRemindersChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGAdminEmailRemindersPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGAdminEmailRemindersPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminEmailRemindersChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAdminEmailRemindersPolicy *dNewValue =
      [DBTEAMLOGAdminEmailRemindersPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGAdminEmailRemindersPolicy *previousValue =
      [DBTEAMLOGAdminEmailRemindersPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGAdminEmailRemindersChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminEmailRemindersChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminEmailRemindersChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminEmailRemindersChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminEmailRemindersChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminEmailRemindersChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminEmailRemindersChangedType:other];
}

- (BOOL)isEqualToAdminEmailRemindersChangedType:
    (DBTEAMLOGAdminEmailRemindersChangedType *)anAdminEmailRemindersChangedType {
  if (self == anAdminEmailRemindersChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:anAdminEmailRemindersChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminEmailRemindersChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminEmailRemindersChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminEmailRemindersChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAdminEmailRemindersChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminEmailRemindersPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminEmailRemindersPolicy

#pragma mark - Constructors

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminEmailRemindersPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminEmailRemindersPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminEmailRemindersPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminEmailRemindersPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGAdminEmailRemindersPolicyDefault_;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGAdminEmailRemindersPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGAdminEmailRemindersPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminEmailRemindersPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminEmailRemindersPolicyDefault_:
    return @"DBTEAMLOGAdminEmailRemindersPolicyDefault_";
  case DBTEAMLOGAdminEmailRemindersPolicyDisabled:
    return @"DBTEAMLOGAdminEmailRemindersPolicyDisabled";
  case DBTEAMLOGAdminEmailRemindersPolicyEnabled:
    return @"DBTEAMLOGAdminEmailRemindersPolicyEnabled";
  case DBTEAMLOGAdminEmailRemindersPolicyOther:
    return @"DBTEAMLOGAdminEmailRemindersPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminEmailRemindersPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminEmailRemindersPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminEmailRemindersPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminEmailRemindersPolicyDefault_:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminEmailRemindersPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminEmailRemindersPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminEmailRemindersPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminEmailRemindersPolicy:other];
}

- (BOOL)isEqualToAdminEmailRemindersPolicy:(DBTEAMLOGAdminEmailRemindersPolicy *)anAdminEmailRemindersPolicy {
  if (self == anAdminEmailRemindersPolicy) {
    return YES;
  }
  if (self.tag != anAdminEmailRemindersPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminEmailRemindersPolicyDefault_:
    return [[self tagName] isEqual:[anAdminEmailRemindersPolicy tagName]];
  case DBTEAMLOGAdminEmailRemindersPolicyDisabled:
    return [[self tagName] isEqual:[anAdminEmailRemindersPolicy tagName]];
  case DBTEAMLOGAdminEmailRemindersPolicyEnabled:
    return [[self tagName] isEqual:[anAdminEmailRemindersPolicy tagName]];
  case DBTEAMLOGAdminEmailRemindersPolicyOther:
    return [[self tagName] isEqual:[anAdminEmailRemindersPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminEmailRemindersPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminEmailRemindersPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminEmailRemindersPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGAdminEmailRemindersPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGAdminEmailRemindersPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGAdminEmailRemindersPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminEmailRemindersPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminEmailRemindersPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminRole.h"

#pragma mark - API Object

@implementation DBTEAMLOGAdminRole

#pragma mark - Constructors

- (instancetype)initWithBillingAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleBillingAdmin;
  }
  return self;
}

- (instancetype)initWithComplianceAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleComplianceAdmin;
  }
  return self;
}

- (instancetype)initWithContentAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleContentAdmin;
  }
  return self;
}

- (instancetype)initWithLimitedAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleLimitedAdmin;
  }
  return self;
}

- (instancetype)initWithMemberOnly {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleMemberOnly;
  }
  return self;
}

- (instancetype)initWithReportingAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleReportingAdmin;
  }
  return self;
}

- (instancetype)initWithSecurityAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleSecurityAdmin;
  }
  return self;
}

- (instancetype)initWithSupportAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleSupportAdmin;
  }
  return self;
}

- (instancetype)initWithTeamAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleTeamAdmin;
  }
  return self;
}

- (instancetype)initWithUserManagementAdmin {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleUserManagementAdmin;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAdminRoleOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isBillingAdmin {
  return _tag == DBTEAMLOGAdminRoleBillingAdmin;
}

- (BOOL)isComplianceAdmin {
  return _tag == DBTEAMLOGAdminRoleComplianceAdmin;
}

- (BOOL)isContentAdmin {
  return _tag == DBTEAMLOGAdminRoleContentAdmin;
}

- (BOOL)isLimitedAdmin {
  return _tag == DBTEAMLOGAdminRoleLimitedAdmin;
}

- (BOOL)isMemberOnly {
  return _tag == DBTEAMLOGAdminRoleMemberOnly;
}

- (BOOL)isReportingAdmin {
  return _tag == DBTEAMLOGAdminRoleReportingAdmin;
}

- (BOOL)isSecurityAdmin {
  return _tag == DBTEAMLOGAdminRoleSecurityAdmin;
}

- (BOOL)isSupportAdmin {
  return _tag == DBTEAMLOGAdminRoleSupportAdmin;
}

- (BOOL)isTeamAdmin {
  return _tag == DBTEAMLOGAdminRoleTeamAdmin;
}

- (BOOL)isUserManagementAdmin {
  return _tag == DBTEAMLOGAdminRoleUserManagementAdmin;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAdminRoleOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAdminRoleBillingAdmin:
    return @"DBTEAMLOGAdminRoleBillingAdmin";
  case DBTEAMLOGAdminRoleComplianceAdmin:
    return @"DBTEAMLOGAdminRoleComplianceAdmin";
  case DBTEAMLOGAdminRoleContentAdmin:
    return @"DBTEAMLOGAdminRoleContentAdmin";
  case DBTEAMLOGAdminRoleLimitedAdmin:
    return @"DBTEAMLOGAdminRoleLimitedAdmin";
  case DBTEAMLOGAdminRoleMemberOnly:
    return @"DBTEAMLOGAdminRoleMemberOnly";
  case DBTEAMLOGAdminRoleReportingAdmin:
    return @"DBTEAMLOGAdminRoleReportingAdmin";
  case DBTEAMLOGAdminRoleSecurityAdmin:
    return @"DBTEAMLOGAdminRoleSecurityAdmin";
  case DBTEAMLOGAdminRoleSupportAdmin:
    return @"DBTEAMLOGAdminRoleSupportAdmin";
  case DBTEAMLOGAdminRoleTeamAdmin:
    return @"DBTEAMLOGAdminRoleTeamAdmin";
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    return @"DBTEAMLOGAdminRoleUserManagementAdmin";
  case DBTEAMLOGAdminRoleOther:
    return @"DBTEAMLOGAdminRoleOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAdminRoleSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAdminRoleSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAdminRoleSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAdminRoleBillingAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleComplianceAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleContentAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleLimitedAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleMemberOnly:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleReportingAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleSecurityAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleSupportAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleTeamAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAdminRoleOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAdminRole:other];
}

- (BOOL)isEqualToAdminRole:(DBTEAMLOGAdminRole *)anAdminRole {
  if (self == anAdminRole) {
    return YES;
  }
  if (self.tag != anAdminRole.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAdminRoleBillingAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleComplianceAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleContentAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleLimitedAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleMemberOnly:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleReportingAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleSecurityAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleSupportAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleTeamAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleUserManagementAdmin:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  case DBTEAMLOGAdminRoleOther:
    return [[self tagName] isEqual:[anAdminRole tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAdminRoleSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAdminRole *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isBillingAdmin]) {
    jsonDict[@".tag"] = @"billing_admin";
  } else if ([valueObj isComplianceAdmin]) {
    jsonDict[@".tag"] = @"compliance_admin";
  } else if ([valueObj isContentAdmin]) {
    jsonDict[@".tag"] = @"content_admin";
  } else if ([valueObj isLimitedAdmin]) {
    jsonDict[@".tag"] = @"limited_admin";
  } else if ([valueObj isMemberOnly]) {
    jsonDict[@".tag"] = @"member_only";
  } else if ([valueObj isReportingAdmin]) {
    jsonDict[@".tag"] = @"reporting_admin";
  } else if ([valueObj isSecurityAdmin]) {
    jsonDict[@".tag"] = @"security_admin";
  } else if ([valueObj isSupportAdmin]) {
    jsonDict[@".tag"] = @"support_admin";
  } else if ([valueObj isTeamAdmin]) {
    jsonDict[@".tag"] = @"team_admin";
  } else if ([valueObj isUserManagementAdmin]) {
    jsonDict[@".tag"] = @"user_management_admin";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAdminRole *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"billing_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithBillingAdmin];
  } else if ([tag isEqualToString:@"compliance_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithComplianceAdmin];
  } else if ([tag isEqualToString:@"content_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithContentAdmin];
  } else if ([tag isEqualToString:@"limited_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithLimitedAdmin];
  } else if ([tag isEqualToString:@"member_only"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithMemberOnly];
  } else if ([tag isEqualToString:@"reporting_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithReportingAdmin];
  } else if ([tag isEqualToString:@"security_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithSecurityAdmin];
  } else if ([tag isEqualToString:@"support_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithSupportAdmin];
  } else if ([tag isEqualToString:@"team_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithTeamAdmin];
  } else if ([tag isEqualToString:@"user_management_admin"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithUserManagementAdmin];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAdminRole alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAdminRole alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAlertRecipientsSettingType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAlertRecipientsSettingType

#pragma mark - Constructors

- (instancetype)initWithCustomList {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAlertRecipientsSettingTypeCustomList;
  }
  return self;
}

- (instancetype)initWithInvalid {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAlertRecipientsSettingTypeInvalid;
  }
  return self;
}

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAlertRecipientsSettingTypeNone;
  }
  return self;
}

- (instancetype)initWithTeamAdmins {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAlertRecipientsSettingTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isCustomList {
  return _tag == DBTEAMLOGAlertRecipientsSettingTypeCustomList;
}

- (BOOL)isInvalid {
  return _tag == DBTEAMLOGAlertRecipientsSettingTypeInvalid;
}

- (BOOL)isNone {
  return _tag == DBTEAMLOGAlertRecipientsSettingTypeNone;
}

- (BOOL)isTeamAdmins {
  return _tag == DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAlertRecipientsSettingTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAlertRecipientsSettingTypeCustomList:
    return @"DBTEAMLOGAlertRecipientsSettingTypeCustomList";
  case DBTEAMLOGAlertRecipientsSettingTypeInvalid:
    return @"DBTEAMLOGAlertRecipientsSettingTypeInvalid";
  case DBTEAMLOGAlertRecipientsSettingTypeNone:
    return @"DBTEAMLOGAlertRecipientsSettingTypeNone";
  case DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins:
    return @"DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins";
  case DBTEAMLOGAlertRecipientsSettingTypeOther:
    return @"DBTEAMLOGAlertRecipientsSettingTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAlertRecipientsSettingTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAlertRecipientsSettingTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAlertRecipientsSettingTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAlertRecipientsSettingTypeCustomList:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAlertRecipientsSettingTypeInvalid:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAlertRecipientsSettingTypeNone:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGAlertRecipientsSettingTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAlertRecipientsSettingType:other];
}

- (BOOL)isEqualToAlertRecipientsSettingType:(DBTEAMLOGAlertRecipientsSettingType *)anAlertRecipientsSettingType {
  if (self == anAlertRecipientsSettingType) {
    return YES;
  }
  if (self.tag != anAlertRecipientsSettingType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAlertRecipientsSettingTypeCustomList:
    return [[self tagName] isEqual:[anAlertRecipientsSettingType tagName]];
  case DBTEAMLOGAlertRecipientsSettingTypeInvalid:
    return [[self tagName] isEqual:[anAlertRecipientsSettingType tagName]];
  case DBTEAMLOGAlertRecipientsSettingTypeNone:
    return [[self tagName] isEqual:[anAlertRecipientsSettingType tagName]];
  case DBTEAMLOGAlertRecipientsSettingTypeTeamAdmins:
    return [[self tagName] isEqual:[anAlertRecipientsSettingType tagName]];
  case DBTEAMLOGAlertRecipientsSettingTypeOther:
    return [[self tagName] isEqual:[anAlertRecipientsSettingType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAlertRecipientsSettingTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAlertRecipientsSettingType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isCustomList]) {
    jsonDict[@".tag"] = @"custom_list";
  } else if ([valueObj isInvalid]) {
    jsonDict[@".tag"] = @"invalid";
  } else if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isTeamAdmins]) {
    jsonDict[@".tag"] = @"team_admins";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAlertRecipientsSettingType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"custom_list"]) {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithCustomList];
  } else if ([tag isEqualToString:@"invalid"]) {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithInvalid];
  } else if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithNone];
  } else if ([tag isEqualToString:@"team_admins"]) {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithTeamAdmins];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAlertRecipientsSettingType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAllowDownloadDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadDisabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadDisabledDetails:(DBTEAMLOGAllowDownloadDisabledDetails *)anAllowDownloadDisabledDetails {
  if (self == anAllowDownloadDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadDisabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadDisabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadDisabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadDisabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadDisabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadDisabledTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAllowDownloadDisabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadDisabledType:other];
}

- (BOOL)isEqualToAllowDownloadDisabledType:(DBTEAMLOGAllowDownloadDisabledType *)anAllowDownloadDisabledType {
  if (self == anAllowDownloadDisabledType) {
    return YES;
  }
  if (![self.description_ isEqual:anAllowDownloadDisabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadDisabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadDisabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadDisabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAllowDownloadDisabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAllowDownloadEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadEnabledDetails:other];
}

- (BOOL)isEqualToAllowDownloadEnabledDetails:(DBTEAMLOGAllowDownloadEnabledDetails *)anAllowDownloadEnabledDetails {
  if (self == anAllowDownloadEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadEnabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadEnabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGAllowDownloadEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAllowDownloadEnabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAllowDownloadEnabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAllowDownloadEnabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAllowDownloadEnabledTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAllowDownloadEnabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAllowDownloadEnabledType:other];
}

- (BOOL)isEqualToAllowDownloadEnabledType:(DBTEAMLOGAllowDownloadEnabledType *)anAllowDownloadEnabledType {
  if (self == anAllowDownloadEnabledType) {
    return YES;
  }
  if (![self.description_ isEqual:anAllowDownloadEnabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAllowDownloadEnabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAllowDownloadEnabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAllowDownloadEnabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAllowDownloadEnabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGApiSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGApiSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithRequestId:(NSString *)requestId {
  [DBStoneValidators nonnullValidator:nil](requestId);

  self = [super init];
  if (self) {
    _requestId = requestId;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGApiSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGApiSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGApiSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.requestId hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApiSessionLogInfo:other];
}

- (BOOL)isEqualToApiSessionLogInfo:(DBTEAMLOGApiSessionLogInfo *)anApiSessionLogInfo {
  if (self == anApiSessionLogInfo) {
    return YES;
  }
  if (![self.requestId isEqual:anApiSessionLogInfo.requestId]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGApiSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGApiSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"request_id"] = valueObj.requestId;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGApiSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *requestId = valueDict[@"request_id"];

  return [[DBTEAMLOGApiSessionLogInfo alloc] initWithRequestId:requestId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppBlockedByPermissionsDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppBlockedByPermissionsDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppBlockedByPermissionsDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppBlockedByPermissionsDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppBlockedByPermissionsDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppBlockedByPermissionsDetails:other];
}

- (BOOL)isEqualToAppBlockedByPermissionsDetails:
    (DBTEAMLOGAppBlockedByPermissionsDetails *)anAppBlockedByPermissionsDetails {
  if (self == anAppBlockedByPermissionsDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppBlockedByPermissionsDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppBlockedByPermissionsDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppBlockedByPermissionsDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppBlockedByPermissionsDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppBlockedByPermissionsDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppBlockedByPermissionsType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppBlockedByPermissionsType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppBlockedByPermissionsTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppBlockedByPermissionsTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppBlockedByPermissionsTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppBlockedByPermissionsType:other];
}

- (BOOL)isEqualToAppBlockedByPermissionsType:(DBTEAMLOGAppBlockedByPermissionsType *)anAppBlockedByPermissionsType {
  if (self == anAppBlockedByPermissionsType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppBlockedByPermissionsType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppBlockedByPermissionsTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppBlockedByPermissionsType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppBlockedByPermissionsType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppBlockedByPermissionsType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkTeamDetails:other];
}

- (BOOL)isEqualToAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)anAppLinkTeamDetails {
  if (self == anAppLinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkTeamTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppLinkTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkTeamType:other];
}

- (BOOL)isEqualToAppLinkTeamType:(DBTEAMLOGAppLinkTeamType *)anAppLinkTeamType {
  if (self == anAppLinkTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppLinkTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppLinkTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppLinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkUserDetails:other];
}

- (BOOL)isEqualToAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)anAppLinkUserDetails {
  if (self == anAppLinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppLinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkUserDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkUserDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppLinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLinkUserType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLinkUserType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLinkUserTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLinkUserTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppLinkUserTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLinkUserType:other];
}

- (BOOL)isEqualToAppLinkUserType:(DBTEAMLOGAppLinkUserType *)anAppLinkUserType {
  if (self == anAppLinkUserType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppLinkUserType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLinkUserTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLinkUserType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLinkUserType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppLinkUserType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGTeamLinkedAppLogInfo.h"
#import "DBTEAMLOGUserLinkedAppLogInfo.h"
#import "DBTEAMLOGUserOrTeamLinkedAppLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppLogInfo

#pragma mark - Constructors

- (instancetype)initWithAppId:(NSString *)appId displayName:(NSString *)displayName {

  self = [super init];
  if (self) {
    _appId = appId;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithAppId:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.appId != nil) {
    result = prime * result + [self.appId hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppLogInfo:other];
}

- (BOOL)isEqualToAppLogInfo:(DBTEAMLOGAppLogInfo *)anAppLogInfo {
  if (self == anAppLogInfo) {
    return YES;
  }
  if (self.appId) {
    if (![self.appId isEqual:anAppLogInfo.appId]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:anAppLogInfo.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.appId) {
    jsonDict[@"app_id"] = valueObj.appId;
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGUserOrTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserOrTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userOrTeamLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGUserLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGUserLinkedAppLogInfoSerializer serialize:(DBTEAMLOGUserLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"userLinkedApp";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGTeamLinkedAppLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGTeamLinkedAppLogInfoSerializer serialize:(DBTEAMLOGTeamLinkedAppLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"teamLinkedApp";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"user_or_team_linked_app"]) {
    return [DBTEAMLOGUserOrTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"user_linked_app"]) {
    return [DBTEAMLOGUserLinkedAppLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"team_linked_app"]) {
    return [DBTEAMLOGTeamLinkedAppLogInfoSerializer deserialize:valueDict];
  }

  NSString *appId = valueDict[@"app_id"] ?: nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGAppLogInfo alloc] initWithAppId:appId displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAdminConsoleAppPermission.h"
#import "DBTEAMLOGAdminConsoleAppPolicy.h"
#import "DBTEAMLOGAppPermissionsChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppPermissionsChangedDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGAdminConsoleAppPolicy *)previousValue
                            dNewValue:(DBTEAMLOGAdminConsoleAppPolicy *)dNewValue
                              appName:(NSString *)appName
                           permission:(DBTEAMLOGAdminConsoleAppPermission *)permission {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _appName = appName;
    _permission = permission;
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

- (instancetype)initWithPreviousValue:(DBTEAMLOGAdminConsoleAppPolicy *)previousValue
                            dNewValue:(DBTEAMLOGAdminConsoleAppPolicy *)dNewValue {
  return [self initWithPreviousValue:previousValue dNewValue:dNewValue appName:nil permission:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppPermissionsChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppPermissionsChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppPermissionsChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];
  if (self.appName != nil) {
    result = prime * result + [self.appName hash];
  }
  if (self.permission != nil) {
    result = prime * result + [self.permission hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppPermissionsChangedDetails:other];
}

- (BOOL)isEqualToAppPermissionsChangedDetails:(DBTEAMLOGAppPermissionsChangedDetails *)anAppPermissionsChangedDetails {
  if (self == anAppPermissionsChangedDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:anAppPermissionsChangedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:anAppPermissionsChangedDetails.dNewValue]) {
    return NO;
  }
  if (self.appName) {
    if (![self.appName isEqual:anAppPermissionsChangedDetails.appName]) {
      return NO;
    }
  }
  if (self.permission) {
    if (![self.permission isEqual:anAppPermissionsChangedDetails.permission]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppPermissionsChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppPermissionsChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGAdminConsoleAppPolicySerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGAdminConsoleAppPolicySerializer serialize:valueObj.dNewValue];
  if (valueObj.appName) {
    jsonDict[@"app_name"] = valueObj.appName;
  }
  if (valueObj.permission) {
    jsonDict[@"permission"] = [DBTEAMLOGAdminConsoleAppPermissionSerializer serialize:valueObj.permission];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppPermissionsChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAdminConsoleAppPolicy *previousValue =
      [DBTEAMLOGAdminConsoleAppPolicySerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGAdminConsoleAppPolicy *dNewValue =
      [DBTEAMLOGAdminConsoleAppPolicySerializer deserialize:valueDict[@"new_value"]];
  NSString *appName = valueDict[@"app_name"] ?: nil;
  DBTEAMLOGAdminConsoleAppPermission *permission =
      valueDict[@"permission"] ? [DBTEAMLOGAdminConsoleAppPermissionSerializer deserialize:valueDict[@"permission"]]
                               : nil;

  return [[DBTEAMLOGAppPermissionsChangedDetails alloc] initWithPreviousValue:previousValue
                                                                    dNewValue:dNewValue
                                                                      appName:appName
                                                                   permission:permission];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppPermissionsChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppPermissionsChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppPermissionsChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppPermissionsChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppPermissionsChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppPermissionsChangedType:other];
}

- (BOOL)isEqualToAppPermissionsChangedType:(DBTEAMLOGAppPermissionsChangedType *)anAppPermissionsChangedType {
  if (self == anAppPermissionsChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppPermissionsChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppPermissionsChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppPermissionsChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppPermissionsChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppPermissionsChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkTeamDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkTeamDetails:other];
}

- (BOOL)isEqualToAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)anAppUnlinkTeamDetails {
  if (self == anAppUnlinkTeamDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkTeamDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkTeamDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkTeamDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppUnlinkTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkTeamTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppUnlinkTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkTeamType:other];
}

- (BOOL)isEqualToAppUnlinkTeamType:(DBTEAMLOGAppUnlinkTeamType *)anAppUnlinkTeamType {
  if (self == anAppUnlinkTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppUnlinkTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppUnlinkTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppLogInfo.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkUserDetails

#pragma mark - Constructors

- (instancetype)initWithAppInfo:(DBTEAMLOGAppLogInfo *)appInfo {
  [DBStoneValidators nonnullValidator:nil](appInfo);

  self = [super init];
  if (self) {
    _appInfo = appInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.appInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkUserDetails:other];
}

- (BOOL)isEqualToAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)anAppUnlinkUserDetails {
  if (self == anAppUnlinkUserDetails) {
    return YES;
  }
  if (![self.appInfo isEqual:anAppUnlinkUserDetails.appInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkUserDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkUserDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"app_info"] = [DBTEAMLOGAppLogInfoSerializer serialize:valueObj.appInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkUserDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGAppLogInfo *appInfo = [DBTEAMLOGAppLogInfoSerializer deserialize:valueDict[@"app_info"]];

  return [[DBTEAMLOGAppUnlinkUserDetails alloc] initWithAppInfo:appInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAppUnlinkUserType.h"

#pragma mark - API Object

@implementation DBTEAMLOGAppUnlinkUserType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAppUnlinkUserTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAppUnlinkUserTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAppUnlinkUserTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAppUnlinkUserType:other];
}

- (BOOL)isEqualToAppUnlinkUserType:(DBTEAMLOGAppUnlinkUserType *)anAppUnlinkUserType {
  if (self == anAppUnlinkUserType) {
    return YES;
  }
  if (![self.description_ isEqual:anAppUnlinkUserType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAppUnlinkUserTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAppUnlinkUserType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAppUnlinkUserType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGAppUnlinkUserType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGApplyNamingConventionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGApplyNamingConventionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGApplyNamingConventionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGApplyNamingConventionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGApplyNamingConventionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApplyNamingConventionDetails:other];
}

- (BOOL)isEqualToApplyNamingConventionDetails:(DBTEAMLOGApplyNamingConventionDetails *)anApplyNamingConventionDetails {
  if (self == anApplyNamingConventionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGApplyNamingConventionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGApplyNamingConventionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGApplyNamingConventionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGApplyNamingConventionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGApplyNamingConventionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGApplyNamingConventionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGApplyNamingConventionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGApplyNamingConventionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGApplyNamingConventionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToApplyNamingConventionType:other];
}

- (BOOL)isEqualToApplyNamingConventionType:(DBTEAMLOGApplyNamingConventionType *)anApplyNamingConventionType {
  if (self == anApplyNamingConventionType) {
    return YES;
  }
  if (![self.description_ isEqual:anApplyNamingConventionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGApplyNamingConventionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGApplyNamingConventionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGApplyNamingConventionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGApplyNamingConventionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAssetLogInfo.h"
#import "DBTEAMLOGFileLogInfo.h"
#import "DBTEAMLOGFolderLogInfo.h"
#import "DBTEAMLOGPaperDocumentLogInfo.h"
#import "DBTEAMLOGPaperFolderLogInfo.h"
#import "DBTEAMLOGShowcaseDocumentLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGAssetLogInfo

@synthesize file = _file;
@synthesize folder = _folder;
@synthesize paperDocument = _paperDocument;
@synthesize paperFolder = _paperFolder;
@synthesize showcaseDocument = _showcaseDocument;

#pragma mark - Constructors

- (instancetype)initWithFile:(DBTEAMLOGFileLogInfo *)file {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFile;
    _file = file;
  }
  return self;
}

- (instancetype)initWithFolder:(DBTEAMLOGFolderLogInfo *)folder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoFolder;
    _folder = folder;
  }
  return self;
}

- (instancetype)initWithPaperDocument:(DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperDocument;
    _paperDocument = paperDocument;
  }
  return self;
}

- (instancetype)initWithPaperFolder:(DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoPaperFolder;
    _paperFolder = paperFolder;
  }
  return self;
}

- (instancetype)initWithShowcaseDocument:(DBTEAMLOGShowcaseDocumentLogInfo *)showcaseDocument {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoShowcaseDocument;
    _showcaseDocument = showcaseDocument;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGAssetLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGFileLogInfo *)file {
  if (![self isFile]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFile, but was %@.", [self tagName]];
  }
  return _file;
}

- (DBTEAMLOGFolderLogInfo *)folder {
  if (![self isFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoFolder, but was %@.", [self tagName]];
  }
  return _folder;
}

- (DBTEAMLOGPaperDocumentLogInfo *)paperDocument {
  if (![self isPaperDocument]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperDocument, but was %@.", [self tagName]];
  }
  return _paperDocument;
}

- (DBTEAMLOGPaperFolderLogInfo *)paperFolder {
  if (![self isPaperFolder]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoPaperFolder, but was %@.", [self tagName]];
  }
  return _paperFolder;
}

- (DBTEAMLOGShowcaseDocumentLogInfo *)showcaseDocument {
  if (![self isShowcaseDocument]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGAssetLogInfoShowcaseDocument, but was %@.", [self tagName]];
  }
  return _showcaseDocument;
}

#pragma mark - Tag state methods

- (BOOL)isFile {
  return _tag == DBTEAMLOGAssetLogInfoFile;
}

- (BOOL)isFolder {
  return _tag == DBTEAMLOGAssetLogInfoFolder;
}

- (BOOL)isPaperDocument {
  return _tag == DBTEAMLOGAssetLogInfoPaperDocument;
}

- (BOOL)isPaperFolder {
  return _tag == DBTEAMLOGAssetLogInfoPaperFolder;
}

- (BOOL)isShowcaseDocument {
  return _tag == DBTEAMLOGAssetLogInfoShowcaseDocument;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGAssetLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return @"DBTEAMLOGAssetLogInfoFile";
  case DBTEAMLOGAssetLogInfoFolder:
    return @"DBTEAMLOGAssetLogInfoFolder";
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return @"DBTEAMLOGAssetLogInfoPaperDocument";
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return @"DBTEAMLOGAssetLogInfoPaperFolder";
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    return @"DBTEAMLOGAssetLogInfoShowcaseDocument";
  case DBTEAMLOGAssetLogInfoOther:
    return @"DBTEAMLOGAssetLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGAssetLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGAssetLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGAssetLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    result = prime * result + [self.file hash];
    break;
  case DBTEAMLOGAssetLogInfoFolder:
    result = prime * result + [self.folder hash];
    break;
  case DBTEAMLOGAssetLogInfoPaperDocument:
    result = prime * result + [self.paperDocument hash];
    break;
  case DBTEAMLOGAssetLogInfoPaperFolder:
    result = prime * result + [self.paperFolder hash];
    break;
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    result = prime * result + [self.showcaseDocument hash];
    break;
  case DBTEAMLOGAssetLogInfoOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToAssetLogInfo:other];
}

- (BOOL)isEqualToAssetLogInfo:(DBTEAMLOGAssetLogInfo *)anAssetLogInfo {
  if (self == anAssetLogInfo) {
    return YES;
  }
  if (self.tag != anAssetLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGAssetLogInfoFile:
    return [self.file isEqual:anAssetLogInfo.file];
  case DBTEAMLOGAssetLogInfoFolder:
    return [self.folder isEqual:anAssetLogInfo.folder];
  case DBTEAMLOGAssetLogInfoPaperDocument:
    return [self.paperDocument isEqual:anAssetLogInfo.paperDocument];
  case DBTEAMLOGAssetLogInfoPaperFolder:
    return [self.paperFolder isEqual:anAssetLogInfo.paperFolder];
  case DBTEAMLOGAssetLogInfoShowcaseDocument:
    return [self.showcaseDocument isEqual:anAssetLogInfo.showcaseDocument];
  case DBTEAMLOGAssetLogInfoOther:
    return [[self tagName] isEqual:[anAssetLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGAssetLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGAssetLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isFile]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileLogInfoSerializer serialize:valueObj.file]];
    jsonDict[@".tag"] = @"file";
  } else if ([valueObj isFolder]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFolderLogInfoSerializer serialize:valueObj.folder]];
    jsonDict[@".tag"] = @"folder";
  } else if ([valueObj isPaperDocument]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocumentLogInfoSerializer serialize:valueObj.paperDocument]];
    jsonDict[@".tag"] = @"paper_document";
  } else if ([valueObj isPaperFolder]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperFolderLogInfoSerializer serialize:valueObj.paperFolder]];
    jsonDict[@".tag"] = @"paper_folder";
  } else if ([valueObj isShowcaseDocument]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGShowcaseDocumentLogInfoSerializer serialize:valueObj.showcaseDocument]];
    jsonDict[@".tag"] = @"showcase_document";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGAssetLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"file"]) {
    DBTEAMLOGFileLogInfo *file = [DBTEAMLOGFileLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFile:file];
  } else if ([tag isEqualToString:@"folder"]) {
    DBTEAMLOGFolderLogInfo *folder = [DBTEAMLOGFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithFolder:folder];
  } else if ([tag isEqualToString:@"paper_document"]) {
    DBTEAMLOGPaperDocumentLogInfo *paperDocument = [DBTEAMLOGPaperDocumentLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperDocument:paperDocument];
  } else if ([tag isEqualToString:@"paper_folder"]) {
    DBTEAMLOGPaperFolderLogInfo *paperFolder = [DBTEAMLOGPaperFolderLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithPaperFolder:paperFolder];
  } else if ([tag isEqualToString:@"showcase_document"]) {
    DBTEAMLOGShowcaseDocumentLogInfo *showcaseDocument =
        [DBTEAMLOGShowcaseDocumentLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGAssetLogInfo alloc] initWithShowcaseDocument:showcaseDocument];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGAssetLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBackupStatus.h"

#pragma mark - API Object

@implementation DBTEAMLOGBackupStatus

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGBackupStatusDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGBackupStatusEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGBackupStatusOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGBackupStatusDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGBackupStatusEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGBackupStatusOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGBackupStatusDisabled:
    return @"DBTEAMLOGBackupStatusDisabled";
  case DBTEAMLOGBackupStatusEnabled:
    return @"DBTEAMLOGBackupStatusEnabled";
  case DBTEAMLOGBackupStatusOther:
    return @"DBTEAMLOGBackupStatusOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBackupStatusSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBackupStatusSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBackupStatusSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGBackupStatusDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGBackupStatusEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGBackupStatusOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBackupStatus:other];
}

- (BOOL)isEqualToBackupStatus:(DBTEAMLOGBackupStatus *)aBackupStatus {
  if (self == aBackupStatus) {
    return YES;
  }
  if (self.tag != aBackupStatus.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGBackupStatusDisabled:
    return [[self tagName] isEqual:[aBackupStatus tagName]];
  case DBTEAMLOGBackupStatusEnabled:
    return [[self tagName] isEqual:[aBackupStatus tagName]];
  case DBTEAMLOGBackupStatusOther:
    return [[self tagName] isEqual:[aBackupStatus tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBackupStatusSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBackupStatus *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBackupStatus *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGBackupStatus alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGBackupStatus alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGBackupStatus alloc] initWithOther];
  } else {
    return [[DBTEAMLOGBackupStatus alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderAddPageDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderAddPageDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderAddPageDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderAddPageDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderAddPageDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderAddPageDetails:other];
}

- (BOOL)isEqualToBinderAddPageDetails:(DBTEAMLOGBinderAddPageDetails *)aBinderAddPageDetails {
  if (self == aBinderAddPageDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderAddPageDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderAddPageDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderAddPageDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderAddPageDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderAddPageDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderAddPageDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderAddPageDetails alloc] initWithEventUuid:eventUuid
                                                         docTitle:docTitle
                                                   binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderAddPageType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderAddPageType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderAddPageTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderAddPageTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderAddPageTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderAddPageType:other];
}

- (BOOL)isEqualToBinderAddPageType:(DBTEAMLOGBinderAddPageType *)aBinderAddPageType {
  if (self == aBinderAddPageType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderAddPageType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderAddPageTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderAddPageType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderAddPageType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderAddPageType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderAddSectionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderAddSectionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderAddSectionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderAddSectionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderAddSectionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderAddSectionDetails:other];
}

- (BOOL)isEqualToBinderAddSectionDetails:(DBTEAMLOGBinderAddSectionDetails *)aBinderAddSectionDetails {
  if (self == aBinderAddSectionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderAddSectionDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderAddSectionDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderAddSectionDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderAddSectionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderAddSectionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderAddSectionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderAddSectionDetails alloc] initWithEventUuid:eventUuid
                                                            docTitle:docTitle
                                                      binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderAddSectionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderAddSectionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderAddSectionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderAddSectionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderAddSectionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderAddSectionType:other];
}

- (BOOL)isEqualToBinderAddSectionType:(DBTEAMLOGBinderAddSectionType *)aBinderAddSectionType {
  if (self == aBinderAddSectionType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderAddSectionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderAddSectionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderAddSectionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderAddSectionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderAddSectionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRemovePageDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRemovePageDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRemovePageDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRemovePageDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRemovePageDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRemovePageDetails:other];
}

- (BOOL)isEqualToBinderRemovePageDetails:(DBTEAMLOGBinderRemovePageDetails *)aBinderRemovePageDetails {
  if (self == aBinderRemovePageDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderRemovePageDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderRemovePageDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderRemovePageDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRemovePageDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRemovePageDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRemovePageDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderRemovePageDetails alloc] initWithEventUuid:eventUuid
                                                            docTitle:docTitle
                                                      binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRemovePageType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRemovePageType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRemovePageTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRemovePageTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRemovePageTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRemovePageType:other];
}

- (BOOL)isEqualToBinderRemovePageType:(DBTEAMLOGBinderRemovePageType *)aBinderRemovePageType {
  if (self == aBinderRemovePageType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderRemovePageType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRemovePageTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRemovePageType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRemovePageType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderRemovePageType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRemoveSectionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRemoveSectionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRemoveSectionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRemoveSectionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRemoveSectionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRemoveSectionDetails:other];
}

- (BOOL)isEqualToBinderRemoveSectionDetails:(DBTEAMLOGBinderRemoveSectionDetails *)aBinderRemoveSectionDetails {
  if (self == aBinderRemoveSectionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderRemoveSectionDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderRemoveSectionDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderRemoveSectionDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRemoveSectionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRemoveSectionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRemoveSectionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderRemoveSectionDetails alloc] initWithEventUuid:eventUuid
                                                               docTitle:docTitle
                                                         binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRemoveSectionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRemoveSectionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRemoveSectionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRemoveSectionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRemoveSectionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRemoveSectionType:other];
}

- (BOOL)isEqualToBinderRemoveSectionType:(DBTEAMLOGBinderRemoveSectionType *)aBinderRemoveSectionType {
  if (self == aBinderRemoveSectionType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderRemoveSectionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRemoveSectionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRemoveSectionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRemoveSectionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderRemoveSectionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRenamePageDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRenamePageDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName
           previousBinderItemName:(NSString *)previousBinderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
    _previousBinderItemName = previousBinderItemName;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  return [self initWithEventUuid:eventUuid docTitle:docTitle binderItemName:binderItemName previousBinderItemName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRenamePageDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRenamePageDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRenamePageDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];
  if (self.previousBinderItemName != nil) {
    result = prime * result + [self.previousBinderItemName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRenamePageDetails:other];
}

- (BOOL)isEqualToBinderRenamePageDetails:(DBTEAMLOGBinderRenamePageDetails *)aBinderRenamePageDetails {
  if (self == aBinderRenamePageDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderRenamePageDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderRenamePageDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderRenamePageDetails.binderItemName]) {
    return NO;
  }
  if (self.previousBinderItemName) {
    if (![self.previousBinderItemName isEqual:aBinderRenamePageDetails.previousBinderItemName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRenamePageDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRenamePageDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;
  if (valueObj.previousBinderItemName) {
    jsonDict[@"previous_binder_item_name"] = valueObj.previousBinderItemName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRenamePageDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];
  NSString *previousBinderItemName = valueDict[@"previous_binder_item_name"] ?: nil;

  return [[DBTEAMLOGBinderRenamePageDetails alloc] initWithEventUuid:eventUuid
                                                            docTitle:docTitle
                                                      binderItemName:binderItemName
                                              previousBinderItemName:previousBinderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRenamePageType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRenamePageType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRenamePageTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRenamePageTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRenamePageTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRenamePageType:other];
}

- (BOOL)isEqualToBinderRenamePageType:(DBTEAMLOGBinderRenamePageType *)aBinderRenamePageType {
  if (self == aBinderRenamePageType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderRenamePageType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRenamePageTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRenamePageType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRenamePageType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderRenamePageType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRenameSectionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRenameSectionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName
           previousBinderItemName:(NSString *)previousBinderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
    _previousBinderItemName = previousBinderItemName;
  }
  return self;
}

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  return [self initWithEventUuid:eventUuid docTitle:docTitle binderItemName:binderItemName previousBinderItemName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRenameSectionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRenameSectionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRenameSectionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];
  if (self.previousBinderItemName != nil) {
    result = prime * result + [self.previousBinderItemName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRenameSectionDetails:other];
}

- (BOOL)isEqualToBinderRenameSectionDetails:(DBTEAMLOGBinderRenameSectionDetails *)aBinderRenameSectionDetails {
  if (self == aBinderRenameSectionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderRenameSectionDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderRenameSectionDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderRenameSectionDetails.binderItemName]) {
    return NO;
  }
  if (self.previousBinderItemName) {
    if (![self.previousBinderItemName isEqual:aBinderRenameSectionDetails.previousBinderItemName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRenameSectionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRenameSectionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;
  if (valueObj.previousBinderItemName) {
    jsonDict[@"previous_binder_item_name"] = valueObj.previousBinderItemName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRenameSectionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];
  NSString *previousBinderItemName = valueDict[@"previous_binder_item_name"] ?: nil;

  return [[DBTEAMLOGBinderRenameSectionDetails alloc] initWithEventUuid:eventUuid
                                                               docTitle:docTitle
                                                         binderItemName:binderItemName
                                                 previousBinderItemName:previousBinderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderRenameSectionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderRenameSectionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderRenameSectionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderRenameSectionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderRenameSectionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderRenameSectionType:other];
}

- (BOOL)isEqualToBinderRenameSectionType:(DBTEAMLOGBinderRenameSectionType *)aBinderRenameSectionType {
  if (self == aBinderRenameSectionType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderRenameSectionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderRenameSectionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderRenameSectionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderRenameSectionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderRenameSectionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderReorderPageDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderReorderPageDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderReorderPageDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderReorderPageDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderReorderPageDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderReorderPageDetails:other];
}

- (BOOL)isEqualToBinderReorderPageDetails:(DBTEAMLOGBinderReorderPageDetails *)aBinderReorderPageDetails {
  if (self == aBinderReorderPageDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderReorderPageDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderReorderPageDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderReorderPageDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderReorderPageDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderReorderPageDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderReorderPageDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderReorderPageDetails alloc] initWithEventUuid:eventUuid
                                                             docTitle:docTitle
                                                       binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderReorderPageType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderReorderPageType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderReorderPageTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderReorderPageTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderReorderPageTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderReorderPageType:other];
}

- (BOOL)isEqualToBinderReorderPageType:(DBTEAMLOGBinderReorderPageType *)aBinderReorderPageType {
  if (self == aBinderReorderPageType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderReorderPageType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderReorderPageTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderReorderPageType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderReorderPageType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderReorderPageType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderReorderSectionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderReorderSectionDetails

#pragma mark - Constructors

- (instancetype)initWithEventUuid:(NSString *)eventUuid
                         docTitle:(NSString *)docTitle
                   binderItemName:(NSString *)binderItemName {
  [DBStoneValidators nonnullValidator:nil](eventUuid);
  [DBStoneValidators nonnullValidator:nil](docTitle);
  [DBStoneValidators nonnullValidator:nil](binderItemName);

  self = [super init];
  if (self) {
    _eventUuid = eventUuid;
    _docTitle = docTitle;
    _binderItemName = binderItemName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderReorderSectionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderReorderSectionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderReorderSectionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.eventUuid hash];
  result = prime * result + [self.docTitle hash];
  result = prime * result + [self.binderItemName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderReorderSectionDetails:other];
}

- (BOOL)isEqualToBinderReorderSectionDetails:(DBTEAMLOGBinderReorderSectionDetails *)aBinderReorderSectionDetails {
  if (self == aBinderReorderSectionDetails) {
    return YES;
  }
  if (![self.eventUuid isEqual:aBinderReorderSectionDetails.eventUuid]) {
    return NO;
  }
  if (![self.docTitle isEqual:aBinderReorderSectionDetails.docTitle]) {
    return NO;
  }
  if (![self.binderItemName isEqual:aBinderReorderSectionDetails.binderItemName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderReorderSectionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderReorderSectionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"event_uuid"] = valueObj.eventUuid;
  jsonDict[@"doc_title"] = valueObj.docTitle;
  jsonDict[@"binder_item_name"] = valueObj.binderItemName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderReorderSectionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *eventUuid = valueDict[@"event_uuid"];
  NSString *docTitle = valueDict[@"doc_title"];
  NSString *binderItemName = valueDict[@"binder_item_name"];

  return [[DBTEAMLOGBinderReorderSectionDetails alloc] initWithEventUuid:eventUuid
                                                                docTitle:docTitle
                                                          binderItemName:binderItemName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBinderReorderSectionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGBinderReorderSectionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGBinderReorderSectionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGBinderReorderSectionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGBinderReorderSectionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToBinderReorderSectionType:other];
}

- (BOOL)isEqualToBinderReorderSectionType:(DBTEAMLOGBinderReorderSectionType *)aBinderReorderSectionType {
  if (self == aBinderReorderSectionType) {
    return YES;
  }
  if (![self.description_ isEqual:aBinderReorderSectionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGBinderReorderSectionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGBinderReorderSectionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGBinderReorderSectionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGBinderReorderSectionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCameraUploadsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGCameraUploadsPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCameraUploadsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCameraUploadsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCameraUploadsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGCameraUploadsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGCameraUploadsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGCameraUploadsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGCameraUploadsPolicyDisabled:
    return @"DBTEAMLOGCameraUploadsPolicyDisabled";
  case DBTEAMLOGCameraUploadsPolicyEnabled:
    return @"DBTEAMLOGCameraUploadsPolicyEnabled";
  case DBTEAMLOGCameraUploadsPolicyOther:
    return @"DBTEAMLOGCameraUploadsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCameraUploadsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCameraUploadsPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCameraUploadsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGCameraUploadsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGCameraUploadsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGCameraUploadsPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCameraUploadsPolicy:other];
}

- (BOOL)isEqualToCameraUploadsPolicy:(DBTEAMLOGCameraUploadsPolicy *)aCameraUploadsPolicy {
  if (self == aCameraUploadsPolicy) {
    return YES;
  }
  if (self.tag != aCameraUploadsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGCameraUploadsPolicyDisabled:
    return [[self tagName] isEqual:[aCameraUploadsPolicy tagName]];
  case DBTEAMLOGCameraUploadsPolicyEnabled:
    return [[self tagName] isEqual:[aCameraUploadsPolicy tagName]];
  case DBTEAMLOGCameraUploadsPolicyOther:
    return [[self tagName] isEqual:[aCameraUploadsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCameraUploadsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCameraUploadsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCameraUploadsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGCameraUploadsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGCameraUploadsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGCameraUploadsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGCameraUploadsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCameraUploadsPolicy.h"
#import "DBTEAMLOGCameraUploadsPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCameraUploadsPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGCameraUploadsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGCameraUploadsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCameraUploadsPolicyChangedDetails:other];
}

- (BOOL)isEqualToCameraUploadsPolicyChangedDetails:
    (DBTEAMLOGCameraUploadsPolicyChangedDetails *)aCameraUploadsPolicyChangedDetails {
  if (self == aCameraUploadsPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aCameraUploadsPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aCameraUploadsPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCameraUploadsPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGCameraUploadsPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGCameraUploadsPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCameraUploadsPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGCameraUploadsPolicy *dNewValue =
      [DBTEAMLOGCameraUploadsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGCameraUploadsPolicy *previousValue =
      [DBTEAMLOGCameraUploadsPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGCameraUploadsPolicyChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCameraUploadsPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCameraUploadsPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCameraUploadsPolicyChangedType:other];
}

- (BOOL)isEqualToCameraUploadsPolicyChangedType:
    (DBTEAMLOGCameraUploadsPolicyChangedType *)aCameraUploadsPolicyChangedType {
  if (self == aCameraUploadsPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aCameraUploadsPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCameraUploadsPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCameraUploadsPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCameraUploadsPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCameraUploadsPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCaptureTranscriptPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGCaptureTranscriptPolicy

#pragma mark - Constructors

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCaptureTranscriptPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCaptureTranscriptPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCaptureTranscriptPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGCaptureTranscriptPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGCaptureTranscriptPolicyDefault_;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGCaptureTranscriptPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGCaptureTranscriptPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGCaptureTranscriptPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGCaptureTranscriptPolicyDefault_:
    return @"DBTEAMLOGCaptureTranscriptPolicyDefault_";
  case DBTEAMLOGCaptureTranscriptPolicyDisabled:
    return @"DBTEAMLOGCaptureTranscriptPolicyDisabled";
  case DBTEAMLOGCaptureTranscriptPolicyEnabled:
    return @"DBTEAMLOGCaptureTranscriptPolicyEnabled";
  case DBTEAMLOGCaptureTranscriptPolicyOther:
    return @"DBTEAMLOGCaptureTranscriptPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCaptureTranscriptPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCaptureTranscriptPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCaptureTranscriptPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGCaptureTranscriptPolicyDefault_:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGCaptureTranscriptPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGCaptureTranscriptPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGCaptureTranscriptPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCaptureTranscriptPolicy:other];
}

- (BOOL)isEqualToCaptureTranscriptPolicy:(DBTEAMLOGCaptureTranscriptPolicy *)aCaptureTranscriptPolicy {
  if (self == aCaptureTranscriptPolicy) {
    return YES;
  }
  if (self.tag != aCaptureTranscriptPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGCaptureTranscriptPolicyDefault_:
    return [[self tagName] isEqual:[aCaptureTranscriptPolicy tagName]];
  case DBTEAMLOGCaptureTranscriptPolicyDisabled:
    return [[self tagName] isEqual:[aCaptureTranscriptPolicy tagName]];
  case DBTEAMLOGCaptureTranscriptPolicyEnabled:
    return [[self tagName] isEqual:[aCaptureTranscriptPolicy tagName]];
  case DBTEAMLOGCaptureTranscriptPolicyOther:
    return [[self tagName] isEqual:[aCaptureTranscriptPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCaptureTranscriptPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCaptureTranscriptPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCaptureTranscriptPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGCaptureTranscriptPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGCaptureTranscriptPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGCaptureTranscriptPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGCaptureTranscriptPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGCaptureTranscriptPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCaptureTranscriptPolicy.h"
#import "DBTEAMLOGCaptureTranscriptPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCaptureTranscriptPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGCaptureTranscriptPolicy *)dNewValue
                    previousValue:(DBTEAMLOGCaptureTranscriptPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCaptureTranscriptPolicyChangedDetails:other];
}

- (BOOL)isEqualToCaptureTranscriptPolicyChangedDetails:
    (DBTEAMLOGCaptureTranscriptPolicyChangedDetails *)aCaptureTranscriptPolicyChangedDetails {
  if (self == aCaptureTranscriptPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aCaptureTranscriptPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aCaptureTranscriptPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCaptureTranscriptPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGCaptureTranscriptPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGCaptureTranscriptPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCaptureTranscriptPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGCaptureTranscriptPolicy *dNewValue =
      [DBTEAMLOGCaptureTranscriptPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGCaptureTranscriptPolicy *previousValue =
      [DBTEAMLOGCaptureTranscriptPolicySerializer deserialize:valueDict[@"previous_value"]];

  return
      [[DBTEAMLOGCaptureTranscriptPolicyChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCaptureTranscriptPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCaptureTranscriptPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCaptureTranscriptPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCaptureTranscriptPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCaptureTranscriptPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCaptureTranscriptPolicyChangedType:other];
}

- (BOOL)isEqualToCaptureTranscriptPolicyChangedType:
    (DBTEAMLOGCaptureTranscriptPolicyChangedType *)aCaptureTranscriptPolicyChangedType {
  if (self == aCaptureTranscriptPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aCaptureTranscriptPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCaptureTranscriptPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCaptureTranscriptPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCaptureTranscriptPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCaptureTranscriptPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCertificate.h"

#pragma mark - API Object

@implementation DBTEAMLOGCertificate

#pragma mark - Constructors

- (instancetype)initWithSubject:(NSString *)subject
                         issuer:(NSString *)issuer
                      issueDate:(NSString *)issueDate
                 expirationDate:(NSString *)expirationDate
                   serialNumber:(NSString *)serialNumber
                sha1Fingerprint:(NSString *)sha1Fingerprint
                     commonName:(NSString *)commonName {
  [DBStoneValidators nonnullValidator:nil](subject);
  [DBStoneValidators nonnullValidator:nil](issuer);
  [DBStoneValidators nonnullValidator:nil](issueDate);
  [DBStoneValidators nonnullValidator:nil](expirationDate);
  [DBStoneValidators nonnullValidator:nil](serialNumber);
  [DBStoneValidators nonnullValidator:nil](sha1Fingerprint);

  self = [super init];
  if (self) {
    _subject = subject;
    _issuer = issuer;
    _issueDate = issueDate;
    _expirationDate = expirationDate;
    _serialNumber = serialNumber;
    _sha1Fingerprint = sha1Fingerprint;
    _commonName = commonName;
  }
  return self;
}

- (instancetype)initWithSubject:(NSString *)subject
                         issuer:(NSString *)issuer
                      issueDate:(NSString *)issueDate
                 expirationDate:(NSString *)expirationDate
                   serialNumber:(NSString *)serialNumber
                sha1Fingerprint:(NSString *)sha1Fingerprint {
  return [self initWithSubject:subject
                        issuer:issuer
                     issueDate:issueDate
                expirationDate:expirationDate
                  serialNumber:serialNumber
               sha1Fingerprint:sha1Fingerprint
                    commonName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCertificateSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCertificateSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCertificateSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.subject hash];
  result = prime * result + [self.issuer hash];
  result = prime * result + [self.issueDate hash];
  result = prime * result + [self.expirationDate hash];
  result = prime * result + [self.serialNumber hash];
  result = prime * result + [self.sha1Fingerprint hash];
  if (self.commonName != nil) {
    result = prime * result + [self.commonName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCertificate:other];
}

- (BOOL)isEqualToCertificate:(DBTEAMLOGCertificate *)aCertificate {
  if (self == aCertificate) {
    return YES;
  }
  if (![self.subject isEqual:aCertificate.subject]) {
    return NO;
  }
  if (![self.issuer isEqual:aCertificate.issuer]) {
    return NO;
  }
  if (![self.issueDate isEqual:aCertificate.issueDate]) {
    return NO;
  }
  if (![self.expirationDate isEqual:aCertificate.expirationDate]) {
    return NO;
  }
  if (![self.serialNumber isEqual:aCertificate.serialNumber]) {
    return NO;
  }
  if (![self.sha1Fingerprint isEqual:aCertificate.sha1Fingerprint]) {
    return NO;
  }
  if (self.commonName) {
    if (![self.commonName isEqual:aCertificate.commonName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCertificateSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCertificate *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"subject"] = valueObj.subject;
  jsonDict[@"issuer"] = valueObj.issuer;
  jsonDict[@"issue_date"] = valueObj.issueDate;
  jsonDict[@"expiration_date"] = valueObj.expirationDate;
  jsonDict[@"serial_number"] = valueObj.serialNumber;
  jsonDict[@"sha1_fingerprint"] = valueObj.sha1Fingerprint;
  if (valueObj.commonName) {
    jsonDict[@"common_name"] = valueObj.commonName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCertificate *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *subject = valueDict[@"subject"];
  NSString *issuer = valueDict[@"issuer"];
  NSString *issueDate = valueDict[@"issue_date"];
  NSString *expirationDate = valueDict[@"expiration_date"];
  NSString *serialNumber = valueDict[@"serial_number"];
  NSString *sha1Fingerprint = valueDict[@"sha1_fingerprint"];
  NSString *commonName = valueDict[@"common_name"] ?: nil;

  return [[DBTEAMLOGCertificate alloc] initWithSubject:subject
                                                issuer:issuer
                                             issueDate:issueDate
                                        expirationDate:expirationDate
                                          serialNumber:serialNumber
                                       sha1Fingerprint:sha1Fingerprint
                                            commonName:commonName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGChangeLinkExpirationPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGChangeLinkExpirationPolicy

#pragma mark - Constructors

- (instancetype)initWithAllowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGChangeLinkExpirationPolicyAllowed;
  }
  return self;
}

- (instancetype)initWithNotAllowed {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGChangeLinkExpirationPolicyNotAllowed;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGChangeLinkExpirationPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllowed {
  return _tag == DBTEAMLOGChangeLinkExpirationPolicyAllowed;
}

- (BOOL)isNotAllowed {
  return _tag == DBTEAMLOGChangeLinkExpirationPolicyNotAllowed;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGChangeLinkExpirationPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGChangeLinkExpirationPolicyAllowed:
    return @"DBTEAMLOGChangeLinkExpirationPolicyAllowed";
  case DBTEAMLOGChangeLinkExpirationPolicyNotAllowed:
    return @"DBTEAMLOGChangeLinkExpirationPolicyNotAllowed";
  case DBTEAMLOGChangeLinkExpirationPolicyOther:
    return @"DBTEAMLOGChangeLinkExpirationPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGChangeLinkExpirationPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGChangeLinkExpirationPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGChangeLinkExpirationPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGChangeLinkExpirationPolicyAllowed:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGChangeLinkExpirationPolicyNotAllowed:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGChangeLinkExpirationPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToChangeLinkExpirationPolicy:other];
}

- (BOOL)isEqualToChangeLinkExpirationPolicy:(DBTEAMLOGChangeLinkExpirationPolicy *)aChangeLinkExpirationPolicy {
  if (self == aChangeLinkExpirationPolicy) {
    return YES;
  }
  if (self.tag != aChangeLinkExpirationPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGChangeLinkExpirationPolicyAllowed:
    return [[self tagName] isEqual:[aChangeLinkExpirationPolicy tagName]];
  case DBTEAMLOGChangeLinkExpirationPolicyNotAllowed:
    return [[self tagName] isEqual:[aChangeLinkExpirationPolicy tagName]];
  case DBTEAMLOGChangeLinkExpirationPolicyOther:
    return [[self tagName] isEqual:[aChangeLinkExpirationPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGChangeLinkExpirationPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGChangeLinkExpirationPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllowed]) {
    jsonDict[@".tag"] = @"allowed";
  } else if ([valueObj isNotAllowed]) {
    jsonDict[@".tag"] = @"not_allowed";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGChangeLinkExpirationPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"allowed"]) {
    return [[DBTEAMLOGChangeLinkExpirationPolicy alloc] initWithAllowed];
  } else if ([tag isEqualToString:@"not_allowed"]) {
    return [[DBTEAMLOGChangeLinkExpirationPolicy alloc] initWithNotAllowed];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGChangeLinkExpirationPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGChangeLinkExpirationPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGChangedEnterpriseAdminRoleDetails.h"
#import "DBTEAMLOGFedAdminRole.h"

#pragma mark - API Object

@implementation DBTEAMLOGChangedEnterpriseAdminRoleDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGFedAdminRole *)previousValue
                            dNewValue:(DBTEAMLOGFedAdminRole *)dNewValue
                             teamName:(NSString *)teamName {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](teamName);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
    _teamName = teamName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.teamName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToChangedEnterpriseAdminRoleDetails:other];
}

- (BOOL)isEqualToChangedEnterpriseAdminRoleDetails:
    (DBTEAMLOGChangedEnterpriseAdminRoleDetails *)aChangedEnterpriseAdminRoleDetails {
  if (self == aChangedEnterpriseAdminRoleDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aChangedEnterpriseAdminRoleDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aChangedEnterpriseAdminRoleDetails.dNewValue]) {
    return NO;
  }
  if (![self.teamName isEqual:aChangedEnterpriseAdminRoleDetails.teamName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGChangedEnterpriseAdminRoleDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGFedAdminRoleSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGFedAdminRoleSerializer serialize:valueObj.dNewValue];
  jsonDict[@"team_name"] = valueObj.teamName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGChangedEnterpriseAdminRoleDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFedAdminRole *previousValue = [DBTEAMLOGFedAdminRoleSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGFedAdminRole *dNewValue = [DBTEAMLOGFedAdminRoleSerializer deserialize:valueDict[@"new_value"]];
  NSString *teamName = valueDict[@"team_name"];

  return [[DBTEAMLOGChangedEnterpriseAdminRoleDetails alloc] initWithPreviousValue:previousValue
                                                                         dNewValue:dNewValue
                                                                          teamName:teamName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGChangedEnterpriseAdminRoleType.h"

#pragma mark - API Object

@implementation DBTEAMLOGChangedEnterpriseAdminRoleType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGChangedEnterpriseAdminRoleTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGChangedEnterpriseAdminRoleTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGChangedEnterpriseAdminRoleTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToChangedEnterpriseAdminRoleType:other];
}

- (BOOL)isEqualToChangedEnterpriseAdminRoleType:
    (DBTEAMLOGChangedEnterpriseAdminRoleType *)aChangedEnterpriseAdminRoleType {
  if (self == aChangedEnterpriseAdminRoleType) {
    return YES;
  }
  if (![self.description_ isEqual:aChangedEnterpriseAdminRoleType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGChangedEnterpriseAdminRoleTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGChangedEnterpriseAdminRoleType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGChangedEnterpriseAdminRoleType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGChangedEnterpriseAdminRoleType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails.h"
#import "DBTEAMLOGFedHandshakeAction.h"
#import "DBTEAMLOGFederationStatusChangeAdditionalInfo.h"
#import "DBTEAMLOGTrustedTeamsRequestState.h"

#pragma mark - API Object

@implementation DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails

#pragma mark - Constructors

- (instancetype)initWithAction:(DBTEAMLOGFedHandshakeAction *)action
                additionalInfo:(DBTEAMLOGFederationStatusChangeAdditionalInfo *)additionalInfo
                 previousValue:(DBTEAMLOGTrustedTeamsRequestState *)previousValue
                     dNewValue:(DBTEAMLOGTrustedTeamsRequestState *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](action);
  [DBStoneValidators nonnullValidator:nil](additionalInfo);
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _action = action;
    _additionalInfo = additionalInfo;
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.action hash];
  result = prime * result + [self.additionalInfo hash];
  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToChangedEnterpriseConnectedTeamStatusDetails:other];
}

- (BOOL)isEqualToChangedEnterpriseConnectedTeamStatusDetails:
    (DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *)aChangedEnterpriseConnectedTeamStatusDetails {
  if (self == aChangedEnterpriseConnectedTeamStatusDetails) {
    return YES;
  }
  if (![self.action isEqual:aChangedEnterpriseConnectedTeamStatusDetails.action]) {
    return NO;
  }
  if (![self.additionalInfo isEqual:aChangedEnterpriseConnectedTeamStatusDetails.additionalInfo]) {
    return NO;
  }
  if (![self.previousValue isEqual:aChangedEnterpriseConnectedTeamStatusDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aChangedEnterpriseConnectedTeamStatusDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"action"] = [DBTEAMLOGFedHandshakeActionSerializer serialize:valueObj.action];
  jsonDict[@"additional_info"] =
      [DBTEAMLOGFederationStatusChangeAdditionalInfoSerializer serialize:valueObj.additionalInfo];
  jsonDict[@"previous_value"] = [DBTEAMLOGTrustedTeamsRequestStateSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGTrustedTeamsRequestStateSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFedHandshakeAction *action = [DBTEAMLOGFedHandshakeActionSerializer deserialize:valueDict[@"action"]];
  DBTEAMLOGFederationStatusChangeAdditionalInfo *additionalInfo =
      [DBTEAMLOGFederationStatusChangeAdditionalInfoSerializer deserialize:valueDict[@"additional_info"]];
  DBTEAMLOGTrustedTeamsRequestState *previousValue =
      [DBTEAMLOGTrustedTeamsRequestStateSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGTrustedTeamsRequestState *dNewValue =
      [DBTEAMLOGTrustedTeamsRequestStateSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails alloc] initWithAction:action
                                                                       additionalInfo:additionalInfo
                                                                        previousValue:previousValue
                                                                            dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGChangedEnterpriseConnectedTeamStatusType.h"

#pragma mark - API Object

@implementation DBTEAMLOGChangedEnterpriseConnectedTeamStatusType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToChangedEnterpriseConnectedTeamStatusType:other];
}

- (BOOL)isEqualToChangedEnterpriseConnectedTeamStatusType:
    (DBTEAMLOGChangedEnterpriseConnectedTeamStatusType *)aChangedEnterpriseConnectedTeamStatusType {
  if (self == aChangedEnterpriseConnectedTeamStatusType) {
    return YES;
  }
  if (![self.description_ isEqual:aChangedEnterpriseConnectedTeamStatusType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGChangedEnterpriseConnectedTeamStatusTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGChangedEnterpriseConnectedTeamStatusType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGChangedEnterpriseConnectedTeamStatusType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGChangedEnterpriseConnectedTeamStatusType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationChangePolicyDetails.h"
#import "DBTEAMLOGClassificationPolicyEnumWrapper.h"
#import "DBTEAMLOGClassificationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGClassificationPolicyEnumWrapper *)previousValue
                            dNewValue:(DBTEAMLOGClassificationPolicyEnumWrapper *)dNewValue
                   classificationType:(DBTEAMLOGClassificationType *)classificationType {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](classificationType);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
    _classificationType = classificationType;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.classificationType hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationChangePolicyDetails:other];
}

- (BOOL)isEqualToClassificationChangePolicyDetails:
    (DBTEAMLOGClassificationChangePolicyDetails *)aClassificationChangePolicyDetails {
  if (self == aClassificationChangePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aClassificationChangePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aClassificationChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (![self.classificationType isEqual:aClassificationChangePolicyDetails.classificationType]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGClassificationPolicyEnumWrapperSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGClassificationPolicyEnumWrapperSerializer serialize:valueObj.dNewValue];
  jsonDict[@"classification_type"] = [DBTEAMLOGClassificationTypeSerializer serialize:valueObj.classificationType];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGClassificationPolicyEnumWrapper *previousValue =
      [DBTEAMLOGClassificationPolicyEnumWrapperSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGClassificationPolicyEnumWrapper *dNewValue =
      [DBTEAMLOGClassificationPolicyEnumWrapperSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGClassificationType *classificationType =
      [DBTEAMLOGClassificationTypeSerializer deserialize:valueDict[@"classification_type"]];

  return [[DBTEAMLOGClassificationChangePolicyDetails alloc] initWithPreviousValue:previousValue
                                                                         dNewValue:dNewValue
                                                                classificationType:classificationType];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationChangePolicyType:other];
}

- (BOOL)isEqualToClassificationChangePolicyType:
    (DBTEAMLOGClassificationChangePolicyType *)aClassificationChangePolicyType {
  if (self == aClassificationChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aClassificationChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGClassificationChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationCreateReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationCreateReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationCreateReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationCreateReportDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationCreateReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationCreateReportDetails:other];
}

- (BOOL)isEqualToClassificationCreateReportDetails:
    (DBTEAMLOGClassificationCreateReportDetails *)aClassificationCreateReportDetails {
  if (self == aClassificationCreateReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationCreateReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationCreateReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationCreateReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGClassificationCreateReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationCreateReportFailDetails.h"
#import "DBTEAMTeamReportFailureReason.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationCreateReportFailDetails

#pragma mark - Constructors

- (instancetype)initWithFailureReason:(DBTEAMTeamReportFailureReason *)failureReason {
  [DBStoneValidators nonnullValidator:nil](failureReason);

  self = [super init];
  if (self) {
    _failureReason = failureReason;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationCreateReportFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationCreateReportFailDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationCreateReportFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.failureReason hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationCreateReportFailDetails:other];
}

- (BOOL)isEqualToClassificationCreateReportFailDetails:
    (DBTEAMLOGClassificationCreateReportFailDetails *)aClassificationCreateReportFailDetails {
  if (self == aClassificationCreateReportFailDetails) {
    return YES;
  }
  if (![self.failureReason isEqual:aClassificationCreateReportFailDetails.failureReason]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationCreateReportFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationCreateReportFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"failure_reason"] = [DBTEAMTeamReportFailureReasonSerializer serialize:valueObj.failureReason];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationCreateReportFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMTeamReportFailureReason *failureReason =
      [DBTEAMTeamReportFailureReasonSerializer deserialize:valueDict[@"failure_reason"]];

  return [[DBTEAMLOGClassificationCreateReportFailDetails alloc] initWithFailureReason:failureReason];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationCreateReportFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationCreateReportFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationCreateReportFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationCreateReportFailTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationCreateReportFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationCreateReportFailType:other];
}

- (BOOL)isEqualToClassificationCreateReportFailType:
    (DBTEAMLOGClassificationCreateReportFailType *)aClassificationCreateReportFailType {
  if (self == aClassificationCreateReportFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aClassificationCreateReportFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationCreateReportFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationCreateReportFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationCreateReportFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGClassificationCreateReportFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationCreateReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationCreateReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationCreateReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationCreateReportTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationCreateReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationCreateReportType:other];
}

- (BOOL)isEqualToClassificationCreateReportType:
    (DBTEAMLOGClassificationCreateReportType *)aClassificationCreateReportType {
  if (self == aClassificationCreateReportType) {
    return YES;
  }
  if (![self.description_ isEqual:aClassificationCreateReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationCreateReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationCreateReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationCreateReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGClassificationCreateReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationPolicyEnumWrapper.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationPolicyEnumWrapper

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationPolicyEnumWrapperDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationPolicyEnumWrapperEnabled;
  }
  return self;
}

- (instancetype)initWithMemberAndTeamFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders;
  }
  return self;
}

- (instancetype)initWithTeamFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationPolicyEnumWrapperOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGClassificationPolicyEnumWrapperDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGClassificationPolicyEnumWrapperEnabled;
}

- (BOOL)isMemberAndTeamFolders {
  return _tag == DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders;
}

- (BOOL)isTeamFolders {
  return _tag == DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGClassificationPolicyEnumWrapperOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGClassificationPolicyEnumWrapperDisabled:
    return @"DBTEAMLOGClassificationPolicyEnumWrapperDisabled";
  case DBTEAMLOGClassificationPolicyEnumWrapperEnabled:
    return @"DBTEAMLOGClassificationPolicyEnumWrapperEnabled";
  case DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders:
    return @"DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders";
  case DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders:
    return @"DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders";
  case DBTEAMLOGClassificationPolicyEnumWrapperOther:
    return @"DBTEAMLOGClassificationPolicyEnumWrapperOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationPolicyEnumWrapperSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationPolicyEnumWrapperSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationPolicyEnumWrapperSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGClassificationPolicyEnumWrapperDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationPolicyEnumWrapperEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationPolicyEnumWrapperOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationPolicyEnumWrapper:other];
}

- (BOOL)isEqualToClassificationPolicyEnumWrapper:
    (DBTEAMLOGClassificationPolicyEnumWrapper *)aClassificationPolicyEnumWrapper {
  if (self == aClassificationPolicyEnumWrapper) {
    return YES;
  }
  if (self.tag != aClassificationPolicyEnumWrapper.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGClassificationPolicyEnumWrapperDisabled:
    return [[self tagName] isEqual:[aClassificationPolicyEnumWrapper tagName]];
  case DBTEAMLOGClassificationPolicyEnumWrapperEnabled:
    return [[self tagName] isEqual:[aClassificationPolicyEnumWrapper tagName]];
  case DBTEAMLOGClassificationPolicyEnumWrapperMemberAndTeamFolders:
    return [[self tagName] isEqual:[aClassificationPolicyEnumWrapper tagName]];
  case DBTEAMLOGClassificationPolicyEnumWrapperTeamFolders:
    return [[self tagName] isEqual:[aClassificationPolicyEnumWrapper tagName]];
  case DBTEAMLOGClassificationPolicyEnumWrapperOther:
    return [[self tagName] isEqual:[aClassificationPolicyEnumWrapper tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationPolicyEnumWrapperSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationPolicyEnumWrapper *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isMemberAndTeamFolders]) {
    jsonDict[@".tag"] = @"member_and_team_folders";
  } else if ([valueObj isTeamFolders]) {
    jsonDict[@".tag"] = @"team_folders";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationPolicyEnumWrapper *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"member_and_team_folders"]) {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithMemberAndTeamFolders];
  } else if ([tag isEqualToString:@"team_folders"]) {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithTeamFolders];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithOther];
  } else {
    return [[DBTEAMLOGClassificationPolicyEnumWrapper alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGClassificationType.h"

#pragma mark - API Object

@implementation DBTEAMLOGClassificationType

#pragma mark - Constructors

- (instancetype)initWithPersonalInformation {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationTypePersonalInformation;
  }
  return self;
}

- (instancetype)initWithPii {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationTypePii;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGClassificationTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isPersonalInformation {
  return _tag == DBTEAMLOGClassificationTypePersonalInformation;
}

- (BOOL)isPii {
  return _tag == DBTEAMLOGClassificationTypePii;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGClassificationTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGClassificationTypePersonalInformation:
    return @"DBTEAMLOGClassificationTypePersonalInformation";
  case DBTEAMLOGClassificationTypePii:
    return @"DBTEAMLOGClassificationTypePii";
  case DBTEAMLOGClassificationTypeOther:
    return @"DBTEAMLOGClassificationTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGClassificationTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGClassificationTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGClassificationTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGClassificationTypePersonalInformation:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationTypePii:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGClassificationTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToClassificationType:other];
}

- (BOOL)isEqualToClassificationType:(DBTEAMLOGClassificationType *)aClassificationType {
  if (self == aClassificationType) {
    return YES;
  }
  if (self.tag != aClassificationType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGClassificationTypePersonalInformation:
    return [[self tagName] isEqual:[aClassificationType tagName]];
  case DBTEAMLOGClassificationTypePii:
    return [[self tagName] isEqual:[aClassificationType tagName]];
  case DBTEAMLOGClassificationTypeOther:
    return [[self tagName] isEqual:[aClassificationType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGClassificationTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGClassificationType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isPersonalInformation]) {
    jsonDict[@".tag"] = @"personal_information";
  } else if ([valueObj isPii]) {
    jsonDict[@".tag"] = @"pii";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGClassificationType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"personal_information"]) {
    return [[DBTEAMLOGClassificationType alloc] initWithPersonalInformation];
  } else if ([tag isEqualToString:@"pii"]) {
    return [[DBTEAMLOGClassificationType alloc] initWithPii];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGClassificationType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGClassificationType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCollectionShareDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCollectionShareDetails

#pragma mark - Constructors

- (instancetype)initWithAlbumName:(NSString *)albumName {
  [DBStoneValidators nonnullValidator:nil](albumName);

  self = [super init];
  if (self) {
    _albumName = albumName;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCollectionShareDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCollectionShareDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCollectionShareDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.albumName hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCollectionShareDetails:other];
}

- (BOOL)isEqualToCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)aCollectionShareDetails {
  if (self == aCollectionShareDetails) {
    return YES;
  }
  if (![self.albumName isEqual:aCollectionShareDetails.albumName]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCollectionShareDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCollectionShareDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"album_name"] = valueObj.albumName;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCollectionShareDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *albumName = valueDict[@"album_name"];

  return [[DBTEAMLOGCollectionShareDetails alloc] initWithAlbumName:albumName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCollectionShareType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCollectionShareType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCollectionShareTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCollectionShareTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCollectionShareTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCollectionShareType:other];
}

- (BOOL)isEqualToCollectionShareType:(DBTEAMLOGCollectionShareType *)aCollectionShareType {
  if (self == aCollectionShareType) {
    return YES;
  }
  if (![self.description_ isEqual:aCollectionShareType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCollectionShareTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCollectionShareType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCollectionShareType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCollectionShareType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGComputerBackupPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGComputerBackupPolicy

#pragma mark - Constructors

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGComputerBackupPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGComputerBackupPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGComputerBackupPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGComputerBackupPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGComputerBackupPolicyDefault_;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGComputerBackupPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGComputerBackupPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGComputerBackupPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGComputerBackupPolicyDefault_:
    return @"DBTEAMLOGComputerBackupPolicyDefault_";
  case DBTEAMLOGComputerBackupPolicyDisabled:
    return @"DBTEAMLOGComputerBackupPolicyDisabled";
  case DBTEAMLOGComputerBackupPolicyEnabled:
    return @"DBTEAMLOGComputerBackupPolicyEnabled";
  case DBTEAMLOGComputerBackupPolicyOther:
    return @"DBTEAMLOGComputerBackupPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGComputerBackupPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGComputerBackupPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGComputerBackupPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGComputerBackupPolicyDefault_:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGComputerBackupPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGComputerBackupPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGComputerBackupPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToComputerBackupPolicy:other];
}

- (BOOL)isEqualToComputerBackupPolicy:(DBTEAMLOGComputerBackupPolicy *)aComputerBackupPolicy {
  if (self == aComputerBackupPolicy) {
    return YES;
  }
  if (self.tag != aComputerBackupPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGComputerBackupPolicyDefault_:
    return [[self tagName] isEqual:[aComputerBackupPolicy tagName]];
  case DBTEAMLOGComputerBackupPolicyDisabled:
    return [[self tagName] isEqual:[aComputerBackupPolicy tagName]];
  case DBTEAMLOGComputerBackupPolicyEnabled:
    return [[self tagName] isEqual:[aComputerBackupPolicy tagName]];
  case DBTEAMLOGComputerBackupPolicyOther:
    return [[self tagName] isEqual:[aComputerBackupPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGComputerBackupPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGComputerBackupPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGComputerBackupPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGComputerBackupPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGComputerBackupPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGComputerBackupPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGComputerBackupPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGComputerBackupPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGComputerBackupPolicy.h"
#import "DBTEAMLOGComputerBackupPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGComputerBackupPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGComputerBackupPolicy *)dNewValue
                    previousValue:(DBTEAMLOGComputerBackupPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToComputerBackupPolicyChangedDetails:other];
}

- (BOOL)isEqualToComputerBackupPolicyChangedDetails:
    (DBTEAMLOGComputerBackupPolicyChangedDetails *)aComputerBackupPolicyChangedDetails {
  if (self == aComputerBackupPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aComputerBackupPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aComputerBackupPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGComputerBackupPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGComputerBackupPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGComputerBackupPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGComputerBackupPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGComputerBackupPolicy *dNewValue =
      [DBTEAMLOGComputerBackupPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGComputerBackupPolicy *previousValue =
      [DBTEAMLOGComputerBackupPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGComputerBackupPolicyChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGComputerBackupPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGComputerBackupPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGComputerBackupPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGComputerBackupPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGComputerBackupPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToComputerBackupPolicyChangedType:other];
}

- (BOOL)isEqualToComputerBackupPolicyChangedType:
    (DBTEAMLOGComputerBackupPolicyChangedType *)aComputerBackupPolicyChangedType {
  if (self == aComputerBackupPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aComputerBackupPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGComputerBackupPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGComputerBackupPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGComputerBackupPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGComputerBackupPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGConnectedTeamName.h"

#pragma mark - API Object

@implementation DBTEAMLOGConnectedTeamName

#pragma mark - Constructors

- (instancetype)initWithTeam:(NSString *)team {
  [DBStoneValidators nonnullValidator:nil](team);

  self = [super init];
  if (self) {
    _team = team;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGConnectedTeamNameSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGConnectedTeamNameSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGConnectedTeamNameSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.team hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToConnectedTeamName:other];
}

- (BOOL)isEqualToConnectedTeamName:(DBTEAMLOGConnectedTeamName *)aConnectedTeamName {
  if (self == aConnectedTeamName) {
    return YES;
  }
  if (![self.team isEqual:aConnectedTeamName.team]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGConnectedTeamNameSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGConnectedTeamName *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team"] = valueObj.team;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGConnectedTeamName *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *team = valueDict[@"team"];

  return [[DBTEAMLOGConnectedTeamName alloc] initWithTeam:team];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContentAdministrationPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGContentAdministrationPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(NSString *)dNewValue previousValue:(NSString *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContentAdministrationPolicyChangedDetails:other];
}

- (BOOL)isEqualToContentAdministrationPolicyChangedDetails:
    (DBTEAMLOGContentAdministrationPolicyChangedDetails *)aContentAdministrationPolicyChangedDetails {
  if (self == aContentAdministrationPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aContentAdministrationPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aContentAdministrationPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContentAdministrationPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = valueObj.dNewValue;
  jsonDict[@"previous_value"] = valueObj.previousValue;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContentAdministrationPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *dNewValue = valueDict[@"new_value"];
  NSString *previousValue = valueDict[@"previous_value"];

  return [[DBTEAMLOGContentAdministrationPolicyChangedDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContentAdministrationPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGContentAdministrationPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContentAdministrationPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContentAdministrationPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGContentAdministrationPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContentAdministrationPolicyChangedType:other];
}

- (BOOL)isEqualToContentAdministrationPolicyChangedType:
    (DBTEAMLOGContentAdministrationPolicyChangedType *)aContentAdministrationPolicyChangedType {
  if (self == aContentAdministrationPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aContentAdministrationPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContentAdministrationPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContentAdministrationPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContentAdministrationPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGContentAdministrationPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContentPermanentDeletePolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGContentPermanentDeletePolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContentPermanentDeletePolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGContentPermanentDeletePolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    return @"DBTEAMLOGContentPermanentDeletePolicyDisabled";
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    return @"DBTEAMLOGContentPermanentDeletePolicyEnabled";
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    return @"DBTEAMLOGContentPermanentDeletePolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContentPermanentDeletePolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContentPermanentDeletePolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGContentPermanentDeletePolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContentPermanentDeletePolicy:other];
}

- (BOOL)isEqualToContentPermanentDeletePolicy:(DBTEAMLOGContentPermanentDeletePolicy *)aContentPermanentDeletePolicy {
  if (self == aContentPermanentDeletePolicy) {
    return YES;
  }
  if (self.tag != aContentPermanentDeletePolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGContentPermanentDeletePolicyDisabled:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  case DBTEAMLOGContentPermanentDeletePolicyEnabled:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  case DBTEAMLOGContentPermanentDeletePolicyOther:
    return [[self tagName] isEqual:[aContentPermanentDeletePolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContentPermanentDeletePolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContentPermanentDeletePolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContentPermanentDeletePolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGContentPermanentDeletePolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGContextLogInfo.h"
#import "DBTEAMLOGNonTeamMemberLogInfo.h"
#import "DBTEAMLOGTeamLogInfo.h"
#import "DBTEAMLOGTeamMemberLogInfo.h"
#import "DBTEAMLOGTrustedNonTeamMemberLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGContextLogInfo

@synthesize nonTeamMember = _nonTeamMember;
@synthesize organizationTeam = _organizationTeam;
@synthesize teamMember = _teamMember;
@synthesize trustedNonTeamMember = _trustedNonTeamMember;

#pragma mark - Constructors

- (instancetype)initWithAnonymous {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoAnonymous;
  }
  return self;
}

- (instancetype)initWithNonTeamMember:(DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoNonTeamMember;
    _nonTeamMember = nonTeamMember;
  }
  return self;
}

- (instancetype)initWithOrganizationTeam:(DBTEAMLOGTeamLogInfo *)organizationTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoOrganizationTeam;
    _organizationTeam = organizationTeam;
  }
  return self;
}

- (instancetype)initWithTeam {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeam;
  }
  return self;
}

- (instancetype)initWithTeamMember:(DBTEAMLOGTeamMemberLogInfo *)teamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTeamMember;
    _teamMember = teamMember;
  }
  return self;
}

- (instancetype)initWithTrustedNonTeamMember:(DBTEAMLOGTrustedNonTeamMemberLogInfo *)trustedNonTeamMember {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoTrustedNonTeamMember;
    _trustedNonTeamMember = trustedNonTeamMember;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGContextLogInfoOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGNonTeamMemberLogInfo *)nonTeamMember {
  if (![self isNonTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoNonTeamMember, but was %@.", [self tagName]];
  }
  return _nonTeamMember;
}

- (DBTEAMLOGTeamLogInfo *)organizationTeam {
  if (![self isOrganizationTeam]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoOrganizationTeam, but was %@.", [self tagName]];
  }
  return _organizationTeam;
}

- (DBTEAMLOGTeamMemberLogInfo *)teamMember {
  if (![self isTeamMember]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGContextLogInfoTeamMember, but was %@.", [self tagName]];
  }
  return _teamMember;
}

- (DBTEAMLOGTrustedNonTeamMemberLogInfo *)trustedNonTeamMember {
  if (![self isTrustedNonTeamMember]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGContextLogInfoTrustedNonTeamMember, but was %@.", [self tagName]];
  }
  return _trustedNonTeamMember;
}

#pragma mark - Tag state methods

- (BOOL)isAnonymous {
  return _tag == DBTEAMLOGContextLogInfoAnonymous;
}

- (BOOL)isNonTeamMember {
  return _tag == DBTEAMLOGContextLogInfoNonTeamMember;
}

- (BOOL)isOrganizationTeam {
  return _tag == DBTEAMLOGContextLogInfoOrganizationTeam;
}

- (BOOL)isTeam {
  return _tag == DBTEAMLOGContextLogInfoTeam;
}

- (BOOL)isTeamMember {
  return _tag == DBTEAMLOGContextLogInfoTeamMember;
}

- (BOOL)isTrustedNonTeamMember {
  return _tag == DBTEAMLOGContextLogInfoTrustedNonTeamMember;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGContextLogInfoOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGContextLogInfoAnonymous:
    return @"DBTEAMLOGContextLogInfoAnonymous";
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return @"DBTEAMLOGContextLogInfoNonTeamMember";
  case DBTEAMLOGContextLogInfoOrganizationTeam:
    return @"DBTEAMLOGContextLogInfoOrganizationTeam";
  case DBTEAMLOGContextLogInfoTeam:
    return @"DBTEAMLOGContextLogInfoTeam";
  case DBTEAMLOGContextLogInfoTeamMember:
    return @"DBTEAMLOGContextLogInfoTeamMember";
  case DBTEAMLOGContextLogInfoTrustedNonTeamMember:
    return @"DBTEAMLOGContextLogInfoTrustedNonTeamMember";
  case DBTEAMLOGContextLogInfoOther:
    return @"DBTEAMLOGContextLogInfoOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGContextLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGContextLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGContextLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGContextLogInfoAnonymous:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGContextLogInfoNonTeamMember:
    result = prime * result + [self.nonTeamMember hash];
    break;
  case DBTEAMLOGContextLogInfoOrganizationTeam:
    result = prime * result + [self.organizationTeam hash];
    break;
  case DBTEAMLOGContextLogInfoTeam:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGContextLogInfoTeamMember:
    result = prime * result + [self.teamMember hash];
    break;
  case DBTEAMLOGContextLogInfoTrustedNonTeamMember:
    result = prime * result + [self.trustedNonTeamMember hash];
    break;
  case DBTEAMLOGContextLogInfoOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToContextLogInfo:other];
}

- (BOOL)isEqualToContextLogInfo:(DBTEAMLOGContextLogInfo *)aContextLogInfo {
  if (self == aContextLogInfo) {
    return YES;
  }
  if (self.tag != aContextLogInfo.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGContextLogInfoAnonymous:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  case DBTEAMLOGContextLogInfoNonTeamMember:
    return [self.nonTeamMember isEqual:aContextLogInfo.nonTeamMember];
  case DBTEAMLOGContextLogInfoOrganizationTeam:
    return [self.organizationTeam isEqual:aContextLogInfo.organizationTeam];
  case DBTEAMLOGContextLogInfoTeam:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  case DBTEAMLOGContextLogInfoTeamMember:
    return [self.teamMember isEqual:aContextLogInfo.teamMember];
  case DBTEAMLOGContextLogInfoTrustedNonTeamMember:
    return [self.trustedNonTeamMember isEqual:aContextLogInfo.trustedNonTeamMember];
  case DBTEAMLOGContextLogInfoOther:
    return [[self tagName] isEqual:[aContextLogInfo tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGContextLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGContextLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAnonymous]) {
    jsonDict[@".tag"] = @"anonymous";
  } else if ([valueObj isNonTeamMember]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNonTeamMemberLogInfoSerializer serialize:valueObj.nonTeamMember]];
    jsonDict[@".tag"] = @"non_team_member";
  } else if ([valueObj isOrganizationTeam]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamLogInfoSerializer serialize:valueObj.organizationTeam]];
    jsonDict[@".tag"] = @"organization_team";
  } else if ([valueObj isTeam]) {
    jsonDict[@".tag"] = @"team";
  } else if ([valueObj isTeamMember]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMemberLogInfoSerializer serialize:valueObj.teamMember]];
    jsonDict[@".tag"] = @"team_member";
  } else if ([valueObj isTrustedNonTeamMember]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTrustedNonTeamMemberLogInfoSerializer
                                           serialize:valueObj.trustedNonTeamMember]];
    jsonDict[@".tag"] = @"trusted_non_team_member";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGContextLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"anonymous"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithAnonymous];
  } else if ([tag isEqualToString:@"non_team_member"]) {
    DBTEAMLOGNonTeamMemberLogInfo *nonTeamMember = [DBTEAMLOGNonTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithNonTeamMember:nonTeamMember];
  } else if ([tag isEqualToString:@"organization_team"]) {
    DBTEAMLOGTeamLogInfo *organizationTeam = [DBTEAMLOGTeamLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithOrganizationTeam:organizationTeam];
  } else if ([tag isEqualToString:@"team"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeam];
  } else if ([tag isEqualToString:@"team_member"]) {
    DBTEAMLOGTeamMemberLogInfo *teamMember = [DBTEAMLOGTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithTeamMember:teamMember];
  } else if ([tag isEqualToString:@"trusted_non_team_member"]) {
    DBTEAMLOGTrustedNonTeamMemberLogInfo *trustedNonTeamMember =
        [DBTEAMLOGTrustedNonTeamMemberLogInfoSerializer deserialize:valueDict];
    return [[DBTEAMLOGContextLogInfo alloc] initWithTrustedNonTeamMember:trustedNonTeamMember];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  } else {
    return [[DBTEAMLOGContextLogInfo alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateFolderDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateFolderDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateFolderDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateFolderDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCreateFolderDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateFolderDetails:other];
}

- (BOOL)isEqualToCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)aCreateFolderDetails {
  if (self == aCreateFolderDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateFolderDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateFolderDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateFolderDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGCreateFolderDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateFolderType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateFolderType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateFolderTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateFolderTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCreateFolderTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateFolderType:other];
}

- (BOOL)isEqualToCreateFolderType:(DBTEAMLOGCreateFolderType *)aCreateFolderType {
  if (self == aCreateFolderType) {
    return YES;
  }
  if (![self.description_ isEqual:aCreateFolderType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateFolderTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateFolderType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateFolderType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCreateFolderType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateTeamInviteLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateTeamInviteLinkDetails

#pragma mark - Constructors

- (instancetype)initWithLinkUrl:(NSString *)linkUrl expiryDate:(NSString *)expiryDate {
  [DBStoneValidators nonnullValidator:nil](linkUrl);
  [DBStoneValidators nonnullValidator:nil](expiryDate);

  self = [super init];
  if (self) {
    _linkUrl = linkUrl;
    _expiryDate = expiryDate;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateTeamInviteLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateTeamInviteLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCreateTeamInviteLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.linkUrl hash];
  result = prime * result + [self.expiryDate hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateTeamInviteLinkDetails:other];
}

- (BOOL)isEqualToCreateTeamInviteLinkDetails:(DBTEAMLOGCreateTeamInviteLinkDetails *)aCreateTeamInviteLinkDetails {
  if (self == aCreateTeamInviteLinkDetails) {
    return YES;
  }
  if (![self.linkUrl isEqual:aCreateTeamInviteLinkDetails.linkUrl]) {
    return NO;
  }
  if (![self.expiryDate isEqual:aCreateTeamInviteLinkDetails.expiryDate]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateTeamInviteLinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateTeamInviteLinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"link_url"] = valueObj.linkUrl;
  jsonDict[@"expiry_date"] = valueObj.expiryDate;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateTeamInviteLinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *linkUrl = valueDict[@"link_url"];
  NSString *expiryDate = valueDict[@"expiry_date"];

  return [[DBTEAMLOGCreateTeamInviteLinkDetails alloc] initWithLinkUrl:linkUrl expiryDate:expiryDate];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGCreateTeamInviteLinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGCreateTeamInviteLinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGCreateTeamInviteLinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGCreateTeamInviteLinkTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGCreateTeamInviteLinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToCreateTeamInviteLinkType:other];
}

- (BOOL)isEqualToCreateTeamInviteLinkType:(DBTEAMLOGCreateTeamInviteLinkType *)aCreateTeamInviteLinkType {
  if (self == aCreateTeamInviteLinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aCreateTeamInviteLinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGCreateTeamInviteLinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGCreateTeamInviteLinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGCreateTeamInviteLinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGCreateTeamInviteLinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPreviousValue:(DBTEAMLOGPlacementRestriction *)previousValue
                            dNewValue:(DBTEAMLOGPlacementRestriction *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionChangePolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)aDataPlacementRestrictionChangePolicyDetails {
  if (self == aDataPlacementRestrictionChangePolicyDetails) {
    return YES;
  }
  if (![self.previousValue isEqual:aDataPlacementRestrictionChangePolicyDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aDataPlacementRestrictionChangePolicyDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"previous_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPlacementRestriction *previousValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGPlacementRestriction *dNewValue =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"new_value"]];

  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyDetails alloc] initWithPreviousValue:previousValue
                                                                                   dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionChangePolicyType:other];
}

- (BOOL)isEqualToDataPlacementRestrictionChangePolicyType:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)aDataPlacementRestrictionChangePolicyType {
  if (self == aDataPlacementRestrictionChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataPlacementRestrictionChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataPlacementRestrictionChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGPlacementRestriction.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithPlacementRestriction:(DBTEAMLOGPlacementRestriction *)placementRestriction {
  [DBStoneValidators nonnullValidator:nil](placementRestriction);

  self = [super init];
  if (self) {
    _placementRestriction = placementRestriction;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.placementRestriction hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionSatisfyPolicyDetails:other];
}

- (BOOL)isEqualToDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)aDataPlacementRestrictionSatisfyPolicyDetails {
  if (self == aDataPlacementRestrictionSatisfyPolicyDetails) {
    return YES;
  }
  if (![self.placementRestriction isEqual:aDataPlacementRestrictionSatisfyPolicyDetails.placementRestriction]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"placement_restriction"] =
      [DBTEAMLOGPlacementRestrictionSerializer serialize:valueObj.placementRestriction];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGPlacementRestriction *placementRestriction =
      [DBTEAMLOGPlacementRestrictionSerializer deserialize:valueDict[@"placement_restriction"]];

  return
      [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails alloc] initWithPlacementRestriction:placementRestriction];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataPlacementRestrictionSatisfyPolicyType:other];
}

- (BOOL)isEqualToDataPlacementRestrictionSatisfyPolicyType:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)aDataPlacementRestrictionSatisfyPolicyType {
  if (self == aDataPlacementRestrictionSatisfyPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataPlacementRestrictionSatisfyPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataPlacementRestrictionSatisfyPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataResidencyMigrationRequestSuccessfulDetails:other];
}

- (BOOL)isEqualToDataResidencyMigrationRequestSuccessfulDetails:
    (DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *)aDataResidencyMigrationRequestSuccessfulDetails {
  if (self == aDataResidencyMigrationRequestSuccessfulDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataResidencyMigrationRequestSuccessfulType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataResidencyMigrationRequestSuccessfulType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataResidencyMigrationRequestSuccessfulType:other];
}

- (BOOL)isEqualToDataResidencyMigrationRequestSuccessfulType:
    (DBTEAMLOGDataResidencyMigrationRequestSuccessfulType *)aDataResidencyMigrationRequestSuccessfulType {
  if (self == aDataResidencyMigrationRequestSuccessfulType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataResidencyMigrationRequestSuccessfulType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataResidencyMigrationRequestSuccessfulTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataResidencyMigrationRequestSuccessfulType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataResidencyMigrationRequestSuccessfulType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataResidencyMigrationRequestSuccessfulType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataResidencyMigrationRequestUnsuccessfulDetails:other];
}

- (BOOL)isEqualToDataResidencyMigrationRequestUnsuccessfulDetails:
    (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *)aDataResidencyMigrationRequestUnsuccessfulDetails {
  if (self == aDataResidencyMigrationRequestUnsuccessfulDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDataResidencyMigrationRequestUnsuccessfulType:other];
}

- (BOOL)isEqualToDataResidencyMigrationRequestUnsuccessfulType:
    (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType *)aDataResidencyMigrationRequestUnsuccessfulType {
  if (self == aDataResidencyMigrationRequestUnsuccessfulType) {
    return YES;
  }
  if (![self.description_ isEqual:aDataResidencyMigrationRequestUnsuccessfulType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDefaultLinkExpirationDaysPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDefaultLinkExpirationDaysPolicy

#pragma mark - Constructors

- (instancetype)initWithDay1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1;
  }
  return self;
}

- (instancetype)initWithDay180 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180;
  }
  return self;
}

- (instancetype)initWithDay3 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3;
  }
  return self;
}

- (instancetype)initWithDay30 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30;
  }
  return self;
}

- (instancetype)initWithDay7 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7;
  }
  return self;
}

- (instancetype)initWithDay90 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90;
  }
  return self;
}

- (instancetype)initWithNone {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyNone;
  }
  return self;
}

- (instancetype)initWithYear1 {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDefaultLinkExpirationDaysPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDay1 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1;
}

- (BOOL)isDay180 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180;
}

- (BOOL)isDay3 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3;
}

- (BOOL)isDay30 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30;
}

- (BOOL)isDay7 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7;
}

- (BOOL)isDay90 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90;
}

- (BOOL)isNone {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyNone;
}

- (BOOL)isYear1 {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDefaultLinkExpirationDaysPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyNone:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyNone";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1";
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyOther:
    return @"DBTEAMLOGDefaultLinkExpirationDaysPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDefaultLinkExpirationDaysPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDefaultLinkExpirationDaysPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDefaultLinkExpirationDaysPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyNone:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDefaultLinkExpirationDaysPolicy:other];
}

- (BOOL)isEqualToDefaultLinkExpirationDaysPolicy:
    (DBTEAMLOGDefaultLinkExpirationDaysPolicy *)aDefaultLinkExpirationDaysPolicy {
  if (self == aDefaultLinkExpirationDaysPolicy) {
    return YES;
  }
  if (self.tag != aDefaultLinkExpirationDaysPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay1:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay180:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay3:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay30:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay7:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyDay90:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyNone:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyYear1:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  case DBTEAMLOGDefaultLinkExpirationDaysPolicyOther:
    return [[self tagName] isEqual:[aDefaultLinkExpirationDaysPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDefaultLinkExpirationDaysPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDefaultLinkExpirationDaysPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDay1]) {
    jsonDict[@".tag"] = @"day_1";
  } else if ([valueObj isDay180]) {
    jsonDict[@".tag"] = @"day_180";
  } else if ([valueObj isDay3]) {
    jsonDict[@".tag"] = @"day_3";
  } else if ([valueObj isDay30]) {
    jsonDict[@".tag"] = @"day_30";
  } else if ([valueObj isDay7]) {
    jsonDict[@".tag"] = @"day_7";
  } else if ([valueObj isDay90]) {
    jsonDict[@".tag"] = @"day_90";
  } else if ([valueObj isNone]) {
    jsonDict[@".tag"] = @"none";
  } else if ([valueObj isYear1]) {
    jsonDict[@".tag"] = @"year_1";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDefaultLinkExpirationDaysPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"day_1"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay1];
  } else if ([tag isEqualToString:@"day_180"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay180];
  } else if ([tag isEqualToString:@"day_3"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay3];
  } else if ([tag isEqualToString:@"day_30"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay30];
  } else if ([tag isEqualToString:@"day_7"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay7];
  } else if ([tag isEqualToString:@"day_90"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithDay90];
  } else if ([tag isEqualToString:@"none"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithNone];
  } else if ([tag isEqualToString:@"year_1"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithYear1];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDefaultLinkExpirationDaysPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeleteTeamInviteLinkDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeleteTeamInviteLinkDetails

#pragma mark - Constructors

- (instancetype)initWithLinkUrl:(NSString *)linkUrl {
  [DBStoneValidators nonnullValidator:nil](linkUrl);

  self = [super init];
  if (self) {
    _linkUrl = linkUrl;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.linkUrl hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeleteTeamInviteLinkDetails:other];
}

- (BOOL)isEqualToDeleteTeamInviteLinkDetails:(DBTEAMLOGDeleteTeamInviteLinkDetails *)aDeleteTeamInviteLinkDetails {
  if (self == aDeleteTeamInviteLinkDetails) {
    return YES;
  }
  if (![self.linkUrl isEqual:aDeleteTeamInviteLinkDetails.linkUrl]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeleteTeamInviteLinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"link_url"] = valueObj.linkUrl;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeleteTeamInviteLinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *linkUrl = valueDict[@"link_url"];

  return [[DBTEAMLOGDeleteTeamInviteLinkDetails alloc] initWithLinkUrl:linkUrl];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeleteTeamInviteLinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeleteTeamInviteLinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeleteTeamInviteLinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeleteTeamInviteLinkTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeleteTeamInviteLinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeleteTeamInviteLinkType:other];
}

- (BOOL)isEqualToDeleteTeamInviteLinkType:(DBTEAMLOGDeleteTeamInviteLinkType *)aDeleteTeamInviteLinkType {
  if (self == aDeleteTeamInviteLinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeleteTeamInviteLinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeleteTeamInviteLinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeleteTeamInviteLinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeleteTeamInviteLinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeleteTeamInviteLinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"
#import "DBTEAMLOGLegacyDeviceSessionLogInfo.h"
#import "DBTEAMLOGMobileDeviceSessionLogInfo.h"
#import "DBTEAMLOGWebDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithIpAddress:(NSString *)ipAddress created:(NSDate *)created updated:(NSDate *)updated {

  self = [super init];
  if (self) {
    _ipAddress = ipAddress;
    _created = created;
    _updated = updated;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithIpAddress:nil created:nil updated:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToDeviceSessionLogInfo:(DBTEAMLOGDeviceSessionLogInfo *)aDeviceSessionLogInfo {
  if (self == aDeviceSessionLogInfo) {
    return YES;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGDesktopDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGDesktopDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"desktopDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGMobileDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGMobileDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGMobileDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"mobileDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGWebDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGWebDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGWebDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"webDeviceSession";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGLegacyDeviceSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer serialize:(DBTEAMLOGLegacyDeviceSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"legacyDeviceSession";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"desktop_device_session"]) {
    return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"mobile_device_session"]) {
    return [DBTEAMLOGMobileDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"web_device_session"]) {
    return [DBTEAMLOGWebDeviceSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"legacy_device_session"]) {
    return [DBTEAMLOGLegacyDeviceSessionLogInfoSerializer deserialize:valueDict];
  }

  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;

  return [[DBTEAMLOGDeviceSessionLogInfo alloc] initWithIpAddress:ipAddress created:created updated:updated];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMDesktopPlatform.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDesktopDeviceSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithHostName:(NSString *)hostName
                      clientType:(DBTEAMDesktopPlatform *)clientType
                        platform:(NSString *)platform
       isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported
                       ipAddress:(NSString *)ipAddress
                         created:(NSDate *)created
                         updated:(NSDate *)updated
                     sessionInfo:(DBTEAMLOGDesktopSessionLogInfo *)sessionInfo
                   clientVersion:(NSString *)clientVersion {
  [DBStoneValidators nonnullValidator:nil](hostName);
  [DBStoneValidators nonnullValidator:nil](clientType);
  [DBStoneValidators nonnullValidator:nil](platform);
  [DBStoneValidators nonnullValidator:nil](isDeleteOnUnlinkSupported);

  self = [super initWithIpAddress:ipAddress created:created updated:updated];
  if (self) {
    _sessionInfo = sessionInfo;
    _hostName = hostName;
    _clientType = clientType;
    _clientVersion = clientVersion;
    _platform = platform;
    _isDeleteOnUnlinkSupported = isDeleteOnUnlinkSupported;
  }
  return self;
}

- (instancetype)initWithHostName:(NSString *)hostName
                      clientType:(DBTEAMDesktopPlatform *)clientType
                        platform:(NSString *)platform
       isDeleteOnUnlinkSupported:(NSNumber *)isDeleteOnUnlinkSupported {
  return [self initWithHostName:hostName
                     clientType:clientType
                       platform:platform
      isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                      ipAddress:nil
                        created:nil
                        updated:nil
                    sessionInfo:nil
                  clientVersion:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.hostName hash];
  result = prime * result + [self.clientType hash];
  result = prime * result + [self.platform hash];
  result = prime * result + [self.isDeleteOnUnlinkSupported hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }
  if (self.created != nil) {
    result = prime * result + [self.created hash];
  }
  if (self.updated != nil) {
    result = prime * result + [self.updated hash];
  }
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.clientVersion != nil) {
    result = prime * result + [self.clientVersion hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopDeviceSessionLogInfo:other];
}

- (BOOL)isEqualToDesktopDeviceSessionLogInfo:(DBTEAMLOGDesktopDeviceSessionLogInfo *)aDesktopDeviceSessionLogInfo {
  if (self == aDesktopDeviceSessionLogInfo) {
    return YES;
  }
  if (![self.hostName isEqual:aDesktopDeviceSessionLogInfo.hostName]) {
    return NO;
  }
  if (![self.clientType isEqual:aDesktopDeviceSessionLogInfo.clientType]) {
    return NO;
  }
  if (![self.platform isEqual:aDesktopDeviceSessionLogInfo.platform]) {
    return NO;
  }
  if (![self.isDeleteOnUnlinkSupported isEqual:aDesktopDeviceSessionLogInfo.isDeleteOnUnlinkSupported]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDesktopDeviceSessionLogInfo.ipAddress]) {
      return NO;
    }
  }
  if (self.created) {
    if (![self.created isEqual:aDesktopDeviceSessionLogInfo.created]) {
      return NO;
    }
  }
  if (self.updated) {
    if (![self.updated isEqual:aDesktopDeviceSessionLogInfo.updated]) {
      return NO;
    }
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDesktopDeviceSessionLogInfo.sessionInfo]) {
      return NO;
    }
  }
  if (self.clientVersion) {
    if (![self.clientVersion isEqual:aDesktopDeviceSessionLogInfo.clientVersion]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDesktopDeviceSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDesktopDeviceSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"host_name"] = valueObj.hostName;
  jsonDict[@"client_type"] = [DBTEAMDesktopPlatformSerializer serialize:valueObj.clientType];
  jsonDict[@"platform"] = valueObj.platform;
  jsonDict[@"is_delete_on_unlink_supported"] = valueObj.isDeleteOnUnlinkSupported;
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }
  if (valueObj.created) {
    jsonDict[@"created"] = [DBNSDateSerializer serialize:valueObj.created dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.updated) {
    jsonDict[@"updated"] = [DBNSDateSerializer serialize:valueObj.updated dateFormat:@"%Y-%m-%dT%H:%M:%SZ"];
  }
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.clientVersion) {
    jsonDict[@"client_version"] = valueObj.clientVersion;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDesktopDeviceSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *hostName = valueDict[@"host_name"];
  DBTEAMDesktopPlatform *clientType = [DBTEAMDesktopPlatformSerializer deserialize:valueDict[@"client_type"]];
  NSString *platform = valueDict[@"platform"];
  NSNumber *isDeleteOnUnlinkSupported = valueDict[@"is_delete_on_unlink_supported"];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;
  NSDate *created = valueDict[@"created"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"created"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  NSDate *updated = valueDict[@"updated"]
                        ? [DBNSDateSerializer deserialize:valueDict[@"updated"] dateFormat:@"%Y-%m-%dT%H:%M:%SZ"]
                        : nil;
  DBTEAMLOGDesktopSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:valueDict[@"session_info"]]
                                 : nil;
  NSString *clientVersion = valueDict[@"client_version"] ?: nil;

  return [[DBTEAMLOGDesktopDeviceSessionLogInfo alloc] initWithHostName:hostName
                                                             clientType:clientType
                                                               platform:platform
                                              isDeleteOnUnlinkSupported:isDeleteOnUnlinkSupported
                                                              ipAddress:ipAddress
                                                                created:created
                                                                updated:updated
                                                            sessionInfo:sessionInfo
                                                          clientVersion:clientVersion];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGMobileSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"
#import "DBTEAMLOGWebSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super init];
  if (self) {
    _sessionId = sessionId;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToSessionLogInfo:other];
}

- (BOOL)isEqualToSessionLogInfo:(DBTEAMLOGSessionLogInfo *)aSessionLogInfo {
  if (self == aSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  if ([valueObj isKindOfClass:[DBTEAMLOGWebSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGWebSessionLogInfoSerializer serialize:(DBTEAMLOGWebSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"web";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGDesktopSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isKindOfClass:[DBTEAMLOGMobileSessionLogInfo class]]) {
    NSDictionary *subTypeFields =
        [DBTEAMLOGMobileSessionLogInfoSerializer serialize:(DBTEAMLOGMobileSessionLogInfo *)valueObj];
    for (NSString *key in subTypeFields) {
      jsonDict[key] = subTypeFields[key];
    }
    jsonDict[@".tag"] = @"mobile";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  if ([valueDict[@".tag"] isEqualToString:@"web"]) {
    return [DBTEAMLOGWebSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"desktop"]) {
    return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:valueDict];
  }
  if ([valueDict[@".tag"] isEqualToString:@"mobile"]) {
    return [DBTEAMLOGMobileSessionLogInfoSerializer deserialize:valueDict];
  }

  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDesktopSessionLogInfo.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDesktopSessionLogInfo

#pragma mark - Constructors

- (instancetype)initWithSessionId:(NSString *)sessionId {

  self = [super initWithSessionId:sessionId];
  if (self) {
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionId:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDesktopSessionLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDesktopSessionLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionId != nil) {
    result = prime * result + [self.sessionId hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDesktopSessionLogInfo:other];
}

- (BOOL)isEqualToDesktopSessionLogInfo:(DBTEAMLOGDesktopSessionLogInfo *)aDesktopSessionLogInfo {
  if (self == aDesktopSessionLogInfo) {
    return YES;
  }
  if (self.sessionId) {
    if (![self.sessionId isEqual:aDesktopSessionLogInfo.sessionId]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDesktopSessionLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDesktopSessionLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionId) {
    jsonDict[@"session_id"] = valueObj.sessionId;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDesktopSessionLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *sessionId = valueDict[@"session_id"] ?: nil;

  return [[DBTEAMLOGDesktopSessionLogInfo alloc] initWithSessionId:sessionId];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsAddExceptionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsAddExceptionDetails:
    (DBTEAMLOGDeviceApprovalsAddExceptionDetails *)aDeviceApprovalsAddExceptionDetails {
  if (self == aDeviceApprovalsAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsAddExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceApprovalsAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsAddExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsAddExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsAddExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsAddExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsAddExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsAddExceptionType:other];
}

- (BOOL)isEqualToDeviceApprovalsAddExceptionType:
    (DBTEAMLOGDeviceApprovalsAddExceptionType *)aDeviceApprovalsAddExceptionType {
  if (self == aDeviceApprovalsAddExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsAddExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsAddExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsAddExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsAddExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsAddExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeDesktopPolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)aDeviceApprovalsChangeDesktopPolicyDetails {
  if (self == aDeviceApprovalsChangeDesktopPolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeDesktopPolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeDesktopPolicyType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeDesktopPolicyType:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)aDeviceApprovalsChangeDesktopPolicyType {
  if (self == aDeviceApprovalsChangeDesktopPolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeDesktopPolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeDesktopPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceApprovalsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceApprovalsPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeMobilePolicyDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)aDeviceApprovalsChangeMobilePolicyDetails {
  if (self == aDeviceApprovalsChangeMobilePolicyDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeMobilePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceApprovalsPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceApprovalsPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeMobilePolicyType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeMobilePolicyType:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)aDeviceApprovalsChangeMobilePolicyType {
  if (self == aDeviceApprovalsChangeMobilePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeMobilePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeMobilePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeMobilePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeMobilePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMPOLICIESRolloutMethod.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESRolloutMethod *)dNewValue
                    previousValue:(DBTEAMPOLICIESRolloutMethod *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeOverageActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)aDeviceApprovalsChangeOverageActionDetails {
  if (self == aDeviceApprovalsChangeOverageActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeOverageActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeOverageActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMPOLICIESRolloutMethodSerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESRolloutMethodSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESRolloutMethod *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMPOLICIESRolloutMethodSerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMPOLICIESRolloutMethod *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESRolloutMethodSerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionDetails alloc] initWithDNewValue:dNewValue
                                                                         previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeOverageActionType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeOverageActionType:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)aDeviceApprovalsChangeOverageActionType {
  if (self == aDeviceApprovalsChangeOverageActionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeOverageActionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeOverageActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeOverageActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeOverageActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeOverageActionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDeviceUnlinkPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDeviceUnlinkPolicy *)previousValue {

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDNewValue:nil previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.dNewValue != nil) {
    result = prime * result + [self.dNewValue hash];
  }
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeUnlinkActionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)aDeviceApprovalsChangeUnlinkActionDetails {
  if (self == aDeviceApprovalsChangeUnlinkActionDetails) {
    return YES;
  }
  if (self.dNewValue) {
    if (![self.dNewValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.dNewValue]) {
      return NO;
    }
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:aDeviceApprovalsChangeUnlinkActionDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.dNewValue) {
    jsonDict[@"new_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.dNewValue];
  }
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceUnlinkPolicy *dNewValue =
      valueDict[@"new_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"new_value"]] : nil;
  DBTEAMLOGDeviceUnlinkPolicy *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:valueDict[@"previous_value"]]
                                   : nil;

  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails alloc] initWithDNewValue:dNewValue
                                                                        previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsChangeUnlinkActionType:other];
}

- (BOOL)isEqualToDeviceApprovalsChangeUnlinkActionType:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)aDeviceApprovalsChangeUnlinkActionType {
  if (self == aDeviceApprovalsChangeUnlinkActionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsChangeUnlinkActionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsChangeUnlinkActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsChangeUnlinkActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsChangeUnlinkActionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsPolicy

#pragma mark - Constructors

- (instancetype)initWithLimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyLimited;
  }
  return self;
}

- (instancetype)initWithUnlimited {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyUnlimited;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceApprovalsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isLimited {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyLimited;
}

- (BOOL)isUnlimited {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyUnlimited;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceApprovalsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    return @"DBTEAMLOGDeviceApprovalsPolicyLimited";
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return @"DBTEAMLOGDeviceApprovalsPolicyUnlimited";
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return @"DBTEAMLOGDeviceApprovalsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsPolicy:other];
}

- (BOOL)isEqualToDeviceApprovalsPolicy:(DBTEAMLOGDeviceApprovalsPolicy *)aDeviceApprovalsPolicy {
  if (self == aDeviceApprovalsPolicy) {
    return YES;
  }
  if (self.tag != aDeviceApprovalsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceApprovalsPolicyLimited:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyUnlimited:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  case DBTEAMLOGDeviceApprovalsPolicyOther:
    return [[self tagName] isEqual:[aDeviceApprovalsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isLimited]) {
    jsonDict[@".tag"] = @"limited";
  } else if ([valueObj isUnlimited]) {
    jsonDict[@".tag"] = @"unlimited";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"limited"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithLimited];
  } else if ([tag isEqualToString:@"unlimited"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithUnlimited];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceApprovalsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsRemoveExceptionDetails:other];
}

- (BOOL)isEqualToDeviceApprovalsRemoveExceptionDetails:
    (DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *)aDeviceApprovalsRemoveExceptionDetails {
  if (self == aDeviceApprovalsRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceApprovalsRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceApprovalsRemoveExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceApprovalsRemoveExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceApprovalsRemoveExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceApprovalsRemoveExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceApprovalsRemoveExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceApprovalsRemoveExceptionType:other];
}

- (BOOL)isEqualToDeviceApprovalsRemoveExceptionType:
    (DBTEAMLOGDeviceApprovalsRemoveExceptionType *)aDeviceApprovalsRemoveExceptionType {
  if (self == aDeviceApprovalsRemoveExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceApprovalsRemoveExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceApprovalsRemoveExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceApprovalsRemoveExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceApprovalsRemoveExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceApprovalsRemoveExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {
  [DBStoneValidators nonnullValidator:nil](deviceSessionInfo);

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceSessionInfo hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpDesktopDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpDesktopDetails:(DBTEAMLOGDeviceChangeIpDesktopDetails *)aDeviceChangeIpDesktopDetails {
  if (self == aDeviceChangeIpDesktopDetails) {
    return YES;
  }
  if (![self.deviceSessionInfo isEqual:aDeviceChangeIpDesktopDetails.deviceSessionInfo]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpDesktopDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpDesktopDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]];

  return [[DBTEAMLOGDeviceChangeIpDesktopDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpDesktopType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpDesktopType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpDesktopTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpDesktopTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpDesktopTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpDesktopType:other];
}

- (BOOL)isEqualToDeviceChangeIpDesktopType:(DBTEAMLOGDeviceChangeIpDesktopType *)aDeviceChangeIpDesktopType {
  if (self == aDeviceChangeIpDesktopType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpDesktopType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpDesktopTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpDesktopType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpDesktopType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpDesktopType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeviceSessionInfo:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deviceSessionInfo != nil) {
    result = prime * result + [self.deviceSessionInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpMobileDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpMobileDetails:(DBTEAMLOGDeviceChangeIpMobileDetails *)aDeviceChangeIpMobileDetails {
  if (self == aDeviceChangeIpMobileDetails) {
    return YES;
  }
  if (self.deviceSessionInfo) {
    if (![self.deviceSessionInfo isEqual:aDeviceChangeIpMobileDetails.deviceSessionInfo]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpMobileDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpMobileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deviceSessionInfo) {
    jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpMobileDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      valueDict[@"device_session_info"]
          ? [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]]
          : nil;

  return [[DBTEAMLOGDeviceChangeIpMobileDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpMobileType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpMobileType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpMobileTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpMobileTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpMobileTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpMobileType:other];
}

- (BOOL)isEqualToDeviceChangeIpMobileType:(DBTEAMLOGDeviceChangeIpMobileType *)aDeviceChangeIpMobileType {
  if (self == aDeviceChangeIpMobileType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpMobileType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpMobileTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpMobileType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpMobileType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpMobileType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpWebDetails

#pragma mark - Constructors

- (instancetype)initWithUserAgent:(NSString *)userAgent {
  [DBStoneValidators nonnullValidator:nil](userAgent);

  self = [super init];
  if (self) {
    _userAgent = userAgent;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpWebDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.userAgent hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpWebDetails:other];
}

- (BOOL)isEqualToDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)aDeviceChangeIpWebDetails {
  if (self == aDeviceChangeIpWebDetails) {
    return YES;
  }
  if (![self.userAgent isEqual:aDeviceChangeIpWebDetails.userAgent]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpWebDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpWebDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"user_agent"] = valueObj.userAgent;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpWebDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *userAgent = valueDict[@"user_agent"];

  return [[DBTEAMLOGDeviceChangeIpWebDetails alloc] initWithUserAgent:userAgent];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceChangeIpWebType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceChangeIpWebType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceChangeIpWebTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceChangeIpWebTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceChangeIpWebTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceChangeIpWebType:other];
}

- (BOOL)isEqualToDeviceChangeIpWebType:(DBTEAMLOGDeviceChangeIpWebType *)aDeviceChangeIpWebType {
  if (self == aDeviceChangeIpWebType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceChangeIpWebType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceChangeIpWebTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceChangeIpWebType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceChangeIpWebType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceChangeIpWebType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithNumFailures:(NSNumber *)numFailures
                        sessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo
                        displayName:(NSString *)displayName {
  [DBStoneValidators nonnullValidator:nil](numFailures);

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
    _numFailures = numFailures;
  }
  return self;
}

- (instancetype)initWithNumFailures:(NSNumber *)numFailures {
  return [self initWithNumFailures:numFailures sessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.numFailures hash];
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkFailDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)aDeviceDeleteOnUnlinkFailDetails {
  if (self == aDeviceDeleteOnUnlinkFailDetails) {
    return YES;
  }
  if (![self.numFailures isEqual:aDeviceDeleteOnUnlinkFailDetails.numFailures]) {
    return NO;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceDeleteOnUnlinkFailDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceDeleteOnUnlinkFailDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"num_failures"] = valueObj.numFailures;
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *numFailures = valueDict[@"num_failures"];
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailDetails alloc] initWithNumFailures:numFailures
                                                                   sessionInfo:sessionInfo
                                                                   displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkFailType:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkFailType:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)aDeviceDeleteOnUnlinkFailType {
  if (self == aDeviceDeleteOnUnlinkFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceDeleteOnUnlinkFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithSessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo displayName:(NSString *)displayName {

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithSessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)aDeviceDeleteOnUnlinkSuccessDetails {
  if (self == aDeviceDeleteOnUnlinkSuccessDetails) {
    return YES;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceDeleteOnUnlinkSuccessDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceDeleteOnUnlinkSuccessDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails alloc] initWithSessionInfo:sessionInfo displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceDeleteOnUnlinkSuccessType:other];
}

- (BOOL)isEqualToDeviceDeleteOnUnlinkSuccessType:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)aDeviceDeleteOnUnlinkSuccessType {
  if (self == aDeviceDeleteOnUnlinkSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceDeleteOnUnlinkSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceDeleteOnUnlinkSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceDeleteOnUnlinkSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceDeleteOnUnlinkSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkFailDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceType:(DBTEAMLOGDeviceType *)deviceType ipAddress:(NSString *)ipAddress {
  [DBStoneValidators nonnullValidator:nil](deviceType);

  self = [super init];
  if (self) {
    _ipAddress = ipAddress;
    _deviceType = deviceType;
  }
  return self;
}

- (instancetype)initWithDeviceType:(DBTEAMLOGDeviceType *)deviceType {
  return [self initWithDeviceType:deviceType ipAddress:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deviceType hash];
  if (self.ipAddress != nil) {
    result = prime * result + [self.ipAddress hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkFailDetails:other];
}

- (BOOL)isEqualToDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)aDeviceLinkFailDetails {
  if (self == aDeviceLinkFailDetails) {
    return YES;
  }
  if (![self.deviceType isEqual:aDeviceLinkFailDetails.deviceType]) {
    return NO;
  }
  if (self.ipAddress) {
    if (![self.ipAddress isEqual:aDeviceLinkFailDetails.ipAddress]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"device_type"] = [DBTEAMLOGDeviceTypeSerializer serialize:valueObj.deviceType];
  if (valueObj.ipAddress) {
    jsonDict[@"ip_address"] = valueObj.ipAddress;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceType *deviceType = [DBTEAMLOGDeviceTypeSerializer deserialize:valueDict[@"device_type"]];
  NSString *ipAddress = valueDict[@"ip_address"] ?: nil;

  return [[DBTEAMLOGDeviceLinkFailDetails alloc] initWithDeviceType:deviceType ipAddress:ipAddress];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkFailTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceLinkFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkFailType:other];
}

- (BOOL)isEqualToDeviceLinkFailType:(DBTEAMLOGDeviceLinkFailType *)aDeviceLinkFailType {
  if (self == aDeviceLinkFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceLinkFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceLinkFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDeviceSessionInfo:(DBTEAMLOGDeviceSessionLogInfo *)deviceSessionInfo {

  self = [super init];
  if (self) {
    _deviceSessionInfo = deviceSessionInfo;
  }
  return self;
}

- (instancetype)initDefault {
  return [self initWithDeviceSessionInfo:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceLinkSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  if (self.deviceSessionInfo != nil) {
    result = prime * result + [self.deviceSessionInfo hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkSuccessDetails:other];
}

- (BOOL)isEqualToDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)aDeviceLinkSuccessDetails {
  if (self == aDeviceLinkSuccessDetails) {
    return YES;
  }
  if (self.deviceSessionInfo) {
    if (![self.deviceSessionInfo isEqual:aDeviceLinkSuccessDetails.deviceSessionInfo]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if (valueObj.deviceSessionInfo) {
    jsonDict[@"device_session_info"] = [DBTEAMLOGDeviceSessionLogInfoSerializer serialize:valueObj.deviceSessionInfo];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDeviceSessionLogInfo *deviceSessionInfo =
      valueDict[@"device_session_info"]
          ? [DBTEAMLOGDeviceSessionLogInfoSerializer deserialize:valueDict[@"device_session_info"]]
          : nil;

  return [[DBTEAMLOGDeviceLinkSuccessDetails alloc] initWithDeviceSessionInfo:deviceSessionInfo];
}

@end
