#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceLinkSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceLinkSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceLinkSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceLinkSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceLinkSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceLinkSuccessType:other];
}

- (BOOL)isEqualToDeviceLinkSuccessType:(DBTEAMLOGDeviceLinkSuccessType *)aDeviceLinkSuccessType {
  if (self == aDeviceLinkSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceLinkSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceLinkSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceLinkSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceLinkSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceLinkSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementDisabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceManagementDisabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementDisabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)aDeviceManagementDisabledDetails {
  if (self == aDeviceManagementDisabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementDisabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementDisabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementDisabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementDisabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementDisabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementDisabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementDisabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementDisabledTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceManagementDisabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementDisabledType:other];
}

- (BOOL)isEqualToDeviceManagementDisabledType:(DBTEAMLOGDeviceManagementDisabledType *)aDeviceManagementDisabledType {
  if (self == aDeviceManagementDisabledType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceManagementDisabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementDisabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementDisabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementDisabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceManagementDisabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementEnabledDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceManagementEnabledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementEnabledDetails:other];
}

- (BOOL)isEqualToDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)aDeviceManagementEnabledDetails {
  if (self == aDeviceManagementEnabledDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementEnabledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementEnabledDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementEnabledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDeviceManagementEnabledDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceManagementEnabledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceManagementEnabledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceManagementEnabledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceManagementEnabledTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceManagementEnabledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceManagementEnabledType:other];
}

- (BOOL)isEqualToDeviceManagementEnabledType:(DBTEAMLOGDeviceManagementEnabledType *)aDeviceManagementEnabledType {
  if (self == aDeviceManagementEnabledType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceManagementEnabledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceManagementEnabledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceManagementEnabledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceManagementEnabledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceManagementEnabledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGBackupStatus.h"
#import "DBTEAMLOGDesktopDeviceSessionLogInfo.h"
#import "DBTEAMLOGDeviceSyncBackupStatusChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceSyncBackupStatusChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDesktopDeviceSessionInfo:(DBTEAMLOGDesktopDeviceSessionLogInfo *)desktopDeviceSessionInfo
                                   previousValue:(DBTEAMLOGBackupStatus *)previousValue
                                       dNewValue:(DBTEAMLOGBackupStatus *)dNewValue {
  [DBStoneValidators nonnullValidator:nil](desktopDeviceSessionInfo);
  [DBStoneValidators nonnullValidator:nil](previousValue);
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _desktopDeviceSessionInfo = desktopDeviceSessionInfo;
    _previousValue = previousValue;
    _dNewValue = dNewValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.desktopDeviceSessionInfo hash];
  result = prime * result + [self.previousValue hash];
  result = prime * result + [self.dNewValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSyncBackupStatusChangedDetails:other];
}

- (BOOL)isEqualToDeviceSyncBackupStatusChangedDetails:
    (DBTEAMLOGDeviceSyncBackupStatusChangedDetails *)aDeviceSyncBackupStatusChangedDetails {
  if (self == aDeviceSyncBackupStatusChangedDetails) {
    return YES;
  }
  if (![self.desktopDeviceSessionInfo isEqual:aDeviceSyncBackupStatusChangedDetails.desktopDeviceSessionInfo]) {
    return NO;
  }
  if (![self.previousValue isEqual:aDeviceSyncBackupStatusChangedDetails.previousValue]) {
    return NO;
  }
  if (![self.dNewValue isEqual:aDeviceSyncBackupStatusChangedDetails.dNewValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceSyncBackupStatusChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"desktop_device_session_info"] =
      [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer serialize:valueObj.desktopDeviceSessionInfo];
  jsonDict[@"previous_value"] = [DBTEAMLOGBackupStatusSerializer serialize:valueObj.previousValue];
  jsonDict[@"new_value"] = [DBTEAMLOGBackupStatusSerializer serialize:valueObj.dNewValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceSyncBackupStatusChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDesktopDeviceSessionLogInfo *desktopDeviceSessionInfo =
      [DBTEAMLOGDesktopDeviceSessionLogInfoSerializer deserialize:valueDict[@"desktop_device_session_info"]];
  DBTEAMLOGBackupStatus *previousValue = [DBTEAMLOGBackupStatusSerializer deserialize:valueDict[@"previous_value"]];
  DBTEAMLOGBackupStatus *dNewValue = [DBTEAMLOGBackupStatusSerializer deserialize:valueDict[@"new_value"]];

  return
      [[DBTEAMLOGDeviceSyncBackupStatusChangedDetails alloc] initWithDesktopDeviceSessionInfo:desktopDeviceSessionInfo
                                                                                previousValue:previousValue
                                                                                    dNewValue:dNewValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceSyncBackupStatusChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceSyncBackupStatusChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceSyncBackupStatusChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceSyncBackupStatusChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceSyncBackupStatusChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceSyncBackupStatusChangedType:other];
}

- (BOOL)isEqualToDeviceSyncBackupStatusChangedType:
    (DBTEAMLOGDeviceSyncBackupStatusChangedType *)aDeviceSyncBackupStatusChangedType {
  if (self == aDeviceSyncBackupStatusChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceSyncBackupStatusChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceSyncBackupStatusChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceSyncBackupStatusChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceSyncBackupStatusChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceSyncBackupStatusChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceType

#pragma mark - Constructors

- (instancetype)initWithDesktop {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeDesktop;
  }
  return self;
}

- (instancetype)initWithMobile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeMobile;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDesktop {
  return _tag == DBTEAMLOGDeviceTypeDesktop;
}

- (BOOL)isMobile {
  return _tag == DBTEAMLOGDeviceTypeMobile;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    return @"DBTEAMLOGDeviceTypeDesktop";
  case DBTEAMLOGDeviceTypeMobile:
    return @"DBTEAMLOGDeviceTypeMobile";
  case DBTEAMLOGDeviceTypeOther:
    return @"DBTEAMLOGDeviceTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceTypeMobile:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceType:other];
}

- (BOOL)isEqualToDeviceType:(DBTEAMLOGDeviceType *)aDeviceType {
  if (self == aDeviceType) {
    return YES;
  }
  if (self.tag != aDeviceType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceTypeDesktop:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeMobile:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  case DBTEAMLOGDeviceTypeOther:
    return [[self tagName] isEqual:[aDeviceType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDesktop]) {
    jsonDict[@".tag"] = @"desktop";
  } else if ([valueObj isMobile]) {
    jsonDict[@".tag"] = @"mobile";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"desktop"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithDesktop];
  } else if ([tag isEqualToString:@"mobile"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithMobile];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"
#import "DBTEAMLOGSessionLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkDetails

#pragma mark - Constructors

- (instancetype)initWithDeleteData:(NSNumber *)deleteData
                       sessionInfo:(DBTEAMLOGSessionLogInfo *)sessionInfo
                       displayName:(NSString *)displayName {
  [DBStoneValidators nonnullValidator:nil](deleteData);

  self = [super init];
  if (self) {
    _sessionInfo = sessionInfo;
    _displayName = displayName;
    _deleteData = deleteData;
  }
  return self;
}

- (instancetype)initWithDeleteData:(NSNumber *)deleteData {
  return [self initWithDeleteData:deleteData sessionInfo:nil displayName:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.deleteData hash];
  if (self.sessionInfo != nil) {
    result = prime * result + [self.sessionInfo hash];
  }
  if (self.displayName != nil) {
    result = prime * result + [self.displayName hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkDetails:other];
}

- (BOOL)isEqualToDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)aDeviceUnlinkDetails {
  if (self == aDeviceUnlinkDetails) {
    return YES;
  }
  if (![self.deleteData isEqual:aDeviceUnlinkDetails.deleteData]) {
    return NO;
  }
  if (self.sessionInfo) {
    if (![self.sessionInfo isEqual:aDeviceUnlinkDetails.sessionInfo]) {
      return NO;
    }
  }
  if (self.displayName) {
    if (![self.displayName isEqual:aDeviceUnlinkDetails.displayName]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"delete_data"] = valueObj.deleteData;
  if (valueObj.sessionInfo) {
    jsonDict[@"session_info"] = [DBTEAMLOGSessionLogInfoSerializer serialize:valueObj.sessionInfo];
  }
  if (valueObj.displayName) {
    jsonDict[@"display_name"] = valueObj.displayName;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *deleteData = valueDict[@"delete_data"];
  DBTEAMLOGSessionLogInfo *sessionInfo =
      valueDict[@"session_info"] ? [DBTEAMLOGSessionLogInfoSerializer deserialize:valueDict[@"session_info"]] : nil;
  NSString *displayName = valueDict[@"display_name"] ?: nil;

  return [[DBTEAMLOGDeviceUnlinkDetails alloc] initWithDeleteData:deleteData
                                                      sessionInfo:sessionInfo
                                                      displayName:displayName];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkPolicy

#pragma mark - Constructors

- (instancetype)initWithKeep {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyKeep;
  }
  return self;
}

- (instancetype)initWithRemove {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyRemove;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDeviceUnlinkPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isKeep {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyKeep;
}

- (BOOL)isRemove {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyRemove;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDeviceUnlinkPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return @"DBTEAMLOGDeviceUnlinkPolicyKeep";
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return @"DBTEAMLOGDeviceUnlinkPolicyRemove";
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return @"DBTEAMLOGDeviceUnlinkPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceUnlinkPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkPolicy:other];
}

- (BOOL)isEqualToDeviceUnlinkPolicy:(DBTEAMLOGDeviceUnlinkPolicy *)aDeviceUnlinkPolicy {
  if (self == aDeviceUnlinkPolicy) {
    return YES;
  }
  if (self.tag != aDeviceUnlinkPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDeviceUnlinkPolicyKeep:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyRemove:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  case DBTEAMLOGDeviceUnlinkPolicyOther:
    return [[self tagName] isEqual:[aDeviceUnlinkPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isKeep]) {
    jsonDict[@".tag"] = @"keep";
  } else if ([valueObj isRemove]) {
    jsonDict[@".tag"] = @"remove";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"keep"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithKeep];
  } else if ([tag isEqualToString:@"remove"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithRemove];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDeviceUnlinkPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDeviceUnlinkType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDeviceUnlinkType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDeviceUnlinkTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDeviceUnlinkTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDeviceUnlinkTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDeviceUnlinkType:other];
}

- (BOOL)isEqualToDeviceUnlinkType:(DBTEAMLOGDeviceUnlinkType *)aDeviceUnlinkType {
  if (self == aDeviceUnlinkType) {
    return YES;
  }
  if (![self.description_ isEqual:aDeviceUnlinkType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDeviceUnlinkTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDeviceUnlinkType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDeviceUnlinkType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDeviceUnlinkType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsAddMembersDetails:other];
}

- (BOOL)isEqualToDirectoryRestrictionsAddMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)aDirectoryRestrictionsAddMembersDetails {
  if (self == aDirectoryRestrictionsAddMembersDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDirectoryRestrictionsAddMembersDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsAddMembersType:other];
}

- (BOOL)isEqualToDirectoryRestrictionsAddMembersType:
    (DBTEAMLOGDirectoryRestrictionsAddMembersType *)aDirectoryRestrictionsAddMembersType {
  if (self == aDirectoryRestrictionsAddMembersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDirectoryRestrictionsAddMembersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsAddMembersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsAddMembersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsAddMembersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDirectoryRestrictionsAddMembersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsRemoveMembersDetails:other];
}

- (BOOL)isEqualToDirectoryRestrictionsRemoveMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)aDirectoryRestrictionsRemoveMembersDetails {
  if (self == aDirectoryRestrictionsRemoveMembersDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDirectoryRestrictionsRemoveMembersType:other];
}

- (BOOL)isEqualToDirectoryRestrictionsRemoveMembersType:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)aDirectoryRestrictionsRemoveMembersType {
  if (self == aDirectoryRestrictionsRemoveMembersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDirectoryRestrictionsRemoveMembersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDirectoryRestrictionsRemoveMembersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDirectoryRestrictionsRemoveMembersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDirectoryRestrictionsRemoveMembersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDisabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDisabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDisabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToDisabledDomainInvitesDetails:(DBTEAMLOGDisabledDomainInvitesDetails *)aDisabledDomainInvitesDetails {
  if (self == aDisabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDisabledDomainInvitesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDisabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDisabledDomainInvitesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDisabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDisabledDomainInvitesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDisabledDomainInvitesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDisabledDomainInvitesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDisabledDomainInvitesTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDisabledDomainInvitesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDisabledDomainInvitesType:other];
}

- (BOOL)isEqualToDisabledDomainInvitesType:(DBTEAMLOGDisabledDomainInvitesType *)aDisabledDomainInvitesType {
  if (self == aDisabledDomainInvitesType) {
    return YES;
  }
  if (![self.description_ isEqual:aDisabledDomainInvitesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDisabledDomainInvitesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDisabledDomainInvitesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDisabledDomainInvitesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDisabledDomainInvitesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDispositionActionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDispositionActionType

#pragma mark - Constructors

- (instancetype)initWithAutomaticDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDispositionActionTypeAutomaticDelete;
  }
  return self;
}

- (instancetype)initWithAutomaticPermanentlyDelete {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDispositionActionTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAutomaticDelete {
  return _tag == DBTEAMLOGDispositionActionTypeAutomaticDelete;
}

- (BOOL)isAutomaticPermanentlyDelete {
  return _tag == DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDispositionActionTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDispositionActionTypeAutomaticDelete:
    return @"DBTEAMLOGDispositionActionTypeAutomaticDelete";
  case DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete:
    return @"DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete";
  case DBTEAMLOGDispositionActionTypeOther:
    return @"DBTEAMLOGDispositionActionTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDispositionActionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDispositionActionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDispositionActionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDispositionActionTypeAutomaticDelete:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDispositionActionTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDispositionActionType:other];
}

- (BOOL)isEqualToDispositionActionType:(DBTEAMLOGDispositionActionType *)aDispositionActionType {
  if (self == aDispositionActionType) {
    return YES;
  }
  if (self.tag != aDispositionActionType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDispositionActionTypeAutomaticDelete:
    return [[self tagName] isEqual:[aDispositionActionType tagName]];
  case DBTEAMLOGDispositionActionTypeAutomaticPermanentlyDelete:
    return [[self tagName] isEqual:[aDispositionActionType tagName]];
  case DBTEAMLOGDispositionActionTypeOther:
    return [[self tagName] isEqual:[aDispositionActionType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDispositionActionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDispositionActionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAutomaticDelete]) {
    jsonDict[@".tag"] = @"automatic_delete";
  } else if ([valueObj isAutomaticPermanentlyDelete]) {
    jsonDict[@".tag"] = @"automatic_permanently_delete";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDispositionActionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"automatic_delete"]) {
    return [[DBTEAMLOGDispositionActionType alloc] initWithAutomaticDelete];
  } else if ([tag isEqualToString:@"automatic_permanently_delete"]) {
    return [[DBTEAMLOGDispositionActionType alloc] initWithAutomaticPermanentlyDelete];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDispositionActionType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDispositionActionType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesApproveRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)aDomainInvitesApproveRequestToJoinTeamDetails {
  if (self == aDomainInvitesApproveRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesApproveRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesApproveRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)aDomainInvitesApproveRequestToJoinTeamType {
  if (self == aDomainInvitesApproveRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesApproveRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesApproveRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)aDomainInvitesDeclineRequestToJoinTeamDetails {
  if (self == aDomainInvitesDeclineRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesDeclineRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesDeclineRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)aDomainInvitesDeclineRequestToJoinTeamType {
  if (self == aDomainInvitesDeclineRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesDeclineRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName numRecipients:(NSNumber *)numRecipients {
  [DBStoneValidators nonnullValidator:nil](domainName);
  [DBStoneValidators nonnullValidator:nil](numRecipients);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _numRecipients = numRecipients;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  result = prime * result + [self.numRecipients hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesEmailExistingUsersDetails:other];
}

- (BOOL)isEqualToDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)aDomainInvitesEmailExistingUsersDetails {
  if (self == aDomainInvitesEmailExistingUsersDetails) {
    return YES;
  }
  if (![self.domainName isEqual:aDomainInvitesEmailExistingUsersDetails.domainName]) {
    return NO;
  }
  if (![self.numRecipients isEqual:aDomainInvitesEmailExistingUsersDetails.numRecipients]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;
  jsonDict[@"num_recipients"] = valueObj.numRecipients;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];
  NSNumber *numRecipients = valueDict[@"num_recipients"];

  return [[DBTEAMLOGDomainInvitesEmailExistingUsersDetails alloc] initWithDomainName:domainName
                                                                       numRecipients:numRecipients];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesEmailExistingUsersType:other];
}

- (BOOL)isEqualToDomainInvitesEmailExistingUsersType:
    (DBTEAMLOGDomainInvitesEmailExistingUsersType *)aDomainInvitesEmailExistingUsersType {
  if (self == aDomainInvitesEmailExistingUsersType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesEmailExistingUsersType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesEmailExistingUsersTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesEmailExistingUsersType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesEmailExistingUsersType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesEmailExistingUsersType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesRequestToJoinTeamDetails:other];
}

- (BOOL)isEqualToDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)aDomainInvitesRequestToJoinTeamDetails {
  if (self == aDomainInvitesRequestToJoinTeamDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesRequestToJoinTeamType:other];
}

- (BOOL)isEqualToDomainInvitesRequestToJoinTeamType:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)aDomainInvitesRequestToJoinTeamType {
  if (self == aDomainInvitesRequestToJoinTeamType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesRequestToJoinTeamType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesRequestToJoinTeamTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesRequestToJoinTeamType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesRequestToJoinTeamType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesRequestToJoinTeamType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)aDomainInvitesSetInviteNewUserPrefToNoDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToNoDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToNoType:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToNoType:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)aDomainInvitesSetInviteNewUserPrefToNoType {
  if (self == aDomainInvitesSetInviteNewUserPrefToNoType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesSetInviteNewUserPrefToNoType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)aDomainInvitesSetInviteNewUserPrefToYesDetails {
  if (self == aDomainInvitesSetInviteNewUserPrefToYesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainInvitesSetInviteNewUserPrefToYesType:other];
}

- (BOOL)isEqualToDomainInvitesSetInviteNewUserPrefToYesType:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)aDomainInvitesSetInviteNewUserPrefToYesType {
  if (self == aDomainInvitesSetInviteNewUserPrefToYesType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainInvitesSetInviteNewUserPrefToYesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetails

#pragma mark - Constructors

- (instancetype)initWithDomainName:(NSString *)domainName verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators nonnullValidator:nil](domainName);

  self = [super init];
  if (self) {
    _domainName = domainName;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainName:(NSString *)domainName {
  return [self initWithDomainName:domainName verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainName hash];
  if (self.verificationMethod != nil) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainFailDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)aDomainVerificationAddDomainFailDetails {
  if (self == aDomainVerificationAddDomainFailDetails) {
    return YES;
  }
  if (![self.domainName isEqual:aDomainVerificationAddDomainFailDetails.domainName]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainFailDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainFailDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_name"] = valueObj.domainName;
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainFailDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *domainName = valueDict[@"domain_name"];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainFailDetails alloc] initWithDomainName:domainName
                                                                  verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainFailType:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainFailType:
    (DBTEAMLOGDomainVerificationAddDomainFailType *)aDomainVerificationAddDomainFailType {
  if (self == aDomainVerificationAddDomainFailType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationAddDomainFailType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainFailTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainFailType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainFailType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationAddDomainFailType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames
                 verificationMethod:(NSString *)verificationMethod {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
    _verificationMethod = verificationMethod;
  }
  return self;
}

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  return [self initWithDomainNames:domainNames verificationMethod:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];
  if (self.verificationMethod != nil) {
    result = prime * result + [self.verificationMethod hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainSuccessDetails:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)aDomainVerificationAddDomainSuccessDetails {
  if (self == aDomainVerificationAddDomainSuccessDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationAddDomainSuccessDetails.domainNames]) {
    return NO;
  }
  if (self.verificationMethod) {
    if (![self.verificationMethod isEqual:aDomainVerificationAddDomainSuccessDetails.verificationMethod]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];
  if (valueObj.verificationMethod) {
    jsonDict[@"verification_method"] = valueObj.verificationMethod;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];
  NSString *verificationMethod = valueDict[@"verification_method"] ?: nil;

  return [[DBTEAMLOGDomainVerificationAddDomainSuccessDetails alloc] initWithDomainNames:domainNames
                                                                      verificationMethod:verificationMethod];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationAddDomainSuccessType:other];
}

- (BOOL)isEqualToDomainVerificationAddDomainSuccessType:
    (DBTEAMLOGDomainVerificationAddDomainSuccessType *)aDomainVerificationAddDomainSuccessType {
  if (self == aDomainVerificationAddDomainSuccessType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationAddDomainSuccessType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationAddDomainSuccessTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationAddDomainSuccessType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationAddDomainSuccessType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationAddDomainSuccessType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetails

#pragma mark - Constructors

- (instancetype)initWithDomainNames:(NSArray<NSString *> *)domainNames {
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](domainNames);

  self = [super init];
  if (self) {
    _domainNames = domainNames;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.domainNames hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationRemoveDomainDetails:other];
}

- (BOOL)isEqualToDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)aDomainVerificationRemoveDomainDetails {
  if (self == aDomainVerificationRemoveDomainDetails) {
    return YES;
  }
  if (![self.domainNames isEqual:aDomainVerificationRemoveDomainDetails.domainNames]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationRemoveDomainDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"domain_names"] = [DBArraySerializer serialize:valueObj.domainNames
                                                 withBlock:^id(id elem0) {
                                                   return elem0;
                                                 }];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationRemoveDomainDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSArray<NSString *> *domainNames = [DBArraySerializer deserialize:valueDict[@"domain_names"]
                                                          withBlock:^id(id elem0) {
                                                            return elem0;
                                                          }];

  return [[DBTEAMLOGDomainVerificationRemoveDomainDetails alloc] initWithDomainNames:domainNames];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDomainVerificationRemoveDomainType:other];
}

- (BOOL)isEqualToDomainVerificationRemoveDomainType:
    (DBTEAMLOGDomainVerificationRemoveDomainType *)aDomainVerificationRemoveDomainType {
  if (self == aDomainVerificationRemoveDomainType) {
    return YES;
  }
  if (![self.description_ isEqual:aDomainVerificationRemoveDomainType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDomainVerificationRemoveDomainTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDomainVerificationRemoveDomainType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDomainVerificationRemoveDomainType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDomainVerificationRemoveDomainType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDownloadPolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDownloadPolicyType

#pragma mark - Constructors

- (instancetype)initWithAllow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeAllow;
  }
  return self;
}

- (instancetype)initWithDisallow {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeDisallow;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDownloadPolicyTypeOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAllow {
  return _tag == DBTEAMLOGDownloadPolicyTypeAllow;
}

- (BOOL)isDisallow {
  return _tag == DBTEAMLOGDownloadPolicyTypeDisallow;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDownloadPolicyTypeOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    return @"DBTEAMLOGDownloadPolicyTypeAllow";
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    return @"DBTEAMLOGDownloadPolicyTypeDisallow";
  case DBTEAMLOGDownloadPolicyTypeOther:
    return @"DBTEAMLOGDownloadPolicyTypeOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDownloadPolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDownloadPolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDownloadPolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDownloadPolicyTypeOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDownloadPolicyType:other];
}

- (BOOL)isEqualToDownloadPolicyType:(DBTEAMLOGDownloadPolicyType *)aDownloadPolicyType {
  if (self == aDownloadPolicyType) {
    return YES;
  }
  if (self.tag != aDownloadPolicyType.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDownloadPolicyTypeAllow:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  case DBTEAMLOGDownloadPolicyTypeDisallow:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  case DBTEAMLOGDownloadPolicyTypeOther:
    return [[self tagName] isEqual:[aDownloadPolicyType tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDownloadPolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDownloadPolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAllow]) {
    jsonDict[@".tag"] = @"allow";
  } else if ([valueObj isDisallow]) {
    jsonDict[@".tag"] = @"disallow";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDownloadPolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"allow"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithAllow];
  } else if ([tag isEqualToString:@"disallow"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithDisallow];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDownloadPolicyType alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsExportedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsExportedDetails

#pragma mark - Constructors

- (instancetype)initWithPlatform:(NSString *)platform {
  [DBStoneValidators nonnullValidator:nil](platform);

  self = [super init];
  if (self) {
    _platform = platform;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsExportedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsExportedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsExportedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.platform hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsExportedDetails:other];
}

- (BOOL)isEqualToDropboxPasswordsExportedDetails:
    (DBTEAMLOGDropboxPasswordsExportedDetails *)aDropboxPasswordsExportedDetails {
  if (self == aDropboxPasswordsExportedDetails) {
    return YES;
  }
  if (![self.platform isEqual:aDropboxPasswordsExportedDetails.platform]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsExportedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsExportedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"platform"] = valueObj.platform;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsExportedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *platform = valueDict[@"platform"];

  return [[DBTEAMLOGDropboxPasswordsExportedDetails alloc] initWithPlatform:platform];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsExportedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsExportedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsExportedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsExportedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsExportedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsExportedType:other];
}

- (BOOL)isEqualToDropboxPasswordsExportedType:(DBTEAMLOGDropboxPasswordsExportedType *)aDropboxPasswordsExportedType {
  if (self == aDropboxPasswordsExportedType) {
    return YES;
  }
  if (![self.description_ isEqual:aDropboxPasswordsExportedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsExportedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsExportedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsExportedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDropboxPasswordsExportedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails

#pragma mark - Constructors

- (instancetype)initWithIsFirstDevice:(NSNumber *)isFirstDevice platform:(NSString *)platform {
  [DBStoneValidators nonnullValidator:nil](isFirstDevice);
  [DBStoneValidators nonnullValidator:nil](platform);

  self = [super init];
  if (self) {
    _isFirstDevice = isFirstDevice;
    _platform = platform;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.isFirstDevice hash];
  result = prime * result + [self.platform hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsNewDeviceEnrolledDetails:other];
}

- (BOOL)isEqualToDropboxPasswordsNewDeviceEnrolledDetails:
    (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *)aDropboxPasswordsNewDeviceEnrolledDetails {
  if (self == aDropboxPasswordsNewDeviceEnrolledDetails) {
    return YES;
  }
  if (![self.isFirstDevice isEqual:aDropboxPasswordsNewDeviceEnrolledDetails.isFirstDevice]) {
    return NO;
  }
  if (![self.platform isEqual:aDropboxPasswordsNewDeviceEnrolledDetails.platform]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"is_first_device"] = valueObj.isFirstDevice;
  jsonDict[@"platform"] = valueObj.platform;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSNumber *isFirstDevice = valueDict[@"is_first_device"];
  NSString *platform = valueDict[@"platform"];

  return
      [[DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails alloc] initWithIsFirstDevice:isFirstDevice platform:platform];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsNewDeviceEnrolledType:other];
}

- (BOOL)isEqualToDropboxPasswordsNewDeviceEnrolledType:
    (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType *)aDropboxPasswordsNewDeviceEnrolledType {
  if (self == aDropboxPasswordsNewDeviceEnrolledType) {
    return YES;
  }
  if (![self.description_ isEqual:aDropboxPasswordsNewDeviceEnrolledType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsNewDeviceEnrolledTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDropboxPasswordsNewDeviceEnrolledType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsPolicy

#pragma mark - Constructors

- (instancetype)initWithDefault_ {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDropboxPasswordsPolicyDefault_;
  }
  return self;
}

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDropboxPasswordsPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDropboxPasswordsPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGDropboxPasswordsPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDefault_ {
  return _tag == DBTEAMLOGDropboxPasswordsPolicyDefault_;
}

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGDropboxPasswordsPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGDropboxPasswordsPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGDropboxPasswordsPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGDropboxPasswordsPolicyDefault_:
    return @"DBTEAMLOGDropboxPasswordsPolicyDefault_";
  case DBTEAMLOGDropboxPasswordsPolicyDisabled:
    return @"DBTEAMLOGDropboxPasswordsPolicyDisabled";
  case DBTEAMLOGDropboxPasswordsPolicyEnabled:
    return @"DBTEAMLOGDropboxPasswordsPolicyEnabled";
  case DBTEAMLOGDropboxPasswordsPolicyOther:
    return @"DBTEAMLOGDropboxPasswordsPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGDropboxPasswordsPolicyDefault_:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDropboxPasswordsPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDropboxPasswordsPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGDropboxPasswordsPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsPolicy:other];
}

- (BOOL)isEqualToDropboxPasswordsPolicy:(DBTEAMLOGDropboxPasswordsPolicy *)aDropboxPasswordsPolicy {
  if (self == aDropboxPasswordsPolicy) {
    return YES;
  }
  if (self.tag != aDropboxPasswordsPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGDropboxPasswordsPolicyDefault_:
    return [[self tagName] isEqual:[aDropboxPasswordsPolicy tagName]];
  case DBTEAMLOGDropboxPasswordsPolicyDisabled:
    return [[self tagName] isEqual:[aDropboxPasswordsPolicy tagName]];
  case DBTEAMLOGDropboxPasswordsPolicyEnabled:
    return [[self tagName] isEqual:[aDropboxPasswordsPolicy tagName]];
  case DBTEAMLOGDropboxPasswordsPolicyOther:
    return [[self tagName] isEqual:[aDropboxPasswordsPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDefault_]) {
    jsonDict[@".tag"] = @"default";
  } else if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"default"]) {
    return [[DBTEAMLOGDropboxPasswordsPolicy alloc] initWithDefault_];
  } else if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGDropboxPasswordsPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGDropboxPasswordsPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGDropboxPasswordsPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGDropboxPasswordsPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsPolicy.h"
#import "DBTEAMLOGDropboxPasswordsPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGDropboxPasswordsPolicy *)dNewValue
                    previousValue:(DBTEAMLOGDropboxPasswordsPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsPolicyChangedDetails:other];
}

- (BOOL)isEqualToDropboxPasswordsPolicyChangedDetails:
    (DBTEAMLOGDropboxPasswordsPolicyChangedDetails *)aDropboxPasswordsPolicyChangedDetails {
  if (self == aDropboxPasswordsPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:aDropboxPasswordsPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:aDropboxPasswordsPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGDropboxPasswordsPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGDropboxPasswordsPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGDropboxPasswordsPolicy *dNewValue =
      [DBTEAMLOGDropboxPasswordsPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGDropboxPasswordsPolicy *previousValue =
      [DBTEAMLOGDropboxPasswordsPolicySerializer deserialize:valueDict[@"previous_value"]];

  return
      [[DBTEAMLOGDropboxPasswordsPolicyChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDropboxPasswordsPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGDropboxPasswordsPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDropboxPasswordsPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDropboxPasswordsPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDropboxPasswordsPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDropboxPasswordsPolicyChangedType:other];
}

- (BOOL)isEqualToDropboxPasswordsPolicyChangedType:
    (DBTEAMLOGDropboxPasswordsPolicyChangedType *)aDropboxPasswordsPolicyChangedType {
  if (self == aDropboxPasswordsPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:aDropboxPasswordsPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDropboxPasswordsPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDropboxPasswordsPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDropboxPasswordsPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGDropboxPasswordsPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGDurationLogInfo.h"
#import "DBTEAMLOGTimeUnit.h"

#pragma mark - API Object

@implementation DBTEAMLOGDurationLogInfo

#pragma mark - Constructors

- (instancetype)initWithUnit:(DBTEAMLOGTimeUnit *)unit amount:(NSNumber *)amount {
  [DBStoneValidators nonnullValidator:nil](unit);
  [DBStoneValidators nonnullValidator:nil](amount);

  self = [super init];
  if (self) {
    _unit = unit;
    _amount = amount;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGDurationLogInfoSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGDurationLogInfoSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGDurationLogInfoSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.unit hash];
  result = prime * result + [self.amount hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToDurationLogInfo:other];
}

- (BOOL)isEqualToDurationLogInfo:(DBTEAMLOGDurationLogInfo *)aDurationLogInfo {
  if (self == aDurationLogInfo) {
    return YES;
  }
  if (![self.unit isEqual:aDurationLogInfo.unit]) {
    return NO;
  }
  if (![self.amount isEqual:aDurationLogInfo.amount]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGDurationLogInfoSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGDurationLogInfo *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"unit"] = [DBTEAMLOGTimeUnitSerializer serialize:valueObj.unit];
  jsonDict[@"amount"] = valueObj.amount;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGDurationLogInfo *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGTimeUnit *unit = [DBTEAMLOGTimeUnitSerializer deserialize:valueDict[@"unit"]];
  NSNumber *amount = valueDict[@"amount"];

  return [[DBTEAMLOGDurationLogInfo alloc] initWithUnit:unit amount:amount];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmailIngestPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmailIngestPolicy

#pragma mark - Constructors

- (instancetype)initWithDisabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEmailIngestPolicyDisabled;
  }
  return self;
}

- (instancetype)initWithEnabled {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEmailIngestPolicyEnabled;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEmailIngestPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isDisabled {
  return _tag == DBTEAMLOGEmailIngestPolicyDisabled;
}

- (BOOL)isEnabled {
  return _tag == DBTEAMLOGEmailIngestPolicyEnabled;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEmailIngestPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEmailIngestPolicyDisabled:
    return @"DBTEAMLOGEmailIngestPolicyDisabled";
  case DBTEAMLOGEmailIngestPolicyEnabled:
    return @"DBTEAMLOGEmailIngestPolicyEnabled";
  case DBTEAMLOGEmailIngestPolicyOther:
    return @"DBTEAMLOGEmailIngestPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmailIngestPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmailIngestPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmailIngestPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEmailIngestPolicyDisabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEmailIngestPolicyEnabled:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEmailIngestPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmailIngestPolicy:other];
}

- (BOOL)isEqualToEmailIngestPolicy:(DBTEAMLOGEmailIngestPolicy *)anEmailIngestPolicy {
  if (self == anEmailIngestPolicy) {
    return YES;
  }
  if (self.tag != anEmailIngestPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEmailIngestPolicyDisabled:
    return [[self tagName] isEqual:[anEmailIngestPolicy tagName]];
  case DBTEAMLOGEmailIngestPolicyEnabled:
    return [[self tagName] isEqual:[anEmailIngestPolicy tagName]];
  case DBTEAMLOGEmailIngestPolicyOther:
    return [[self tagName] isEqual:[anEmailIngestPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmailIngestPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmailIngestPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isDisabled]) {
    jsonDict[@".tag"] = @"disabled";
  } else if ([valueObj isEnabled]) {
    jsonDict[@".tag"] = @"enabled";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmailIngestPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"disabled"]) {
    return [[DBTEAMLOGEmailIngestPolicy alloc] initWithDisabled];
  } else if ([tag isEqualToString:@"enabled"]) {
    return [[DBTEAMLOGEmailIngestPolicy alloc] initWithEnabled];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEmailIngestPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEmailIngestPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmailIngestPolicy.h"
#import "DBTEAMLOGEmailIngestPolicyChangedDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmailIngestPolicyChangedDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMLOGEmailIngestPolicy *)dNewValue
                    previousValue:(DBTEAMLOGEmailIngestPolicy *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);
  [DBStoneValidators nonnullValidator:nil](previousValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  result = prime * result + [self.previousValue hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmailIngestPolicyChangedDetails:other];
}

- (BOOL)isEqualToEmailIngestPolicyChangedDetails:
    (DBTEAMLOGEmailIngestPolicyChangedDetails *)anEmailIngestPolicyChangedDetails {
  if (self == anEmailIngestPolicyChangedDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anEmailIngestPolicyChangedDetails.dNewValue]) {
    return NO;
  }
  if (![self.previousValue isEqual:anEmailIngestPolicyChangedDetails.previousValue]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmailIngestPolicyChangedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMLOGEmailIngestPolicySerializer serialize:valueObj.dNewValue];
  jsonDict[@"previous_value"] = [DBTEAMLOGEmailIngestPolicySerializer serialize:valueObj.previousValue];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmailIngestPolicyChangedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGEmailIngestPolicy *dNewValue = [DBTEAMLOGEmailIngestPolicySerializer deserialize:valueDict[@"new_value"]];
  DBTEAMLOGEmailIngestPolicy *previousValue =
      [DBTEAMLOGEmailIngestPolicySerializer deserialize:valueDict[@"previous_value"]];

  return [[DBTEAMLOGEmailIngestPolicyChangedDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmailIngestPolicyChangedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmailIngestPolicyChangedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmailIngestPolicyChangedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmailIngestPolicyChangedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmailIngestPolicyChangedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmailIngestPolicyChangedType:other];
}

- (BOOL)isEqualToEmailIngestPolicyChangedType:(DBTEAMLOGEmailIngestPolicyChangedType *)anEmailIngestPolicyChangedType {
  if (self == anEmailIngestPolicyChangedType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmailIngestPolicyChangedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmailIngestPolicyChangedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmailIngestPolicyChangedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmailIngestPolicyChangedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmailIngestPolicyChangedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmailIngestReceiveFileDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmailIngestReceiveFileDetails

#pragma mark - Constructors

- (instancetype)initWithInboxName:(NSString *)inboxName
                  attachmentNames:(NSArray<NSString *> *)attachmentNames
                          subject:(NSString *)subject
                         fromName:(NSString *)fromName
                        fromEmail:(NSString *)fromEmail {
  [DBStoneValidators nonnullValidator:nil](inboxName);
  [DBStoneValidators
   nonnullValidator:[DBStoneValidators arrayValidator:nil
                                             maxItems:nil
                                        itemValidator:[DBStoneValidators nonnullValidator:nil]]](attachmentNames);
  [DBStoneValidators nullableValidator:[DBStoneValidators stringValidator:nil maxLength:@(255) pattern:nil]](fromEmail);

  self = [super init];
  if (self) {
    _inboxName = inboxName;
    _attachmentNames = attachmentNames;
    _subject = subject;
    _fromName = fromName;
    _fromEmail = fromEmail;
  }
  return self;
}

- (instancetype)initWithInboxName:(NSString *)inboxName attachmentNames:(NSArray<NSString *> *)attachmentNames {
  return [self initWithInboxName:inboxName attachmentNames:attachmentNames subject:nil fromName:nil fromEmail:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmailIngestReceiveFileDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmailIngestReceiveFileDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmailIngestReceiveFileDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.inboxName hash];
  result = prime * result + [self.attachmentNames hash];
  if (self.subject != nil) {
    result = prime * result + [self.subject hash];
  }
  if (self.fromName != nil) {
    result = prime * result + [self.fromName hash];
  }
  if (self.fromEmail != nil) {
    result = prime * result + [self.fromEmail hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmailIngestReceiveFileDetails:other];
}

- (BOOL)isEqualToEmailIngestReceiveFileDetails:
    (DBTEAMLOGEmailIngestReceiveFileDetails *)anEmailIngestReceiveFileDetails {
  if (self == anEmailIngestReceiveFileDetails) {
    return YES;
  }
  if (![self.inboxName isEqual:anEmailIngestReceiveFileDetails.inboxName]) {
    return NO;
  }
  if (![self.attachmentNames isEqual:anEmailIngestReceiveFileDetails.attachmentNames]) {
    return NO;
  }
  if (self.subject) {
    if (![self.subject isEqual:anEmailIngestReceiveFileDetails.subject]) {
      return NO;
    }
  }
  if (self.fromName) {
    if (![self.fromName isEqual:anEmailIngestReceiveFileDetails.fromName]) {
      return NO;
    }
  }
  if (self.fromEmail) {
    if (![self.fromEmail isEqual:anEmailIngestReceiveFileDetails.fromEmail]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmailIngestReceiveFileDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmailIngestReceiveFileDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"inbox_name"] = valueObj.inboxName;
  jsonDict[@"attachment_names"] = [DBArraySerializer serialize:valueObj.attachmentNames
                                                     withBlock:^id(id elem0) {
                                                       return elem0;
                                                     }];
  if (valueObj.subject) {
    jsonDict[@"subject"] = valueObj.subject;
  }
  if (valueObj.fromName) {
    jsonDict[@"from_name"] = valueObj.fromName;
  }
  if (valueObj.fromEmail) {
    jsonDict[@"from_email"] = valueObj.fromEmail;
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmailIngestReceiveFileDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *inboxName = valueDict[@"inbox_name"];
  NSArray<NSString *> *attachmentNames = [DBArraySerializer deserialize:valueDict[@"attachment_names"]
                                                              withBlock:^id(id elem0) {
                                                                return elem0;
                                                              }];
  NSString *subject = valueDict[@"subject"] ?: nil;
  NSString *fromName = valueDict[@"from_name"] ?: nil;
  NSString *fromEmail = valueDict[@"from_email"] ?: nil;

  return [[DBTEAMLOGEmailIngestReceiveFileDetails alloc] initWithInboxName:inboxName
                                                           attachmentNames:attachmentNames
                                                                   subject:subject
                                                                  fromName:fromName
                                                                 fromEmail:fromEmail];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmailIngestReceiveFileType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmailIngestReceiveFileType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmailIngestReceiveFileTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmailIngestReceiveFileTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmailIngestReceiveFileTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmailIngestReceiveFileType:other];
}

- (BOOL)isEqualToEmailIngestReceiveFileType:(DBTEAMLOGEmailIngestReceiveFileType *)anEmailIngestReceiveFileType {
  if (self == anEmailIngestReceiveFileType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmailIngestReceiveFileType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmailIngestReceiveFileTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmailIngestReceiveFileType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmailIngestReceiveFileType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmailIngestReceiveFileType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmAddExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmAddExceptionDetails:other];
}

- (BOOL)isEqualToEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)anEmmAddExceptionDetails {
  if (self == anEmmAddExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmAddExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmAddExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmAddExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmAddExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmAddExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmAddExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmAddExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmAddExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmAddExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmAddExceptionType:other];
}

- (BOOL)isEqualToEmmAddExceptionType:(DBTEAMLOGEmmAddExceptionType *)anEmmAddExceptionType {
  if (self == anEmmAddExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmAddExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmAddExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmAddExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmAddExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmAddExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMPOLICIESEmmState.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmChangePolicyDetails

#pragma mark - Constructors

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESEmmState *)dNewValue
                    previousValue:(DBTEAMPOLICIESEmmState *)previousValue {
  [DBStoneValidators nonnullValidator:nil](dNewValue);

  self = [super init];
  if (self) {
    _dNewValue = dNewValue;
    _previousValue = previousValue;
  }
  return self;
}

- (instancetype)initWithDNewValue:(DBTEAMPOLICIESEmmState *)dNewValue {
  return [self initWithDNewValue:dNewValue previousValue:nil];
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.dNewValue hash];
  if (self.previousValue != nil) {
    result = prime * result + [self.previousValue hash];
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmChangePolicyDetails:other];
}

- (BOOL)isEqualToEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)anEmmChangePolicyDetails {
  if (self == anEmmChangePolicyDetails) {
    return YES;
  }
  if (![self.dNewValue isEqual:anEmmChangePolicyDetails.dNewValue]) {
    return NO;
  }
  if (self.previousValue) {
    if (![self.previousValue isEqual:anEmmChangePolicyDetails.previousValue]) {
      return NO;
    }
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmChangePolicyDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmChangePolicyDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"new_value"] = [DBTEAMPOLICIESEmmStateSerializer serialize:valueObj.dNewValue];
  if (valueObj.previousValue) {
    jsonDict[@"previous_value"] = [DBTEAMPOLICIESEmmStateSerializer serialize:valueObj.previousValue];
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmChangePolicyDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMPOLICIESEmmState *dNewValue = [DBTEAMPOLICIESEmmStateSerializer deserialize:valueDict[@"new_value"]];
  DBTEAMPOLICIESEmmState *previousValue =
      valueDict[@"previous_value"] ? [DBTEAMPOLICIESEmmStateSerializer deserialize:valueDict[@"previous_value"]] : nil;

  return [[DBTEAMLOGEmmChangePolicyDetails alloc] initWithDNewValue:dNewValue previousValue:previousValue];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmChangePolicyType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmChangePolicyType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmChangePolicyTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmChangePolicyTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmChangePolicyTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmChangePolicyType:other];
}

- (BOOL)isEqualToEmmChangePolicyType:(DBTEAMLOGEmmChangePolicyType *)anEmmChangePolicyType {
  if (self == anEmmChangePolicyType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmChangePolicyType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmChangePolicyTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmChangePolicyType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmChangePolicyType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmChangePolicyType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateExceptionsReportDetails:other];
}

- (BOOL)isEqualToEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)anEmmCreateExceptionsReportDetails {
  if (self == anEmmCreateExceptionsReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateExceptionsReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateExceptionsReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateExceptionsReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateExceptionsReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateExceptionsReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateExceptionsReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateExceptionsReportTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmCreateExceptionsReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateExceptionsReportType:other];
}

- (BOOL)isEqualToEmmCreateExceptionsReportType:
    (DBTEAMLOGEmmCreateExceptionsReportType *)anEmmCreateExceptionsReportType {
  if (self == anEmmCreateExceptionsReportType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmCreateExceptionsReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateExceptionsReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateExceptionsReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateExceptionsReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmCreateExceptionsReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateUsageReportDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmCreateUsageReportDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateUsageReportDetails:other];
}

- (BOOL)isEqualToEmmCreateUsageReportDetails:(DBTEAMLOGEmmCreateUsageReportDetails *)anEmmCreateUsageReportDetails {
  if (self == anEmmCreateUsageReportDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateUsageReportDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateUsageReportDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateUsageReportDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmCreateUsageReportDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmCreateUsageReportType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmCreateUsageReportType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmCreateUsageReportTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmCreateUsageReportTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmCreateUsageReportTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmCreateUsageReportType:other];
}

- (BOOL)isEqualToEmmCreateUsageReportType:(DBTEAMLOGEmmCreateUsageReportType *)anEmmCreateUsageReportType {
  if (self == anEmmCreateUsageReportType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmCreateUsageReportType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmCreateUsageReportTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmCreateUsageReportType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmCreateUsageReportType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmCreateUsageReportType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmErrorDetails.h"
#import "DBTEAMLOGFailureDetailsLogInfo.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmErrorDetails

#pragma mark - Constructors

- (instancetype)initWithErrorDetails:(DBTEAMLOGFailureDetailsLogInfo *)errorDetails {
  [DBStoneValidators nonnullValidator:nil](errorDetails);

  self = [super init];
  if (self) {
    _errorDetails = errorDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmErrorDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmErrorDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmErrorDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.errorDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmErrorDetails:other];
}

- (BOOL)isEqualToEmmErrorDetails:(DBTEAMLOGEmmErrorDetails *)anEmmErrorDetails {
  if (self == anEmmErrorDetails) {
    return YES;
  }
  if (![self.errorDetails isEqual:anEmmErrorDetails.errorDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmErrorDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmErrorDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"error_details"] = [DBTEAMLOGFailureDetailsLogInfoSerializer serialize:valueObj.errorDetails];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmErrorDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFailureDetailsLogInfo *errorDetails =
      [DBTEAMLOGFailureDetailsLogInfoSerializer deserialize:valueDict[@"error_details"]];

  return [[DBTEAMLOGEmmErrorDetails alloc] initWithErrorDetails:errorDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmErrorType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmErrorType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmErrorTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmErrorTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmErrorTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmErrorType:other];
}

- (BOOL)isEqualToEmmErrorType:(DBTEAMLOGEmmErrorType *)anEmmErrorType {
  if (self == anEmmErrorType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmErrorType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmErrorTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmErrorType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmErrorType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmErrorType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRefreshAuthTokenDetails:other];
}

- (BOOL)isEqualToEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)anEmmRefreshAuthTokenDetails {
  if (self == anEmmRefreshAuthTokenDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRefreshAuthTokenDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRefreshAuthTokenDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRefreshAuthTokenDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRefreshAuthTokenType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRefreshAuthTokenType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRefreshAuthTokenTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRefreshAuthTokenTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmRefreshAuthTokenTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRefreshAuthTokenType:other];
}

- (BOOL)isEqualToEmmRefreshAuthTokenType:(DBTEAMLOGEmmRefreshAuthTokenType *)anEmmRefreshAuthTokenType {
  if (self == anEmmRefreshAuthTokenType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmRefreshAuthTokenType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRefreshAuthTokenTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRefreshAuthTokenType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRefreshAuthTokenType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmRefreshAuthTokenType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRemoveExceptionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmRemoveExceptionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRemoveExceptionDetails:other];
}

- (BOOL)isEqualToEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)anEmmRemoveExceptionDetails {
  if (self == anEmmRemoveExceptionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRemoveExceptionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRemoveExceptionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRemoveExceptionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEmmRemoveExceptionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEmmRemoveExceptionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEmmRemoveExceptionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEmmRemoveExceptionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEmmRemoveExceptionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEmmRemoveExceptionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEmmRemoveExceptionType:other];
}

- (BOOL)isEqualToEmmRemoveExceptionType:(DBTEAMLOGEmmRemoveExceptionType *)anEmmRemoveExceptionType {
  if (self == anEmmRemoveExceptionType) {
    return YES;
  }
  if (![self.description_ isEqual:anEmmRemoveExceptionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEmmRemoveExceptionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEmmRemoveExceptionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEmmRemoveExceptionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEmmRemoveExceptionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnabledDomainInvitesDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEnabledDomainInvitesDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnabledDomainInvitesDetails:other];
}

- (BOOL)isEqualToEnabledDomainInvitesDetails:(DBTEAMLOGEnabledDomainInvitesDetails *)anEnabledDomainInvitesDetails {
  if (self == anEnabledDomainInvitesDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnabledDomainInvitesDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnabledDomainInvitesDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnabledDomainInvitesDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEnabledDomainInvitesDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnabledDomainInvitesType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnabledDomainInvitesType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnabledDomainInvitesTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnabledDomainInvitesTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEnabledDomainInvitesTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnabledDomainInvitesType:other];
}

- (BOOL)isEqualToEnabledDomainInvitesType:(DBTEAMLOGEnabledDomainInvitesType *)anEnabledDomainInvitesType {
  if (self == anEnabledDomainInvitesType) {
    return YES;
  }
  if (![self.description_ isEqual:anEnabledDomainInvitesType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnabledDomainInvitesTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnabledDomainInvitesType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnabledDomainInvitesType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEnabledDomainInvitesType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails.h"
#import "DBTEAMLOGFedExtraDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails

#pragma mark - Constructors

- (instancetype)initWithFederationExtraDetails:(DBTEAMLOGFedExtraDetails *)federationExtraDetails {
  [DBStoneValidators nonnullValidator:nil](federationExtraDetails);

  self = [super init];
  if (self) {
    _federationExtraDetails = federationExtraDetails;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.federationExtraDetails hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEndedEnterpriseAdminSessionDeprecatedDetails:other];
}

- (BOOL)isEqualToEndedEnterpriseAdminSessionDeprecatedDetails:
    (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *)anEndedEnterpriseAdminSessionDeprecatedDetails {
  if (self == anEndedEnterpriseAdminSessionDeprecatedDetails) {
    return YES;
  }
  if (![self.federationExtraDetails isEqual:anEndedEnterpriseAdminSessionDeprecatedDetails.federationExtraDetails]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"federation_extra_details"] =
      [DBTEAMLOGFedExtraDetailsSerializer serialize:valueObj.federationExtraDetails];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  DBTEAMLOGFedExtraDetails *federationExtraDetails =
      [DBTEAMLOGFedExtraDetailsSerializer deserialize:valueDict[@"federation_extra_details"]];

  return [[DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails alloc]
      initWithFederationExtraDetails:federationExtraDetails];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEndedEnterpriseAdminSessionDeprecatedType:other];
}

- (BOOL)isEqualToEndedEnterpriseAdminSessionDeprecatedType:
    (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType *)anEndedEnterpriseAdminSessionDeprecatedType {
  if (self == anEndedEnterpriseAdminSessionDeprecatedType) {
    return YES;
  }
  if (![self.description_ isEqual:anEndedEnterpriseAdminSessionDeprecatedType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDetails

#pragma mark - Constructors

- (instancetype)initDefault {

  self = [super init];
  if (self) {
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEndedEnterpriseAdminSessionDetails:other];
}

- (BOOL)isEqualToEndedEnterpriseAdminSessionDetails:
    (DBTEAMLOGEndedEnterpriseAdminSessionDetails *)anEndedEnterpriseAdminSessionDetails {
  if (self == anEndedEnterpriseAdminSessionDetails) {
    return YES;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEndedEnterpriseAdminSessionDetails *)valueObj {
#pragma unused(valueObj)
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEndedEnterpriseAdminSessionDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
#pragma unused(valueDict)

  return [[DBTEAMLOGEndedEnterpriseAdminSessionDetails alloc] initDefault];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEndedEnterpriseAdminSessionTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEndedEnterpriseAdminSessionTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEndedEnterpriseAdminSessionTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEndedEnterpriseAdminSessionType:other];
}

- (BOOL)isEqualToEndedEnterpriseAdminSessionType:
    (DBTEAMLOGEndedEnterpriseAdminSessionType *)anEndedEnterpriseAdminSessionType {
  if (self == anEndedEnterpriseAdminSessionType) {
    return YES;
  }
  if (![self.description_ isEqual:anEndedEnterpriseAdminSessionType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEndedEnterpriseAdminSessionTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEndedEnterpriseAdminSessionType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEndedEnterpriseAdminSessionType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEndedEnterpriseAdminSessionType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnforceLinkPasswordPolicy.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnforceLinkPasswordPolicy

#pragma mark - Constructors

- (instancetype)initWithOptional {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnforceLinkPasswordPolicyOptional;
  }
  return self;
}

- (instancetype)initWithRequired {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnforceLinkPasswordPolicyRequired;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEnforceLinkPasswordPolicyOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isOptional {
  return _tag == DBTEAMLOGEnforceLinkPasswordPolicyOptional;
}

- (BOOL)isRequired {
  return _tag == DBTEAMLOGEnforceLinkPasswordPolicyRequired;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEnforceLinkPasswordPolicyOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEnforceLinkPasswordPolicyOptional:
    return @"DBTEAMLOGEnforceLinkPasswordPolicyOptional";
  case DBTEAMLOGEnforceLinkPasswordPolicyRequired:
    return @"DBTEAMLOGEnforceLinkPasswordPolicyRequired";
  case DBTEAMLOGEnforceLinkPasswordPolicyOther:
    return @"DBTEAMLOGEnforceLinkPasswordPolicyOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnforceLinkPasswordPolicySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnforceLinkPasswordPolicySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEnforceLinkPasswordPolicySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEnforceLinkPasswordPolicyOptional:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEnforceLinkPasswordPolicyRequired:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEnforceLinkPasswordPolicyOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnforceLinkPasswordPolicy:other];
}

- (BOOL)isEqualToEnforceLinkPasswordPolicy:(DBTEAMLOGEnforceLinkPasswordPolicy *)anEnforceLinkPasswordPolicy {
  if (self == anEnforceLinkPasswordPolicy) {
    return YES;
  }
  if (self.tag != anEnforceLinkPasswordPolicy.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEnforceLinkPasswordPolicyOptional:
    return [[self tagName] isEqual:[anEnforceLinkPasswordPolicy tagName]];
  case DBTEAMLOGEnforceLinkPasswordPolicyRequired:
    return [[self tagName] isEqual:[anEnforceLinkPasswordPolicy tagName]];
  case DBTEAMLOGEnforceLinkPasswordPolicyOther:
    return [[self tagName] isEqual:[anEnforceLinkPasswordPolicy tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnforceLinkPasswordPolicySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnforceLinkPasswordPolicy *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isOptional]) {
    jsonDict[@".tag"] = @"optional";
  } else if ([valueObj isRequired]) {
    jsonDict[@".tag"] = @"required";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnforceLinkPasswordPolicy *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"optional"]) {
    return [[DBTEAMLOGEnforceLinkPasswordPolicy alloc] initWithOptional];
  } else if ([tag isEqualToString:@"required"]) {
    return [[DBTEAMLOGEnforceLinkPasswordPolicy alloc] initWithRequired];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEnforceLinkPasswordPolicy alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEnforceLinkPasswordPolicy alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnterpriseSettingsLockingDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnterpriseSettingsLockingDetails

#pragma mark - Constructors

- (instancetype)initWithTeamName:(NSString *)teamName
                    settingsPageName:(NSString *)settingsPageName
    previousSettingsPageLockingState:(NSString *)previousSettingsPageLockingState
        dNewSettingsPageLockingState:(NSString *)dNewSettingsPageLockingState {
  [DBStoneValidators nonnullValidator:nil](teamName);
  [DBStoneValidators nonnullValidator:nil](settingsPageName);
  [DBStoneValidators nonnullValidator:nil](previousSettingsPageLockingState);
  [DBStoneValidators nonnullValidator:nil](dNewSettingsPageLockingState);

  self = [super init];
  if (self) {
    _teamName = teamName;
    _settingsPageName = settingsPageName;
    _previousSettingsPageLockingState = previousSettingsPageLockingState;
    _dNewSettingsPageLockingState = dNewSettingsPageLockingState;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.teamName hash];
  result = prime * result + [self.settingsPageName hash];
  result = prime * result + [self.previousSettingsPageLockingState hash];
  result = prime * result + [self.dNewSettingsPageLockingState hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnterpriseSettingsLockingDetails:other];
}

- (BOOL)isEqualToEnterpriseSettingsLockingDetails:
    (DBTEAMLOGEnterpriseSettingsLockingDetails *)anEnterpriseSettingsLockingDetails {
  if (self == anEnterpriseSettingsLockingDetails) {
    return YES;
  }
  if (![self.teamName isEqual:anEnterpriseSettingsLockingDetails.teamName]) {
    return NO;
  }
  if (![self.settingsPageName isEqual:anEnterpriseSettingsLockingDetails.settingsPageName]) {
    return NO;
  }
  if (![self.previousSettingsPageLockingState
          isEqual:anEnterpriseSettingsLockingDetails.previousSettingsPageLockingState]) {
    return NO;
  }
  if (![self.dNewSettingsPageLockingState isEqual:anEnterpriseSettingsLockingDetails.dNewSettingsPageLockingState]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnterpriseSettingsLockingDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"team_name"] = valueObj.teamName;
  jsonDict[@"settings_page_name"] = valueObj.settingsPageName;
  jsonDict[@"previous_settings_page_locking_state"] = valueObj.previousSettingsPageLockingState;
  jsonDict[@"new_settings_page_locking_state"] = valueObj.dNewSettingsPageLockingState;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnterpriseSettingsLockingDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *teamName = valueDict[@"team_name"];
  NSString *settingsPageName = valueDict[@"settings_page_name"];
  NSString *previousSettingsPageLockingState = valueDict[@"previous_settings_page_locking_state"];
  NSString *dNewSettingsPageLockingState = valueDict[@"new_settings_page_locking_state"];

  return [[DBTEAMLOGEnterpriseSettingsLockingDetails alloc] initWithTeamName:teamName
                                                            settingsPageName:settingsPageName
                                            previousSettingsPageLockingState:previousSettingsPageLockingState
                                                dNewSettingsPageLockingState:dNewSettingsPageLockingState];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEnterpriseSettingsLockingType.h"

#pragma mark - API Object

@implementation DBTEAMLOGEnterpriseSettingsLockingType

#pragma mark - Constructors

- (instancetype)initWithDescription_:(NSString *)description_ {
  [DBStoneValidators nonnullValidator:nil](description_);

  self = [super init];
  if (self) {
    _description_ = description_;
  }
  return self;
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEnterpriseSettingsLockingTypeSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEnterpriseSettingsLockingTypeSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEnterpriseSettingsLockingTypeSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  result = prime * result + [self.description_ hash];

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEnterpriseSettingsLockingType:other];
}

- (BOOL)isEqualToEnterpriseSettingsLockingType:
    (DBTEAMLOGEnterpriseSettingsLockingType *)anEnterpriseSettingsLockingType {
  if (self == anEnterpriseSettingsLockingType) {
    return YES;
  }
  if (![self.description_ isEqual:anEnterpriseSettingsLockingType.description_]) {
    return NO;
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEnterpriseSettingsLockingTypeSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEnterpriseSettingsLockingType *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  jsonDict[@"description"] = valueObj.description_;

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEnterpriseSettingsLockingType *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *description_ = valueDict[@"description"];

  return [[DBTEAMLOGEnterpriseSettingsLockingType alloc] initWithDescription_:description_];
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGEventCategory.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventCategory

#pragma mark - Constructors

- (instancetype)initWithAdminAlerting {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryAdminAlerting;
  }
  return self;
}

- (instancetype)initWithApps {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryApps;
  }
  return self;
}

- (instancetype)initWithComments {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryComments;
  }
  return self;
}

- (instancetype)initWithDataGovernance {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDataGovernance;
  }
  return self;
}

- (instancetype)initWithDevices {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDevices;
  }
  return self;
}

- (instancetype)initWithDomains {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryDomains;
  }
  return self;
}

- (instancetype)initWithFileOperations {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileOperations;
  }
  return self;
}

- (instancetype)initWithFileRequests {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryFileRequests;
  }
  return self;
}

- (instancetype)initWithGroups {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryGroups;
  }
  return self;
}

- (instancetype)initWithLogins {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryLogins;
  }
  return self;
}

- (instancetype)initWithMembers {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryMembers;
  }
  return self;
}

- (instancetype)initWithPaper {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPaper;
  }
  return self;
}

- (instancetype)initWithPasswords {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryPasswords;
  }
  return self;
}

- (instancetype)initWithReports {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryReports;
  }
  return self;
}

- (instancetype)initWithSharing {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySharing;
  }
  return self;
}

- (instancetype)initWithShowcase {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryShowcase;
  }
  return self;
}

- (instancetype)initWithSso {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategorySso;
  }
  return self;
}

- (instancetype)initWithTeamFolders {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamFolders;
  }
  return self;
}

- (instancetype)initWithTeamPolicies {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamPolicies;
  }
  return self;
}

- (instancetype)initWithTeamProfile {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTeamProfile;
  }
  return self;
}

- (instancetype)initWithTfa {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTfa;
  }
  return self;
}

- (instancetype)initWithTrustedTeams {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryTrustedTeams;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventCategoryOther;
  }
  return self;
}

#pragma mark - Instance field accessors

#pragma mark - Tag state methods

- (BOOL)isAdminAlerting {
  return _tag == DBTEAMLOGEventCategoryAdminAlerting;
}

- (BOOL)isApps {
  return _tag == DBTEAMLOGEventCategoryApps;
}

- (BOOL)isComments {
  return _tag == DBTEAMLOGEventCategoryComments;
}

- (BOOL)isDataGovernance {
  return _tag == DBTEAMLOGEventCategoryDataGovernance;
}

- (BOOL)isDevices {
  return _tag == DBTEAMLOGEventCategoryDevices;
}

- (BOOL)isDomains {
  return _tag == DBTEAMLOGEventCategoryDomains;
}

- (BOOL)isFileOperations {
  return _tag == DBTEAMLOGEventCategoryFileOperations;
}

- (BOOL)isFileRequests {
  return _tag == DBTEAMLOGEventCategoryFileRequests;
}

- (BOOL)isGroups {
  return _tag == DBTEAMLOGEventCategoryGroups;
}

- (BOOL)isLogins {
  return _tag == DBTEAMLOGEventCategoryLogins;
}

- (BOOL)isMembers {
  return _tag == DBTEAMLOGEventCategoryMembers;
}

- (BOOL)isPaper {
  return _tag == DBTEAMLOGEventCategoryPaper;
}

- (BOOL)isPasswords {
  return _tag == DBTEAMLOGEventCategoryPasswords;
}

- (BOOL)isReports {
  return _tag == DBTEAMLOGEventCategoryReports;
}

- (BOOL)isSharing {
  return _tag == DBTEAMLOGEventCategorySharing;
}

- (BOOL)isShowcase {
  return _tag == DBTEAMLOGEventCategoryShowcase;
}

- (BOOL)isSso {
  return _tag == DBTEAMLOGEventCategorySso;
}

- (BOOL)isTeamFolders {
  return _tag == DBTEAMLOGEventCategoryTeamFolders;
}

- (BOOL)isTeamPolicies {
  return _tag == DBTEAMLOGEventCategoryTeamPolicies;
}

- (BOOL)isTeamProfile {
  return _tag == DBTEAMLOGEventCategoryTeamProfile;
}

- (BOOL)isTfa {
  return _tag == DBTEAMLOGEventCategoryTfa;
}

- (BOOL)isTrustedTeams {
  return _tag == DBTEAMLOGEventCategoryTrustedTeams;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventCategoryOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventCategoryAdminAlerting:
    return @"DBTEAMLOGEventCategoryAdminAlerting";
  case DBTEAMLOGEventCategoryApps:
    return @"DBTEAMLOGEventCategoryApps";
  case DBTEAMLOGEventCategoryComments:
    return @"DBTEAMLOGEventCategoryComments";
  case DBTEAMLOGEventCategoryDataGovernance:
    return @"DBTEAMLOGEventCategoryDataGovernance";
  case DBTEAMLOGEventCategoryDevices:
    return @"DBTEAMLOGEventCategoryDevices";
  case DBTEAMLOGEventCategoryDomains:
    return @"DBTEAMLOGEventCategoryDomains";
  case DBTEAMLOGEventCategoryFileOperations:
    return @"DBTEAMLOGEventCategoryFileOperations";
  case DBTEAMLOGEventCategoryFileRequests:
    return @"DBTEAMLOGEventCategoryFileRequests";
  case DBTEAMLOGEventCategoryGroups:
    return @"DBTEAMLOGEventCategoryGroups";
  case DBTEAMLOGEventCategoryLogins:
    return @"DBTEAMLOGEventCategoryLogins";
  case DBTEAMLOGEventCategoryMembers:
    return @"DBTEAMLOGEventCategoryMembers";
  case DBTEAMLOGEventCategoryPaper:
    return @"DBTEAMLOGEventCategoryPaper";
  case DBTEAMLOGEventCategoryPasswords:
    return @"DBTEAMLOGEventCategoryPasswords";
  case DBTEAMLOGEventCategoryReports:
    return @"DBTEAMLOGEventCategoryReports";
  case DBTEAMLOGEventCategorySharing:
    return @"DBTEAMLOGEventCategorySharing";
  case DBTEAMLOGEventCategoryShowcase:
    return @"DBTEAMLOGEventCategoryShowcase";
  case DBTEAMLOGEventCategorySso:
    return @"DBTEAMLOGEventCategorySso";
  case DBTEAMLOGEventCategoryTeamFolders:
    return @"DBTEAMLOGEventCategoryTeamFolders";
  case DBTEAMLOGEventCategoryTeamPolicies:
    return @"DBTEAMLOGEventCategoryTeamPolicies";
  case DBTEAMLOGEventCategoryTeamProfile:
    return @"DBTEAMLOGEventCategoryTeamProfile";
  case DBTEAMLOGEventCategoryTfa:
    return @"DBTEAMLOGEventCategoryTfa";
  case DBTEAMLOGEventCategoryTrustedTeams:
    return @"DBTEAMLOGEventCategoryTrustedTeams";
  case DBTEAMLOGEventCategoryOther:
    return @"DBTEAMLOGEventCategoryOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEventCategorySerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEventCategorySerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEventCategorySerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventCategoryAdminAlerting:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryApps:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryComments:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryDataGovernance:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryDevices:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryDomains:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryFileOperations:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryFileRequests:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryGroups:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryLogins:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryMembers:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryPaper:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryPasswords:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryReports:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategorySharing:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryShowcase:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategorySso:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryTeamFolders:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryTeamPolicies:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryTeamProfile:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryTfa:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryTrustedTeams:
    result = prime * result + [[self tagName] hash];
    break;
  case DBTEAMLOGEventCategoryOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventCategory:other];
}

- (BOOL)isEqualToEventCategory:(DBTEAMLOGEventCategory *)anEventCategory {
  if (self == anEventCategory) {
    return YES;
  }
  if (self.tag != anEventCategory.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventCategoryAdminAlerting:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryApps:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryComments:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDataGovernance:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDevices:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryDomains:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileOperations:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryFileRequests:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryGroups:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryLogins:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryMembers:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPaper:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryPasswords:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryReports:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySharing:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryShowcase:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategorySso:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamFolders:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamPolicies:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTeamProfile:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTfa:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryTrustedTeams:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  case DBTEAMLOGEventCategoryOther:
    return [[self tagName] isEqual:[anEventCategory tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventCategorySerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventCategory *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAdminAlerting]) {
    jsonDict[@".tag"] = @"admin_alerting";
  } else if ([valueObj isApps]) {
    jsonDict[@".tag"] = @"apps";
  } else if ([valueObj isComments]) {
    jsonDict[@".tag"] = @"comments";
  } else if ([valueObj isDataGovernance]) {
    jsonDict[@".tag"] = @"data_governance";
  } else if ([valueObj isDevices]) {
    jsonDict[@".tag"] = @"devices";
  } else if ([valueObj isDomains]) {
    jsonDict[@".tag"] = @"domains";
  } else if ([valueObj isFileOperations]) {
    jsonDict[@".tag"] = @"file_operations";
  } else if ([valueObj isFileRequests]) {
    jsonDict[@".tag"] = @"file_requests";
  } else if ([valueObj isGroups]) {
    jsonDict[@".tag"] = @"groups";
  } else if ([valueObj isLogins]) {
    jsonDict[@".tag"] = @"logins";
  } else if ([valueObj isMembers]) {
    jsonDict[@".tag"] = @"members";
  } else if ([valueObj isPaper]) {
    jsonDict[@".tag"] = @"paper";
  } else if ([valueObj isPasswords]) {
    jsonDict[@".tag"] = @"passwords";
  } else if ([valueObj isReports]) {
    jsonDict[@".tag"] = @"reports";
  } else if ([valueObj isSharing]) {
    jsonDict[@".tag"] = @"sharing";
  } else if ([valueObj isShowcase]) {
    jsonDict[@".tag"] = @"showcase";
  } else if ([valueObj isSso]) {
    jsonDict[@".tag"] = @"sso";
  } else if ([valueObj isTeamFolders]) {
    jsonDict[@".tag"] = @"team_folders";
  } else if ([valueObj isTeamPolicies]) {
    jsonDict[@".tag"] = @"team_policies";
  } else if ([valueObj isTeamProfile]) {
    jsonDict[@".tag"] = @"team_profile";
  } else if ([valueObj isTfa]) {
    jsonDict[@".tag"] = @"tfa";
  } else if ([valueObj isTrustedTeams]) {
    jsonDict[@".tag"] = @"trusted_teams";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEventCategory *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"admin_alerting"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithAdminAlerting];
  } else if ([tag isEqualToString:@"apps"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithApps];
  } else if ([tag isEqualToString:@"comments"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithComments];
  } else if ([tag isEqualToString:@"data_governance"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDataGovernance];
  } else if ([tag isEqualToString:@"devices"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDevices];
  } else if ([tag isEqualToString:@"domains"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithDomains];
  } else if ([tag isEqualToString:@"file_operations"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileOperations];
  } else if ([tag isEqualToString:@"file_requests"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithFileRequests];
  } else if ([tag isEqualToString:@"groups"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithGroups];
  } else if ([tag isEqualToString:@"logins"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithLogins];
  } else if ([tag isEqualToString:@"members"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithMembers];
  } else if ([tag isEqualToString:@"paper"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPaper];
  } else if ([tag isEqualToString:@"passwords"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithPasswords];
  } else if ([tag isEqualToString:@"reports"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithReports];
  } else if ([tag isEqualToString:@"sharing"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSharing];
  } else if ([tag isEqualToString:@"showcase"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithShowcase];
  } else if ([tag isEqualToString:@"sso"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithSso];
  } else if ([tag isEqualToString:@"team_folders"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamFolders];
  } else if ([tag isEqualToString:@"team_policies"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamPolicies];
  } else if ([tag isEqualToString:@"team_profile"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTeamProfile];
  } else if ([tag isEqualToString:@"tfa"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTfa];
  } else if ([tag isEqualToString:@"trusted_teams"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithTrustedTeams];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventCategory alloc] initWithOther];
  }
}

@end

#import "DBStoneSerializers.h"
#import "DBStoneValidators.h"
#import "DBTEAMLOGAccountCaptureChangeAvailabilityDetails.h"
#import "DBTEAMLOGAccountCaptureChangePolicyDetails.h"
#import "DBTEAMLOGAccountCaptureMigrateAccountDetails.h"
#import "DBTEAMLOGAccountCaptureNotificationEmailsSentDetails.h"
#import "DBTEAMLOGAccountCaptureRelinquishAccountDetails.h"
#import "DBTEAMLOGAccountLockOrUnlockedDetails.h"
#import "DBTEAMLOGAdminAlertingAlertStateChangedDetails.h"
#import "DBTEAMLOGAdminAlertingChangedAlertConfigDetails.h"
#import "DBTEAMLOGAdminAlertingTriggeredAlertDetails.h"
#import "DBTEAMLOGAdminEmailRemindersChangedDetails.h"
#import "DBTEAMLOGAllowDownloadDisabledDetails.h"
#import "DBTEAMLOGAllowDownloadEnabledDetails.h"
#import "DBTEAMLOGAppBlockedByPermissionsDetails.h"
#import "DBTEAMLOGAppLinkTeamDetails.h"
#import "DBTEAMLOGAppLinkUserDetails.h"
#import "DBTEAMLOGAppPermissionsChangedDetails.h"
#import "DBTEAMLOGAppUnlinkTeamDetails.h"
#import "DBTEAMLOGAppUnlinkUserDetails.h"
#import "DBTEAMLOGApplyNamingConventionDetails.h"
#import "DBTEAMLOGBinderAddPageDetails.h"
#import "DBTEAMLOGBinderAddSectionDetails.h"
#import "DBTEAMLOGBinderRemovePageDetails.h"
#import "DBTEAMLOGBinderRemoveSectionDetails.h"
#import "DBTEAMLOGBinderRenamePageDetails.h"
#import "DBTEAMLOGBinderRenameSectionDetails.h"
#import "DBTEAMLOGBinderReorderPageDetails.h"
#import "DBTEAMLOGBinderReorderSectionDetails.h"
#import "DBTEAMLOGCameraUploadsPolicyChangedDetails.h"
#import "DBTEAMLOGCaptureTranscriptPolicyChangedDetails.h"
#import "DBTEAMLOGChangedEnterpriseAdminRoleDetails.h"
#import "DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails.h"
#import "DBTEAMLOGClassificationChangePolicyDetails.h"
#import "DBTEAMLOGClassificationCreateReportDetails.h"
#import "DBTEAMLOGClassificationCreateReportFailDetails.h"
#import "DBTEAMLOGCollectionShareDetails.h"
#import "DBTEAMLOGComputerBackupPolicyChangedDetails.h"
#import "DBTEAMLOGContentAdministrationPolicyChangedDetails.h"
#import "DBTEAMLOGCreateFolderDetails.h"
#import "DBTEAMLOGCreateTeamInviteLinkDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionChangePolicyDetails.h"
#import "DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails.h"
#import "DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails.h"
#import "DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails.h"
#import "DBTEAMLOGDeleteTeamInviteLinkDetails.h"
#import "DBTEAMLOGDeviceApprovalsAddExceptionDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeOverageActionDetails.h"
#import "DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails.h"
#import "DBTEAMLOGDeviceApprovalsRemoveExceptionDetails.h"
#import "DBTEAMLOGDeviceChangeIpDesktopDetails.h"
#import "DBTEAMLOGDeviceChangeIpMobileDetails.h"
#import "DBTEAMLOGDeviceChangeIpWebDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkFailDetails.h"
#import "DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails.h"
#import "DBTEAMLOGDeviceLinkFailDetails.h"
#import "DBTEAMLOGDeviceLinkSuccessDetails.h"
#import "DBTEAMLOGDeviceManagementDisabledDetails.h"
#import "DBTEAMLOGDeviceManagementEnabledDetails.h"
#import "DBTEAMLOGDeviceSyncBackupStatusChangedDetails.h"
#import "DBTEAMLOGDeviceUnlinkDetails.h"
#import "DBTEAMLOGDirectoryRestrictionsAddMembersDetails.h"
#import "DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails.h"
#import "DBTEAMLOGDisabledDomainInvitesDetails.h"
#import "DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesEmailExistingUsersDetails.h"
#import "DBTEAMLOGDomainInvitesRequestToJoinTeamDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails.h"
#import "DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainFailDetails.h"
#import "DBTEAMLOGDomainVerificationAddDomainSuccessDetails.h"
#import "DBTEAMLOGDomainVerificationRemoveDomainDetails.h"
#import "DBTEAMLOGDropboxPasswordsExportedDetails.h"
#import "DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails.h"
#import "DBTEAMLOGDropboxPasswordsPolicyChangedDetails.h"
#import "DBTEAMLOGEmailIngestPolicyChangedDetails.h"
#import "DBTEAMLOGEmailIngestReceiveFileDetails.h"
#import "DBTEAMLOGEmmAddExceptionDetails.h"
#import "DBTEAMLOGEmmChangePolicyDetails.h"
#import "DBTEAMLOGEmmCreateExceptionsReportDetails.h"
#import "DBTEAMLOGEmmCreateUsageReportDetails.h"
#import "DBTEAMLOGEmmErrorDetails.h"
#import "DBTEAMLOGEmmRefreshAuthTokenDetails.h"
#import "DBTEAMLOGEmmRemoveExceptionDetails.h"
#import "DBTEAMLOGEnabledDomainInvitesDetails.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails.h"
#import "DBTEAMLOGEndedEnterpriseAdminSessionDetails.h"
#import "DBTEAMLOGEnterpriseSettingsLockingDetails.h"
#import "DBTEAMLOGEventDetails.h"
#import "DBTEAMLOGExportMembersReportDetails.h"
#import "DBTEAMLOGExportMembersReportFailDetails.h"
#import "DBTEAMLOGExtendedVersionHistoryChangePolicyDetails.h"
#import "DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails.h"
#import "DBTEAMLOGExternalDriveBackupPolicyChangedDetails.h"
#import "DBTEAMLOGExternalDriveBackupStatusChangedDetails.h"
#import "DBTEAMLOGExternalSharingCreateReportDetails.h"
#import "DBTEAMLOGExternalSharingReportFailedDetails.h"
#import "DBTEAMLOGFileAddCommentDetails.h"
#import "DBTEAMLOGFileAddDetails.h"
#import "DBTEAMLOGFileChangeCommentSubscriptionDetails.h"
#import "DBTEAMLOGFileCommentsChangePolicyDetails.h"
#import "DBTEAMLOGFileCopyDetails.h"
#import "DBTEAMLOGFileDeleteCommentDetails.h"
#import "DBTEAMLOGFileDeleteDetails.h"
#import "DBTEAMLOGFileDownloadDetails.h"
#import "DBTEAMLOGFileEditCommentDetails.h"
#import "DBTEAMLOGFileEditDetails.h"
#import "DBTEAMLOGFileGetCopyReferenceDetails.h"
#import "DBTEAMLOGFileLikeCommentDetails.h"
#import "DBTEAMLOGFileLockingLockStatusChangedDetails.h"
#import "DBTEAMLOGFileLockingPolicyChangedDetails.h"
#import "DBTEAMLOGFileMoveDetails.h"
#import "DBTEAMLOGFilePermanentlyDeleteDetails.h"
#import "DBTEAMLOGFilePreviewDetails.h"
#import "DBTEAMLOGFileRenameDetails.h"
#import "DBTEAMLOGFileRequestChangeDetails.h"
#import "DBTEAMLOGFileRequestCloseDetails.h"
#import "DBTEAMLOGFileRequestCreateDetails.h"
#import "DBTEAMLOGFileRequestDeleteDetails.h"
#import "DBTEAMLOGFileRequestReceiveFileDetails.h"
#import "DBTEAMLOGFileRequestsChangePolicyDetails.h"
#import "DBTEAMLOGFileRequestsEmailsEnabledDetails.h"
#import "DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails.h"
#import "DBTEAMLOGFileResolveCommentDetails.h"
#import "DBTEAMLOGFileRestoreDetails.h"
#import "DBTEAMLOGFileRevertDetails.h"
#import "DBTEAMLOGFileRollbackChangesDetails.h"
#import "DBTEAMLOGFileSaveCopyReferenceDetails.h"
#import "DBTEAMLOGFileTransfersFileAddDetails.h"
#import "DBTEAMLOGFileTransfersPolicyChangedDetails.h"
#import "DBTEAMLOGFileTransfersTransferDeleteDetails.h"
#import "DBTEAMLOGFileTransfersTransferDownloadDetails.h"
#import "DBTEAMLOGFileTransfersTransferSendDetails.h"
#import "DBTEAMLOGFileTransfersTransferViewDetails.h"
#import "DBTEAMLOGFileUnlikeCommentDetails.h"
#import "DBTEAMLOGFileUnresolveCommentDetails.h"
#import "DBTEAMLOGFolderOverviewDescriptionChangedDetails.h"
#import "DBTEAMLOGFolderOverviewItemPinnedDetails.h"
#import "DBTEAMLOGFolderOverviewItemUnpinnedDetails.h"
#import "DBTEAMLOGGoogleSsoChangePolicyDetails.h"
#import "DBTEAMLOGGovernancePolicyAddFolderFailedDetails.h"
#import "DBTEAMLOGGovernancePolicyAddFoldersDetails.h"
#import "DBTEAMLOGGovernancePolicyContentDisposedDetails.h"
#import "DBTEAMLOGGovernancePolicyCreateDetails.h"
#import "DBTEAMLOGGovernancePolicyDeleteDetails.h"
#import "DBTEAMLOGGovernancePolicyEditDetailsDetails.h"
#import "DBTEAMLOGGovernancePolicyEditDurationDetails.h"
#import "DBTEAMLOGGovernancePolicyExportCreatedDetails.h"
#import "DBTEAMLOGGovernancePolicyExportRemovedDetails.h"
#import "DBTEAMLOGGovernancePolicyRemoveFoldersDetails.h"
#import "DBTEAMLOGGovernancePolicyReportCreatedDetails.h"
#import "DBTEAMLOGGovernancePolicyZipPartDownloadedDetails.h"
#import "DBTEAMLOGGroupAddExternalIdDetails.h"
#import "DBTEAMLOGGroupAddMemberDetails.h"
#import "DBTEAMLOGGroupChangeExternalIdDetails.h"
#import "DBTEAMLOGGroupChangeManagementTypeDetails.h"
#import "DBTEAMLOGGroupChangeMemberRoleDetails.h"
#import "DBTEAMLOGGroupCreateDetails.h"
#import "DBTEAMLOGGroupDeleteDetails.h"
#import "DBTEAMLOGGroupDescriptionUpdatedDetails.h"
#import "DBTEAMLOGGroupJoinPolicyUpdatedDetails.h"
#import "DBTEAMLOGGroupMovedDetails.h"
#import "DBTEAMLOGGroupRemoveExternalIdDetails.h"
#import "DBTEAMLOGGroupRemoveMemberDetails.h"
#import "DBTEAMLOGGroupRenameDetails.h"
#import "DBTEAMLOGGroupUserManagementChangePolicyDetails.h"
#import "DBTEAMLOGGuestAdminChangeStatusDetails.h"
#import "DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails.h"
#import "DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails.h"
#import "DBTEAMLOGIntegrationConnectedDetails.h"
#import "DBTEAMLOGIntegrationDisconnectedDetails.h"
#import "DBTEAMLOGIntegrationPolicyChangedDetails.h"
#import "DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails.h"
#import "DBTEAMLOGLegalHoldsActivateAHoldDetails.h"
#import "DBTEAMLOGLegalHoldsAddMembersDetails.h"
#import "DBTEAMLOGLegalHoldsChangeHoldDetailsDetails.h"
#import "DBTEAMLOGLegalHoldsChangeHoldNameDetails.h"
#import "DBTEAMLOGLegalHoldsExportAHoldDetails.h"
#import "DBTEAMLOGLegalHoldsExportCancelledDetails.h"
#import "DBTEAMLOGLegalHoldsExportDownloadedDetails.h"
#import "DBTEAMLOGLegalHoldsExportRemovedDetails.h"
#import "DBTEAMLOGLegalHoldsReleaseAHoldDetails.h"
#import "DBTEAMLOGLegalHoldsRemoveMembersDetails.h"
#import "DBTEAMLOGLegalHoldsReportAHoldDetails.h"
#import "DBTEAMLOGLoginFailDetails.h"
#import "DBTEAMLOGLoginSuccessDetails.h"
#import "DBTEAMLOGLogoutDetails.h"
#import "DBTEAMLOGMemberAddExternalIdDetails.h"
#import "DBTEAMLOGMemberAddNameDetails.h"
#import "DBTEAMLOGMemberChangeAdminRoleDetails.h"
#import "DBTEAMLOGMemberChangeEmailDetails.h"
#import "DBTEAMLOGMemberChangeExternalIdDetails.h"
#import "DBTEAMLOGMemberChangeMembershipTypeDetails.h"
#import "DBTEAMLOGMemberChangeNameDetails.h"
#import "DBTEAMLOGMemberChangeResellerRoleDetails.h"
#import "DBTEAMLOGMemberChangeStatusDetails.h"
#import "DBTEAMLOGMemberDeleteManualContactsDetails.h"
#import "DBTEAMLOGMemberDeleteProfilePhotoDetails.h"
#import "DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails.h"
#import "DBTEAMLOGMemberRemoveExternalIdDetails.h"
#import "DBTEAMLOGMemberRequestsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSendInvitePolicyChangedDetails.h"
#import "DBTEAMLOGMemberSetProfilePhotoDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsAddExceptionDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangePolicyDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsChangeStatusDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails.h"
#import "DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails.h"
#import "DBTEAMLOGMemberSuggestDetails.h"
#import "DBTEAMLOGMemberSuggestionsChangePolicyDetails.h"
#import "DBTEAMLOGMemberTransferAccountContentsDetails.h"
#import "DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails.h"
#import "DBTEAMLOGMissingDetails.h"
#import "DBTEAMLOGNetworkControlChangePolicyDetails.h"
#import "DBTEAMLOGNoExpirationLinkGenCreateReportDetails.h"
#import "DBTEAMLOGNoExpirationLinkGenReportFailedDetails.h"
#import "DBTEAMLOGNoPasswordLinkGenCreateReportDetails.h"
#import "DBTEAMLOGNoPasswordLinkGenReportFailedDetails.h"
#import "DBTEAMLOGNoPasswordLinkViewCreateReportDetails.h"
#import "DBTEAMLOGNoPasswordLinkViewReportFailedDetails.h"
#import "DBTEAMLOGNoteAclInviteOnlyDetails.h"
#import "DBTEAMLOGNoteAclLinkDetails.h"
#import "DBTEAMLOGNoteAclTeamLinkDetails.h"
#import "DBTEAMLOGNoteShareReceiveDetails.h"
#import "DBTEAMLOGNoteSharedDetails.h"
#import "DBTEAMLOGObjectLabelAddedDetails.h"
#import "DBTEAMLOGObjectLabelRemovedDetails.h"
#import "DBTEAMLOGObjectLabelUpdatedValueDetails.h"
#import "DBTEAMLOGOpenNoteSharedDetails.h"
#import "DBTEAMLOGOrganizeFolderWithTidyDetails.h"
#import "DBTEAMLOGOutdatedLinkViewCreateReportDetails.h"
#import "DBTEAMLOGOutdatedLinkViewReportFailedDetails.h"
#import "DBTEAMLOGPaperAdminExportStartDetails.h"
#import "DBTEAMLOGPaperChangeDeploymentPolicyDetails.h"
#import "DBTEAMLOGPaperChangeMemberLinkPolicyDetails.h"
#import "DBTEAMLOGPaperChangeMemberPolicyDetails.h"
#import "DBTEAMLOGPaperChangePolicyDetails.h"
#import "DBTEAMLOGPaperContentAddMemberDetails.h"
#import "DBTEAMLOGPaperContentAddToFolderDetails.h"
#import "DBTEAMLOGPaperContentArchiveDetails.h"
#import "DBTEAMLOGPaperContentCreateDetails.h"
#import "DBTEAMLOGPaperContentPermanentlyDeleteDetails.h"
#import "DBTEAMLOGPaperContentRemoveFromFolderDetails.h"
#import "DBTEAMLOGPaperContentRemoveMemberDetails.h"
#import "DBTEAMLOGPaperContentRenameDetails.h"
#import "DBTEAMLOGPaperContentRestoreDetails.h"
#import "DBTEAMLOGPaperDefaultFolderPolicyChangedDetails.h"
#import "DBTEAMLOGPaperDesktopPolicyChangedDetails.h"
#import "DBTEAMLOGPaperDocAddCommentDetails.h"
#import "DBTEAMLOGPaperDocChangeMemberRoleDetails.h"
#import "DBTEAMLOGPaperDocChangeSharingPolicyDetails.h"
#import "DBTEAMLOGPaperDocChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperDocDeleteCommentDetails.h"
#import "DBTEAMLOGPaperDocDeletedDetails.h"
#import "DBTEAMLOGPaperDocDownloadDetails.h"
#import "DBTEAMLOGPaperDocEditCommentDetails.h"
#import "DBTEAMLOGPaperDocEditDetails.h"
#import "DBTEAMLOGPaperDocFollowedDetails.h"
#import "DBTEAMLOGPaperDocMentionDetails.h"
#import "DBTEAMLOGPaperDocOwnershipChangedDetails.h"
#import "DBTEAMLOGPaperDocRequestAccessDetails.h"
#import "DBTEAMLOGPaperDocResolveCommentDetails.h"
#import "DBTEAMLOGPaperDocRevertDetails.h"
#import "DBTEAMLOGPaperDocSlackShareDetails.h"
#import "DBTEAMLOGPaperDocTeamInviteDetails.h"
#import "DBTEAMLOGPaperDocTrashedDetails.h"
#import "DBTEAMLOGPaperDocUnresolveCommentDetails.h"
#import "DBTEAMLOGPaperDocUntrashedDetails.h"
#import "DBTEAMLOGPaperDocViewDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupAdditionDetails.h"
#import "DBTEAMLOGPaperEnabledUsersGroupRemovalDetails.h"
#import "DBTEAMLOGPaperExternalViewAllowDetails.h"
#import "DBTEAMLOGPaperExternalViewDefaultTeamDetails.h"
#import "DBTEAMLOGPaperExternalViewForbidDetails.h"
#import "DBTEAMLOGPaperFolderChangeSubscriptionDetails.h"
#import "DBTEAMLOGPaperFolderDeletedDetails.h"
#import "DBTEAMLOGPaperFolderFollowedDetails.h"
#import "DBTEAMLOGPaperFolderTeamInviteDetails.h"
#import "DBTEAMLOGPaperPublishedLinkChangePermissionDetails.h"
#import "DBTEAMLOGPaperPublishedLinkCreateDetails.h"
#import "DBTEAMLOGPaperPublishedLinkDisabledDetails.h"
#import "DBTEAMLOGPaperPublishedLinkViewDetails.h"
#import "DBTEAMLOGPasswordChangeDetails.h"
#import "DBTEAMLOGPasswordResetAllDetails.h"
#import "DBTEAMLOGPasswordResetDetails.h"
#import "DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails.h"
#import "DBTEAMLOGPendingSecondaryEmailAddedDetails.h"
#import "DBTEAMLOGPermanentDeleteChangePolicyDetails.h"
#import "DBTEAMLOGResellerSupportChangePolicyDetails.h"
#import "DBTEAMLOGResellerSupportSessionEndDetails.h"
#import "DBTEAMLOGResellerSupportSessionStartDetails.h"
#import "DBTEAMLOGRewindFolderDetails.h"
#import "DBTEAMLOGRewindPolicyChangedDetails.h"
#import "DBTEAMLOGSecondaryEmailDeletedDetails.h"
#import "DBTEAMLOGSecondaryEmailVerifiedDetails.h"
#import "DBTEAMLOGSecondaryMailsPolicyChangedDetails.h"
#import "DBTEAMLOGSendForSignaturePolicyChangedDetails.h"
#import "DBTEAMLOGSfAddGroupDetails.h"
#import "DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails.h"
#import "DBTEAMLOGSfExternalInviteWarnDetails.h"
#import "DBTEAMLOGSfFbInviteChangeRoleDetails.h"
#import "DBTEAMLOGSfFbInviteDetails.h"
#import "DBTEAMLOGSfFbUninviteDetails.h"
#import "DBTEAMLOGSfInviteGroupDetails.h"
#import "DBTEAMLOGSfTeamGrantAccessDetails.h"
#import "DBTEAMLOGSfTeamInviteChangeRoleDetails.h"
#import "DBTEAMLOGSfTeamInviteDetails.h"
#import "DBTEAMLOGSfTeamJoinDetails.h"
#import "DBTEAMLOGSfTeamJoinFromOobLinkDetails.h"
#import "DBTEAMLOGSfTeamUninviteDetails.h"
#import "DBTEAMLOGSharedContentAddInviteesDetails.h"
#import "DBTEAMLOGSharedContentAddLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentAddLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentAddMemberDetails.h"
#import "DBTEAMLOGSharedContentChangeDownloadsPolicyDetails.h"
#import "DBTEAMLOGSharedContentChangeInviteeRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkAudienceDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentChangeLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentChangeMemberRoleDetails.h"
#import "DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails.h"
#import "DBTEAMLOGSharedContentClaimInvitationDetails.h"
#import "DBTEAMLOGSharedContentCopyDetails.h"
#import "DBTEAMLOGSharedContentDownloadDetails.h"
#import "DBTEAMLOGSharedContentRelinquishMembershipDetails.h"
#import "DBTEAMLOGSharedContentRemoveInviteesDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkExpiryDetails.h"
#import "DBTEAMLOGSharedContentRemoveLinkPasswordDetails.h"
#import "DBTEAMLOGSharedContentRemoveMemberDetails.h"
#import "DBTEAMLOGSharedContentRequestAccessDetails.h"
#import "DBTEAMLOGSharedContentRestoreInviteesDetails.h"
#import "DBTEAMLOGSharedContentRestoreMemberDetails.h"
#import "DBTEAMLOGSharedContentUnshareDetails.h"
#import "DBTEAMLOGSharedContentViewDetails.h"
#import "DBTEAMLOGSharedFolderChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails.h"
#import "DBTEAMLOGSharedFolderChangeMembersPolicyDetails.h"
#import "DBTEAMLOGSharedFolderCreateDetails.h"
#import "DBTEAMLOGSharedFolderDeclineInvitationDetails.h"
#import "DBTEAMLOGSharedFolderMountDetails.h"
#import "DBTEAMLOGSharedFolderNestDetails.h"
#import "DBTEAMLOGSharedFolderTransferOwnershipDetails.h"
#import "DBTEAMLOGSharedFolderUnmountDetails.h"
#import "DBTEAMLOGSharedLinkAddExpiryDetails.h"
#import "DBTEAMLOGSharedLinkChangeExpiryDetails.h"
#import "DBTEAMLOGSharedLinkChangeVisibilityDetails.h"
#import "DBTEAMLOGSharedLinkCopyDetails.h"
#import "DBTEAMLOGSharedLinkCreateDetails.h"
#import "DBTEAMLOGSharedLinkDisableDetails.h"
#import "DBTEAMLOGSharedLinkDownloadDetails.h"
#import "DBTEAMLOGSharedLinkRemoveExpiryDetails.h"
#import "DBTEAMLOGSharedLinkSettingsAddExpirationDetails.h"
#import "DBTEAMLOGSharedLinkSettingsAddPasswordDetails.h"
#import "DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails.h"
#import "DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails.h"
#import "DBTEAMLOGSharedLinkSettingsChangeAudienceDetails.h"
#import "DBTEAMLOGSharedLinkSettingsChangeExpirationDetails.h"
#import "DBTEAMLOGSharedLinkSettingsChangePasswordDetails.h"
#import "DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails.h"
#import "DBTEAMLOGSharedLinkSettingsRemovePasswordDetails.h"
#import "DBTEAMLOGSharedLinkShareDetails.h"
#import "DBTEAMLOGSharedLinkViewDetails.h"
#import "DBTEAMLOGSharedNoteOpenedDetails.h"
#import "DBTEAMLOGSharingChangeFolderJoinPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails.h"
#import "DBTEAMLOGSharingChangeLinkPolicyDetails.h"
#import "DBTEAMLOGSharingChangeMemberPolicyDetails.h"
#import "DBTEAMLOGShmodelDisableDownloadsDetails.h"
#import "DBTEAMLOGShmodelEnableDownloadsDetails.h"
#import "DBTEAMLOGShmodelGroupShareDetails.h"
#import "DBTEAMLOGShowcaseAccessGrantedDetails.h"
#import "DBTEAMLOGShowcaseAddMemberDetails.h"
#import "DBTEAMLOGShowcaseArchivedDetails.h"
#import "DBTEAMLOGShowcaseChangeDownloadPolicyDetails.h"
#import "DBTEAMLOGShowcaseChangeEnabledPolicyDetails.h"
#import "DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails.h"
#import "DBTEAMLOGShowcaseCreatedDetails.h"
#import "DBTEAMLOGShowcaseDeleteCommentDetails.h"
#import "DBTEAMLOGShowcaseEditCommentDetails.h"
#import "DBTEAMLOGShowcaseEditedDetails.h"
#import "DBTEAMLOGShowcaseFileAddedDetails.h"
#import "DBTEAMLOGShowcaseFileDownloadDetails.h"
#import "DBTEAMLOGShowcaseFileRemovedDetails.h"
#import "DBTEAMLOGShowcaseFileViewDetails.h"
#import "DBTEAMLOGShowcasePermanentlyDeletedDetails.h"
#import "DBTEAMLOGShowcasePostCommentDetails.h"
#import "DBTEAMLOGShowcaseRemoveMemberDetails.h"
#import "DBTEAMLOGShowcaseRenamedDetails.h"
#import "DBTEAMLOGShowcaseRequestAccessDetails.h"
#import "DBTEAMLOGShowcaseResolveCommentDetails.h"
#import "DBTEAMLOGShowcaseRestoredDetails.h"
#import "DBTEAMLOGShowcaseTrashedDeprecatedDetails.h"
#import "DBTEAMLOGShowcaseTrashedDetails.h"
#import "DBTEAMLOGShowcaseUnresolveCommentDetails.h"
#import "DBTEAMLOGShowcaseUntrashedDeprecatedDetails.h"
#import "DBTEAMLOGShowcaseUntrashedDetails.h"
#import "DBTEAMLOGShowcaseViewDetails.h"
#import "DBTEAMLOGSignInAsSessionEndDetails.h"
#import "DBTEAMLOGSignInAsSessionStartDetails.h"
#import "DBTEAMLOGSmartSyncChangePolicyDetails.h"
#import "DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails.h"
#import "DBTEAMLOGSmartSyncNotOptOutDetails.h"
#import "DBTEAMLOGSmartSyncOptOutDetails.h"
#import "DBTEAMLOGSmarterSmartSyncPolicyChangedDetails.h"
#import "DBTEAMLOGSsoAddCertDetails.h"
#import "DBTEAMLOGSsoAddLoginUrlDetails.h"
#import "DBTEAMLOGSsoAddLogoutUrlDetails.h"
#import "DBTEAMLOGSsoChangeCertDetails.h"
#import "DBTEAMLOGSsoChangeLoginUrlDetails.h"
#import "DBTEAMLOGSsoChangeLogoutUrlDetails.h"
#import "DBTEAMLOGSsoChangePolicyDetails.h"
#import "DBTEAMLOGSsoChangeSamlIdentityModeDetails.h"
#import "DBTEAMLOGSsoErrorDetails.h"
#import "DBTEAMLOGSsoRemoveCertDetails.h"
#import "DBTEAMLOGSsoRemoveLoginUrlDetails.h"
#import "DBTEAMLOGSsoRemoveLogoutUrlDetails.h"
#import "DBTEAMLOGStartedEnterpriseAdminSessionDetails.h"
#import "DBTEAMLOGTeamActivityCreateReportDetails.h"
#import "DBTEAMLOGTeamActivityCreateReportFailDetails.h"
#import "DBTEAMLOGTeamBrandingPolicyChangedDetails.h"
#import "DBTEAMLOGTeamExtensionsPolicyChangedDetails.h"
#import "DBTEAMLOGTeamFolderChangeStatusDetails.h"
#import "DBTEAMLOGTeamFolderCreateDetails.h"
#import "DBTEAMLOGTeamFolderDowngradeDetails.h"
#import "DBTEAMLOGTeamFolderPermanentlyDeleteDetails.h"
#import "DBTEAMLOGTeamFolderRenameDetails.h"
#import "DBTEAMLOGTeamMergeFromDetails.h"
#import "DBTEAMLOGTeamMergeRequestAcceptedDetails.h"
#import "DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestAutoCanceledDetails.h"
#import "DBTEAMLOGTeamMergeRequestCanceledDetails.h"
#import "DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestExpiredDetails.h"
#import "DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestReminderDetails.h"
#import "DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestRevokedDetails.h"
#import "DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails.h"
#import "DBTEAMLOGTeamMergeToDetails.h"
#import "DBTEAMLOGTeamProfileAddBackgroundDetails.h"
#import "DBTEAMLOGTeamProfileAddLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeBackgroundDetails.h"
#import "DBTEAMLOGTeamProfileChangeDefaultLanguageDetails.h"
#import "DBTEAMLOGTeamProfileChangeLogoDetails.h"
#import "DBTEAMLOGTeamProfileChangeNameDetails.h"
#import "DBTEAMLOGTeamProfileRemoveBackgroundDetails.h"
#import "DBTEAMLOGTeamProfileRemoveLogoDetails.h"
#import "DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails.h"
#import "DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails.h"
#import "DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails.h"
#import "DBTEAMLOGTfaAddBackupPhoneDetails.h"
#import "DBTEAMLOGTfaAddExceptionDetails.h"
#import "DBTEAMLOGTfaAddSecurityKeyDetails.h"
#import "DBTEAMLOGTfaChangeBackupPhoneDetails.h"
#import "DBTEAMLOGTfaChangePolicyDetails.h"
#import "DBTEAMLOGTfaChangeStatusDetails.h"
#import "DBTEAMLOGTfaRemoveBackupPhoneDetails.h"
#import "DBTEAMLOGTfaRemoveExceptionDetails.h"
#import "DBTEAMLOGTfaRemoveSecurityKeyDetails.h"
#import "DBTEAMLOGTfaResetDetails.h"
#import "DBTEAMLOGTwoAccountChangePolicyDetails.h"
#import "DBTEAMLOGUndoNamingConventionDetails.h"
#import "DBTEAMLOGUndoOrganizeFolderWithTidyDetails.h"
#import "DBTEAMLOGUserTagsAddedDetails.h"
#import "DBTEAMLOGUserTagsRemovedDetails.h"
#import "DBTEAMLOGViewerInfoPolicyChangedDetails.h"
#import "DBTEAMLOGWatermarkingPolicyChangedDetails.h"
#import "DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails.h"
#import "DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails.h"
#import "DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails.h"

#pragma mark - API Object

@implementation DBTEAMLOGEventDetails

@synthesize adminAlertingAlertStateChangedDetails = _adminAlertingAlertStateChangedDetails;
@synthesize adminAlertingChangedAlertConfigDetails = _adminAlertingChangedAlertConfigDetails;
@synthesize adminAlertingTriggeredAlertDetails = _adminAlertingTriggeredAlertDetails;
@synthesize appBlockedByPermissionsDetails = _appBlockedByPermissionsDetails;
@synthesize appLinkTeamDetails = _appLinkTeamDetails;
@synthesize appLinkUserDetails = _appLinkUserDetails;
@synthesize appUnlinkTeamDetails = _appUnlinkTeamDetails;
@synthesize appUnlinkUserDetails = _appUnlinkUserDetails;
@synthesize integrationConnectedDetails = _integrationConnectedDetails;
@synthesize integrationDisconnectedDetails = _integrationDisconnectedDetails;
@synthesize fileAddCommentDetails = _fileAddCommentDetails;
@synthesize fileChangeCommentSubscriptionDetails = _fileChangeCommentSubscriptionDetails;
@synthesize fileDeleteCommentDetails = _fileDeleteCommentDetails;
@synthesize fileEditCommentDetails = _fileEditCommentDetails;
@synthesize fileLikeCommentDetails = _fileLikeCommentDetails;
@synthesize fileResolveCommentDetails = _fileResolveCommentDetails;
@synthesize fileUnlikeCommentDetails = _fileUnlikeCommentDetails;
@synthesize fileUnresolveCommentDetails = _fileUnresolveCommentDetails;
@synthesize governancePolicyAddFoldersDetails = _governancePolicyAddFoldersDetails;
@synthesize governancePolicyAddFolderFailedDetails = _governancePolicyAddFolderFailedDetails;
@synthesize governancePolicyContentDisposedDetails = _governancePolicyContentDisposedDetails;
@synthesize governancePolicyCreateDetails = _governancePolicyCreateDetails;
@synthesize governancePolicyDeleteDetails = _governancePolicyDeleteDetails;
@synthesize governancePolicyEditDetailsDetails = _governancePolicyEditDetailsDetails;
@synthesize governancePolicyEditDurationDetails = _governancePolicyEditDurationDetails;
@synthesize governancePolicyExportCreatedDetails = _governancePolicyExportCreatedDetails;
@synthesize governancePolicyExportRemovedDetails = _governancePolicyExportRemovedDetails;
@synthesize governancePolicyRemoveFoldersDetails = _governancePolicyRemoveFoldersDetails;
@synthesize governancePolicyReportCreatedDetails = _governancePolicyReportCreatedDetails;
@synthesize governancePolicyZipPartDownloadedDetails = _governancePolicyZipPartDownloadedDetails;
@synthesize legalHoldsActivateAHoldDetails = _legalHoldsActivateAHoldDetails;
@synthesize legalHoldsAddMembersDetails = _legalHoldsAddMembersDetails;
@synthesize legalHoldsChangeHoldDetailsDetails = _legalHoldsChangeHoldDetailsDetails;
@synthesize legalHoldsChangeHoldNameDetails = _legalHoldsChangeHoldNameDetails;
@synthesize legalHoldsExportAHoldDetails = _legalHoldsExportAHoldDetails;
@synthesize legalHoldsExportCancelledDetails = _legalHoldsExportCancelledDetails;
@synthesize legalHoldsExportDownloadedDetails = _legalHoldsExportDownloadedDetails;
@synthesize legalHoldsExportRemovedDetails = _legalHoldsExportRemovedDetails;
@synthesize legalHoldsReleaseAHoldDetails = _legalHoldsReleaseAHoldDetails;
@synthesize legalHoldsRemoveMembersDetails = _legalHoldsRemoveMembersDetails;
@synthesize legalHoldsReportAHoldDetails = _legalHoldsReportAHoldDetails;
@synthesize deviceChangeIpDesktopDetails = _deviceChangeIpDesktopDetails;
@synthesize deviceChangeIpMobileDetails = _deviceChangeIpMobileDetails;
@synthesize deviceChangeIpWebDetails = _deviceChangeIpWebDetails;
@synthesize deviceDeleteOnUnlinkFailDetails = _deviceDeleteOnUnlinkFailDetails;
@synthesize deviceDeleteOnUnlinkSuccessDetails = _deviceDeleteOnUnlinkSuccessDetails;
@synthesize deviceLinkFailDetails = _deviceLinkFailDetails;
@synthesize deviceLinkSuccessDetails = _deviceLinkSuccessDetails;
@synthesize deviceManagementDisabledDetails = _deviceManagementDisabledDetails;
@synthesize deviceManagementEnabledDetails = _deviceManagementEnabledDetails;
@synthesize deviceSyncBackupStatusChangedDetails = _deviceSyncBackupStatusChangedDetails;
@synthesize deviceUnlinkDetails = _deviceUnlinkDetails;
@synthesize dropboxPasswordsExportedDetails = _dropboxPasswordsExportedDetails;
@synthesize dropboxPasswordsNewDeviceEnrolledDetails = _dropboxPasswordsNewDeviceEnrolledDetails;
@synthesize emmRefreshAuthTokenDetails = _emmRefreshAuthTokenDetails;
@synthesize externalDriveBackupEligibilityStatusCheckedDetails = _externalDriveBackupEligibilityStatusCheckedDetails;
@synthesize externalDriveBackupStatusChangedDetails = _externalDriveBackupStatusChangedDetails;
@synthesize accountCaptureChangeAvailabilityDetails = _accountCaptureChangeAvailabilityDetails;
@synthesize accountCaptureMigrateAccountDetails = _accountCaptureMigrateAccountDetails;
@synthesize accountCaptureNotificationEmailsSentDetails = _accountCaptureNotificationEmailsSentDetails;
@synthesize accountCaptureRelinquishAccountDetails = _accountCaptureRelinquishAccountDetails;
@synthesize disabledDomainInvitesDetails = _disabledDomainInvitesDetails;
@synthesize domainInvitesApproveRequestToJoinTeamDetails = _domainInvitesApproveRequestToJoinTeamDetails;
@synthesize domainInvitesDeclineRequestToJoinTeamDetails = _domainInvitesDeclineRequestToJoinTeamDetails;
@synthesize domainInvitesEmailExistingUsersDetails = _domainInvitesEmailExistingUsersDetails;
@synthesize domainInvitesRequestToJoinTeamDetails = _domainInvitesRequestToJoinTeamDetails;
@synthesize domainInvitesSetInviteNewUserPrefToNoDetails = _domainInvitesSetInviteNewUserPrefToNoDetails;
@synthesize domainInvitesSetInviteNewUserPrefToYesDetails = _domainInvitesSetInviteNewUserPrefToYesDetails;
@synthesize domainVerificationAddDomainFailDetails = _domainVerificationAddDomainFailDetails;
@synthesize domainVerificationAddDomainSuccessDetails = _domainVerificationAddDomainSuccessDetails;
@synthesize domainVerificationRemoveDomainDetails = _domainVerificationRemoveDomainDetails;
@synthesize enabledDomainInvitesDetails = _enabledDomainInvitesDetails;
@synthesize applyNamingConventionDetails = _applyNamingConventionDetails;
@synthesize createFolderDetails = _createFolderDetails;
@synthesize fileAddDetails = _fileAddDetails;
@synthesize fileCopyDetails = _fileCopyDetails;
@synthesize fileDeleteDetails = _fileDeleteDetails;
@synthesize fileDownloadDetails = _fileDownloadDetails;
@synthesize fileEditDetails = _fileEditDetails;
@synthesize fileGetCopyReferenceDetails = _fileGetCopyReferenceDetails;
@synthesize fileLockingLockStatusChangedDetails = _fileLockingLockStatusChangedDetails;
@synthesize fileMoveDetails = _fileMoveDetails;
@synthesize filePermanentlyDeleteDetails = _filePermanentlyDeleteDetails;
@synthesize filePreviewDetails = _filePreviewDetails;
@synthesize fileRenameDetails = _fileRenameDetails;
@synthesize fileRestoreDetails = _fileRestoreDetails;
@synthesize fileRevertDetails = _fileRevertDetails;
@synthesize fileRollbackChangesDetails = _fileRollbackChangesDetails;
@synthesize fileSaveCopyReferenceDetails = _fileSaveCopyReferenceDetails;
@synthesize folderOverviewDescriptionChangedDetails = _folderOverviewDescriptionChangedDetails;
@synthesize folderOverviewItemPinnedDetails = _folderOverviewItemPinnedDetails;
@synthesize folderOverviewItemUnpinnedDetails = _folderOverviewItemUnpinnedDetails;
@synthesize objectLabelAddedDetails = _objectLabelAddedDetails;
@synthesize objectLabelRemovedDetails = _objectLabelRemovedDetails;
@synthesize objectLabelUpdatedValueDetails = _objectLabelUpdatedValueDetails;
@synthesize organizeFolderWithTidyDetails = _organizeFolderWithTidyDetails;
@synthesize rewindFolderDetails = _rewindFolderDetails;
@synthesize undoNamingConventionDetails = _undoNamingConventionDetails;
@synthesize undoOrganizeFolderWithTidyDetails = _undoOrganizeFolderWithTidyDetails;
@synthesize userTagsAddedDetails = _userTagsAddedDetails;
@synthesize userTagsRemovedDetails = _userTagsRemovedDetails;
@synthesize emailIngestReceiveFileDetails = _emailIngestReceiveFileDetails;
@synthesize fileRequestChangeDetails = _fileRequestChangeDetails;
@synthesize fileRequestCloseDetails = _fileRequestCloseDetails;
@synthesize fileRequestCreateDetails = _fileRequestCreateDetails;
@synthesize fileRequestDeleteDetails = _fileRequestDeleteDetails;
@synthesize fileRequestReceiveFileDetails = _fileRequestReceiveFileDetails;
@synthesize groupAddExternalIdDetails = _groupAddExternalIdDetails;
@synthesize groupAddMemberDetails = _groupAddMemberDetails;
@synthesize groupChangeExternalIdDetails = _groupChangeExternalIdDetails;
@synthesize groupChangeManagementTypeDetails = _groupChangeManagementTypeDetails;
@synthesize groupChangeMemberRoleDetails = _groupChangeMemberRoleDetails;
@synthesize groupCreateDetails = _groupCreateDetails;
@synthesize groupDeleteDetails = _groupDeleteDetails;
@synthesize groupDescriptionUpdatedDetails = _groupDescriptionUpdatedDetails;
@synthesize groupJoinPolicyUpdatedDetails = _groupJoinPolicyUpdatedDetails;
@synthesize groupMovedDetails = _groupMovedDetails;
@synthesize groupRemoveExternalIdDetails = _groupRemoveExternalIdDetails;
@synthesize groupRemoveMemberDetails = _groupRemoveMemberDetails;
@synthesize groupRenameDetails = _groupRenameDetails;
@synthesize accountLockOrUnlockedDetails = _accountLockOrUnlockedDetails;
@synthesize emmErrorDetails = _emmErrorDetails;
@synthesize guestAdminSignedInViaTrustedTeamsDetails = _guestAdminSignedInViaTrustedTeamsDetails;
@synthesize guestAdminSignedOutViaTrustedTeamsDetails = _guestAdminSignedOutViaTrustedTeamsDetails;
@synthesize loginFailDetails = _loginFailDetails;
@synthesize loginSuccessDetails = _loginSuccessDetails;
@synthesize logoutDetails = _logoutDetails;
@synthesize resellerSupportSessionEndDetails = _resellerSupportSessionEndDetails;
@synthesize resellerSupportSessionStartDetails = _resellerSupportSessionStartDetails;
@synthesize signInAsSessionEndDetails = _signInAsSessionEndDetails;
@synthesize signInAsSessionStartDetails = _signInAsSessionStartDetails;
@synthesize ssoErrorDetails = _ssoErrorDetails;
@synthesize createTeamInviteLinkDetails = _createTeamInviteLinkDetails;
@synthesize deleteTeamInviteLinkDetails = _deleteTeamInviteLinkDetails;
@synthesize memberAddExternalIdDetails = _memberAddExternalIdDetails;
@synthesize memberAddNameDetails = _memberAddNameDetails;
@synthesize memberChangeAdminRoleDetails = _memberChangeAdminRoleDetails;
@synthesize memberChangeEmailDetails = _memberChangeEmailDetails;
@synthesize memberChangeExternalIdDetails = _memberChangeExternalIdDetails;
@synthesize memberChangeMembershipTypeDetails = _memberChangeMembershipTypeDetails;
@synthesize memberChangeNameDetails = _memberChangeNameDetails;
@synthesize memberChangeResellerRoleDetails = _memberChangeResellerRoleDetails;
@synthesize memberChangeStatusDetails = _memberChangeStatusDetails;
@synthesize memberDeleteManualContactsDetails = _memberDeleteManualContactsDetails;
@synthesize memberDeleteProfilePhotoDetails = _memberDeleteProfilePhotoDetails;
@synthesize memberPermanentlyDeleteAccountContentsDetails = _memberPermanentlyDeleteAccountContentsDetails;
@synthesize memberRemoveExternalIdDetails = _memberRemoveExternalIdDetails;
@synthesize memberSetProfilePhotoDetails = _memberSetProfilePhotoDetails;
@synthesize memberSpaceLimitsAddCustomQuotaDetails = _memberSpaceLimitsAddCustomQuotaDetails;
@synthesize memberSpaceLimitsChangeCustomQuotaDetails = _memberSpaceLimitsChangeCustomQuotaDetails;
@synthesize memberSpaceLimitsChangeStatusDetails = _memberSpaceLimitsChangeStatusDetails;
@synthesize memberSpaceLimitsRemoveCustomQuotaDetails = _memberSpaceLimitsRemoveCustomQuotaDetails;
@synthesize memberSuggestDetails = _memberSuggestDetails;
@synthesize memberTransferAccountContentsDetails = _memberTransferAccountContentsDetails;
@synthesize pendingSecondaryEmailAddedDetails = _pendingSecondaryEmailAddedDetails;
@synthesize secondaryEmailDeletedDetails = _secondaryEmailDeletedDetails;
@synthesize secondaryEmailVerifiedDetails = _secondaryEmailVerifiedDetails;
@synthesize secondaryMailsPolicyChangedDetails = _secondaryMailsPolicyChangedDetails;
@synthesize binderAddPageDetails = _binderAddPageDetails;
@synthesize binderAddSectionDetails = _binderAddSectionDetails;
@synthesize binderRemovePageDetails = _binderRemovePageDetails;
@synthesize binderRemoveSectionDetails = _binderRemoveSectionDetails;
@synthesize binderRenamePageDetails = _binderRenamePageDetails;
@synthesize binderRenameSectionDetails = _binderRenameSectionDetails;
@synthesize binderReorderPageDetails = _binderReorderPageDetails;
@synthesize binderReorderSectionDetails = _binderReorderSectionDetails;
@synthesize paperContentAddMemberDetails = _paperContentAddMemberDetails;
@synthesize paperContentAddToFolderDetails = _paperContentAddToFolderDetails;
@synthesize paperContentArchiveDetails = _paperContentArchiveDetails;
@synthesize paperContentCreateDetails = _paperContentCreateDetails;
@synthesize paperContentPermanentlyDeleteDetails = _paperContentPermanentlyDeleteDetails;
@synthesize paperContentRemoveFromFolderDetails = _paperContentRemoveFromFolderDetails;
@synthesize paperContentRemoveMemberDetails = _paperContentRemoveMemberDetails;
@synthesize paperContentRenameDetails = _paperContentRenameDetails;
@synthesize paperContentRestoreDetails = _paperContentRestoreDetails;
@synthesize paperDocAddCommentDetails = _paperDocAddCommentDetails;
@synthesize paperDocChangeMemberRoleDetails = _paperDocChangeMemberRoleDetails;
@synthesize paperDocChangeSharingPolicyDetails = _paperDocChangeSharingPolicyDetails;
@synthesize paperDocChangeSubscriptionDetails = _paperDocChangeSubscriptionDetails;
@synthesize paperDocDeletedDetails = _paperDocDeletedDetails;
@synthesize paperDocDeleteCommentDetails = _paperDocDeleteCommentDetails;
@synthesize paperDocDownloadDetails = _paperDocDownloadDetails;
@synthesize paperDocEditDetails = _paperDocEditDetails;
@synthesize paperDocEditCommentDetails = _paperDocEditCommentDetails;
@synthesize paperDocFollowedDetails = _paperDocFollowedDetails;
@synthesize paperDocMentionDetails = _paperDocMentionDetails;
@synthesize paperDocOwnershipChangedDetails = _paperDocOwnershipChangedDetails;
@synthesize paperDocRequestAccessDetails = _paperDocRequestAccessDetails;
@synthesize paperDocResolveCommentDetails = _paperDocResolveCommentDetails;
@synthesize paperDocRevertDetails = _paperDocRevertDetails;
@synthesize paperDocSlackShareDetails = _paperDocSlackShareDetails;
@synthesize paperDocTeamInviteDetails = _paperDocTeamInviteDetails;
@synthesize paperDocTrashedDetails = _paperDocTrashedDetails;
@synthesize paperDocUnresolveCommentDetails = _paperDocUnresolveCommentDetails;
@synthesize paperDocUntrashedDetails = _paperDocUntrashedDetails;
@synthesize paperDocViewDetails = _paperDocViewDetails;
@synthesize paperExternalViewAllowDetails = _paperExternalViewAllowDetails;
@synthesize paperExternalViewDefaultTeamDetails = _paperExternalViewDefaultTeamDetails;
@synthesize paperExternalViewForbidDetails = _paperExternalViewForbidDetails;
@synthesize paperFolderChangeSubscriptionDetails = _paperFolderChangeSubscriptionDetails;
@synthesize paperFolderDeletedDetails = _paperFolderDeletedDetails;
@synthesize paperFolderFollowedDetails = _paperFolderFollowedDetails;
@synthesize paperFolderTeamInviteDetails = _paperFolderTeamInviteDetails;
@synthesize paperPublishedLinkChangePermissionDetails = _paperPublishedLinkChangePermissionDetails;
@synthesize paperPublishedLinkCreateDetails = _paperPublishedLinkCreateDetails;
@synthesize paperPublishedLinkDisabledDetails = _paperPublishedLinkDisabledDetails;
@synthesize paperPublishedLinkViewDetails = _paperPublishedLinkViewDetails;
@synthesize passwordChangeDetails = _passwordChangeDetails;
@synthesize passwordResetDetails = _passwordResetDetails;
@synthesize passwordResetAllDetails = _passwordResetAllDetails;
@synthesize classificationCreateReportDetails = _classificationCreateReportDetails;
@synthesize classificationCreateReportFailDetails = _classificationCreateReportFailDetails;
@synthesize emmCreateExceptionsReportDetails = _emmCreateExceptionsReportDetails;
@synthesize emmCreateUsageReportDetails = _emmCreateUsageReportDetails;
@synthesize exportMembersReportDetails = _exportMembersReportDetails;
@synthesize exportMembersReportFailDetails = _exportMembersReportFailDetails;
@synthesize externalSharingCreateReportDetails = _externalSharingCreateReportDetails;
@synthesize externalSharingReportFailedDetails = _externalSharingReportFailedDetails;
@synthesize noExpirationLinkGenCreateReportDetails = _noExpirationLinkGenCreateReportDetails;
@synthesize noExpirationLinkGenReportFailedDetails = _noExpirationLinkGenReportFailedDetails;
@synthesize noPasswordLinkGenCreateReportDetails = _noPasswordLinkGenCreateReportDetails;
@synthesize noPasswordLinkGenReportFailedDetails = _noPasswordLinkGenReportFailedDetails;
@synthesize noPasswordLinkViewCreateReportDetails = _noPasswordLinkViewCreateReportDetails;
@synthesize noPasswordLinkViewReportFailedDetails = _noPasswordLinkViewReportFailedDetails;
@synthesize outdatedLinkViewCreateReportDetails = _outdatedLinkViewCreateReportDetails;
@synthesize outdatedLinkViewReportFailedDetails = _outdatedLinkViewReportFailedDetails;
@synthesize paperAdminExportStartDetails = _paperAdminExportStartDetails;
@synthesize smartSyncCreateAdminPrivilegeReportDetails = _smartSyncCreateAdminPrivilegeReportDetails;
@synthesize teamActivityCreateReportDetails = _teamActivityCreateReportDetails;
@synthesize teamActivityCreateReportFailDetails = _teamActivityCreateReportFailDetails;
@synthesize collectionShareDetails = _collectionShareDetails;
@synthesize fileTransfersFileAddDetails = _fileTransfersFileAddDetails;
@synthesize fileTransfersTransferDeleteDetails = _fileTransfersTransferDeleteDetails;
@synthesize fileTransfersTransferDownloadDetails = _fileTransfersTransferDownloadDetails;
@synthesize fileTransfersTransferSendDetails = _fileTransfersTransferSendDetails;
@synthesize fileTransfersTransferViewDetails = _fileTransfersTransferViewDetails;
@synthesize noteAclInviteOnlyDetails = _noteAclInviteOnlyDetails;
@synthesize noteAclLinkDetails = _noteAclLinkDetails;
@synthesize noteAclTeamLinkDetails = _noteAclTeamLinkDetails;
@synthesize noteSharedDetails = _noteSharedDetails;
@synthesize noteShareReceiveDetails = _noteShareReceiveDetails;
@synthesize openNoteSharedDetails = _openNoteSharedDetails;
@synthesize sfAddGroupDetails = _sfAddGroupDetails;
@synthesize sfAllowNonMembersToViewSharedLinksDetails = _sfAllowNonMembersToViewSharedLinksDetails;
@synthesize sfExternalInviteWarnDetails = _sfExternalInviteWarnDetails;
@synthesize sfFbInviteDetails = _sfFbInviteDetails;
@synthesize sfFbInviteChangeRoleDetails = _sfFbInviteChangeRoleDetails;
@synthesize sfFbUninviteDetails = _sfFbUninviteDetails;
@synthesize sfInviteGroupDetails = _sfInviteGroupDetails;
@synthesize sfTeamGrantAccessDetails = _sfTeamGrantAccessDetails;
@synthesize sfTeamInviteDetails = _sfTeamInviteDetails;
@synthesize sfTeamInviteChangeRoleDetails = _sfTeamInviteChangeRoleDetails;
@synthesize sfTeamJoinDetails = _sfTeamJoinDetails;
@synthesize sfTeamJoinFromOobLinkDetails = _sfTeamJoinFromOobLinkDetails;
@synthesize sfTeamUninviteDetails = _sfTeamUninviteDetails;
@synthesize sharedContentAddInviteesDetails = _sharedContentAddInviteesDetails;
@synthesize sharedContentAddLinkExpiryDetails = _sharedContentAddLinkExpiryDetails;
@synthesize sharedContentAddLinkPasswordDetails = _sharedContentAddLinkPasswordDetails;
@synthesize sharedContentAddMemberDetails = _sharedContentAddMemberDetails;
@synthesize sharedContentChangeDownloadsPolicyDetails = _sharedContentChangeDownloadsPolicyDetails;
@synthesize sharedContentChangeInviteeRoleDetails = _sharedContentChangeInviteeRoleDetails;
@synthesize sharedContentChangeLinkAudienceDetails = _sharedContentChangeLinkAudienceDetails;
@synthesize sharedContentChangeLinkExpiryDetails = _sharedContentChangeLinkExpiryDetails;
@synthesize sharedContentChangeLinkPasswordDetails = _sharedContentChangeLinkPasswordDetails;
@synthesize sharedContentChangeMemberRoleDetails = _sharedContentChangeMemberRoleDetails;
@synthesize sharedContentChangeViewerInfoPolicyDetails = _sharedContentChangeViewerInfoPolicyDetails;
@synthesize sharedContentClaimInvitationDetails = _sharedContentClaimInvitationDetails;
@synthesize sharedContentCopyDetails = _sharedContentCopyDetails;
@synthesize sharedContentDownloadDetails = _sharedContentDownloadDetails;
@synthesize sharedContentRelinquishMembershipDetails = _sharedContentRelinquishMembershipDetails;
@synthesize sharedContentRemoveInviteesDetails = _sharedContentRemoveInviteesDetails;
@synthesize sharedContentRemoveLinkExpiryDetails = _sharedContentRemoveLinkExpiryDetails;
@synthesize sharedContentRemoveLinkPasswordDetails = _sharedContentRemoveLinkPasswordDetails;
@synthesize sharedContentRemoveMemberDetails = _sharedContentRemoveMemberDetails;
@synthesize sharedContentRequestAccessDetails = _sharedContentRequestAccessDetails;
@synthesize sharedContentRestoreInviteesDetails = _sharedContentRestoreInviteesDetails;
@synthesize sharedContentRestoreMemberDetails = _sharedContentRestoreMemberDetails;
@synthesize sharedContentUnshareDetails = _sharedContentUnshareDetails;
@synthesize sharedContentViewDetails = _sharedContentViewDetails;
@synthesize sharedFolderChangeLinkPolicyDetails = _sharedFolderChangeLinkPolicyDetails;
@synthesize sharedFolderChangeMembersInheritancePolicyDetails = _sharedFolderChangeMembersInheritancePolicyDetails;
@synthesize sharedFolderChangeMembersManagementPolicyDetails = _sharedFolderChangeMembersManagementPolicyDetails;
@synthesize sharedFolderChangeMembersPolicyDetails = _sharedFolderChangeMembersPolicyDetails;
@synthesize sharedFolderCreateDetails = _sharedFolderCreateDetails;
@synthesize sharedFolderDeclineInvitationDetails = _sharedFolderDeclineInvitationDetails;
@synthesize sharedFolderMountDetails = _sharedFolderMountDetails;
@synthesize sharedFolderNestDetails = _sharedFolderNestDetails;
@synthesize sharedFolderTransferOwnershipDetails = _sharedFolderTransferOwnershipDetails;
@synthesize sharedFolderUnmountDetails = _sharedFolderUnmountDetails;
@synthesize sharedLinkAddExpiryDetails = _sharedLinkAddExpiryDetails;
@synthesize sharedLinkChangeExpiryDetails = _sharedLinkChangeExpiryDetails;
@synthesize sharedLinkChangeVisibilityDetails = _sharedLinkChangeVisibilityDetails;
@synthesize sharedLinkCopyDetails = _sharedLinkCopyDetails;
@synthesize sharedLinkCreateDetails = _sharedLinkCreateDetails;
@synthesize sharedLinkDisableDetails = _sharedLinkDisableDetails;
@synthesize sharedLinkDownloadDetails = _sharedLinkDownloadDetails;
@synthesize sharedLinkRemoveExpiryDetails = _sharedLinkRemoveExpiryDetails;
@synthesize sharedLinkSettingsAddExpirationDetails = _sharedLinkSettingsAddExpirationDetails;
@synthesize sharedLinkSettingsAddPasswordDetails = _sharedLinkSettingsAddPasswordDetails;
@synthesize sharedLinkSettingsAllowDownloadDisabledDetails = _sharedLinkSettingsAllowDownloadDisabledDetails;
@synthesize sharedLinkSettingsAllowDownloadEnabledDetails = _sharedLinkSettingsAllowDownloadEnabledDetails;
@synthesize sharedLinkSettingsChangeAudienceDetails = _sharedLinkSettingsChangeAudienceDetails;
@synthesize sharedLinkSettingsChangeExpirationDetails = _sharedLinkSettingsChangeExpirationDetails;
@synthesize sharedLinkSettingsChangePasswordDetails = _sharedLinkSettingsChangePasswordDetails;
@synthesize sharedLinkSettingsRemoveExpirationDetails = _sharedLinkSettingsRemoveExpirationDetails;
@synthesize sharedLinkSettingsRemovePasswordDetails = _sharedLinkSettingsRemovePasswordDetails;
@synthesize sharedLinkShareDetails = _sharedLinkShareDetails;
@synthesize sharedLinkViewDetails = _sharedLinkViewDetails;
@synthesize sharedNoteOpenedDetails = _sharedNoteOpenedDetails;
@synthesize shmodelDisableDownloadsDetails = _shmodelDisableDownloadsDetails;
@synthesize shmodelEnableDownloadsDetails = _shmodelEnableDownloadsDetails;
@synthesize shmodelGroupShareDetails = _shmodelGroupShareDetails;
@synthesize showcaseAccessGrantedDetails = _showcaseAccessGrantedDetails;
@synthesize showcaseAddMemberDetails = _showcaseAddMemberDetails;
@synthesize showcaseArchivedDetails = _showcaseArchivedDetails;
@synthesize showcaseCreatedDetails = _showcaseCreatedDetails;
@synthesize showcaseDeleteCommentDetails = _showcaseDeleteCommentDetails;
@synthesize showcaseEditedDetails = _showcaseEditedDetails;
@synthesize showcaseEditCommentDetails = _showcaseEditCommentDetails;
@synthesize showcaseFileAddedDetails = _showcaseFileAddedDetails;
@synthesize showcaseFileDownloadDetails = _showcaseFileDownloadDetails;
@synthesize showcaseFileRemovedDetails = _showcaseFileRemovedDetails;
@synthesize showcaseFileViewDetails = _showcaseFileViewDetails;
@synthesize showcasePermanentlyDeletedDetails = _showcasePermanentlyDeletedDetails;
@synthesize showcasePostCommentDetails = _showcasePostCommentDetails;
@synthesize showcaseRemoveMemberDetails = _showcaseRemoveMemberDetails;
@synthesize showcaseRenamedDetails = _showcaseRenamedDetails;
@synthesize showcaseRequestAccessDetails = _showcaseRequestAccessDetails;
@synthesize showcaseResolveCommentDetails = _showcaseResolveCommentDetails;
@synthesize showcaseRestoredDetails = _showcaseRestoredDetails;
@synthesize showcaseTrashedDetails = _showcaseTrashedDetails;
@synthesize showcaseTrashedDeprecatedDetails = _showcaseTrashedDeprecatedDetails;
@synthesize showcaseUnresolveCommentDetails = _showcaseUnresolveCommentDetails;
@synthesize showcaseUntrashedDetails = _showcaseUntrashedDetails;
@synthesize showcaseUntrashedDeprecatedDetails = _showcaseUntrashedDeprecatedDetails;
@synthesize showcaseViewDetails = _showcaseViewDetails;
@synthesize ssoAddCertDetails = _ssoAddCertDetails;
@synthesize ssoAddLoginUrlDetails = _ssoAddLoginUrlDetails;
@synthesize ssoAddLogoutUrlDetails = _ssoAddLogoutUrlDetails;
@synthesize ssoChangeCertDetails = _ssoChangeCertDetails;
@synthesize ssoChangeLoginUrlDetails = _ssoChangeLoginUrlDetails;
@synthesize ssoChangeLogoutUrlDetails = _ssoChangeLogoutUrlDetails;
@synthesize ssoChangeSamlIdentityModeDetails = _ssoChangeSamlIdentityModeDetails;
@synthesize ssoRemoveCertDetails = _ssoRemoveCertDetails;
@synthesize ssoRemoveLoginUrlDetails = _ssoRemoveLoginUrlDetails;
@synthesize ssoRemoveLogoutUrlDetails = _ssoRemoveLogoutUrlDetails;
@synthesize teamFolderChangeStatusDetails = _teamFolderChangeStatusDetails;
@synthesize teamFolderCreateDetails = _teamFolderCreateDetails;
@synthesize teamFolderDowngradeDetails = _teamFolderDowngradeDetails;
@synthesize teamFolderPermanentlyDeleteDetails = _teamFolderPermanentlyDeleteDetails;
@synthesize teamFolderRenameDetails = _teamFolderRenameDetails;
@synthesize teamSelectiveSyncSettingsChangedDetails = _teamSelectiveSyncSettingsChangedDetails;
@synthesize accountCaptureChangePolicyDetails = _accountCaptureChangePolicyDetails;
@synthesize adminEmailRemindersChangedDetails = _adminEmailRemindersChangedDetails;
@synthesize allowDownloadDisabledDetails = _allowDownloadDisabledDetails;
@synthesize allowDownloadEnabledDetails = _allowDownloadEnabledDetails;
@synthesize appPermissionsChangedDetails = _appPermissionsChangedDetails;
@synthesize cameraUploadsPolicyChangedDetails = _cameraUploadsPolicyChangedDetails;
@synthesize captureTranscriptPolicyChangedDetails = _captureTranscriptPolicyChangedDetails;
@synthesize classificationChangePolicyDetails = _classificationChangePolicyDetails;
@synthesize computerBackupPolicyChangedDetails = _computerBackupPolicyChangedDetails;
@synthesize contentAdministrationPolicyChangedDetails = _contentAdministrationPolicyChangedDetails;
@synthesize dataPlacementRestrictionChangePolicyDetails = _dataPlacementRestrictionChangePolicyDetails;
@synthesize dataPlacementRestrictionSatisfyPolicyDetails = _dataPlacementRestrictionSatisfyPolicyDetails;
@synthesize deviceApprovalsAddExceptionDetails = _deviceApprovalsAddExceptionDetails;
@synthesize deviceApprovalsChangeDesktopPolicyDetails = _deviceApprovalsChangeDesktopPolicyDetails;
@synthesize deviceApprovalsChangeMobilePolicyDetails = _deviceApprovalsChangeMobilePolicyDetails;
@synthesize deviceApprovalsChangeOverageActionDetails = _deviceApprovalsChangeOverageActionDetails;
@synthesize deviceApprovalsChangeUnlinkActionDetails = _deviceApprovalsChangeUnlinkActionDetails;
@synthesize deviceApprovalsRemoveExceptionDetails = _deviceApprovalsRemoveExceptionDetails;
@synthesize directoryRestrictionsAddMembersDetails = _directoryRestrictionsAddMembersDetails;
@synthesize directoryRestrictionsRemoveMembersDetails = _directoryRestrictionsRemoveMembersDetails;
@synthesize dropboxPasswordsPolicyChangedDetails = _dropboxPasswordsPolicyChangedDetails;
@synthesize emailIngestPolicyChangedDetails = _emailIngestPolicyChangedDetails;
@synthesize emmAddExceptionDetails = _emmAddExceptionDetails;
@synthesize emmChangePolicyDetails = _emmChangePolicyDetails;
@synthesize emmRemoveExceptionDetails = _emmRemoveExceptionDetails;
@synthesize extendedVersionHistoryChangePolicyDetails = _extendedVersionHistoryChangePolicyDetails;
@synthesize externalDriveBackupPolicyChangedDetails = _externalDriveBackupPolicyChangedDetails;
@synthesize fileCommentsChangePolicyDetails = _fileCommentsChangePolicyDetails;
@synthesize fileLockingPolicyChangedDetails = _fileLockingPolicyChangedDetails;
@synthesize fileRequestsChangePolicyDetails = _fileRequestsChangePolicyDetails;
@synthesize fileRequestsEmailsEnabledDetails = _fileRequestsEmailsEnabledDetails;
@synthesize fileRequestsEmailsRestrictedToTeamOnlyDetails = _fileRequestsEmailsRestrictedToTeamOnlyDetails;
@synthesize fileTransfersPolicyChangedDetails = _fileTransfersPolicyChangedDetails;
@synthesize googleSsoChangePolicyDetails = _googleSsoChangePolicyDetails;
@synthesize groupUserManagementChangePolicyDetails = _groupUserManagementChangePolicyDetails;
@synthesize integrationPolicyChangedDetails = _integrationPolicyChangedDetails;
@synthesize inviteAcceptanceEmailPolicyChangedDetails = _inviteAcceptanceEmailPolicyChangedDetails;
@synthesize memberRequestsChangePolicyDetails = _memberRequestsChangePolicyDetails;
@synthesize memberSendInvitePolicyChangedDetails = _memberSendInvitePolicyChangedDetails;
@synthesize memberSpaceLimitsAddExceptionDetails = _memberSpaceLimitsAddExceptionDetails;
@synthesize memberSpaceLimitsChangeCapsTypePolicyDetails = _memberSpaceLimitsChangeCapsTypePolicyDetails;
@synthesize memberSpaceLimitsChangePolicyDetails = _memberSpaceLimitsChangePolicyDetails;
@synthesize memberSpaceLimitsRemoveExceptionDetails = _memberSpaceLimitsRemoveExceptionDetails;
@synthesize memberSuggestionsChangePolicyDetails = _memberSuggestionsChangePolicyDetails;
@synthesize microsoftOfficeAddinChangePolicyDetails = _microsoftOfficeAddinChangePolicyDetails;
@synthesize networkControlChangePolicyDetails = _networkControlChangePolicyDetails;
@synthesize paperChangeDeploymentPolicyDetails = _paperChangeDeploymentPolicyDetails;
@synthesize paperChangeMemberLinkPolicyDetails = _paperChangeMemberLinkPolicyDetails;
@synthesize paperChangeMemberPolicyDetails = _paperChangeMemberPolicyDetails;
@synthesize paperChangePolicyDetails = _paperChangePolicyDetails;
@synthesize paperDefaultFolderPolicyChangedDetails = _paperDefaultFolderPolicyChangedDetails;
@synthesize paperDesktopPolicyChangedDetails = _paperDesktopPolicyChangedDetails;
@synthesize paperEnabledUsersGroupAdditionDetails = _paperEnabledUsersGroupAdditionDetails;
@synthesize paperEnabledUsersGroupRemovalDetails = _paperEnabledUsersGroupRemovalDetails;
@synthesize passwordStrengthRequirementsChangePolicyDetails = _passwordStrengthRequirementsChangePolicyDetails;
@synthesize permanentDeleteChangePolicyDetails = _permanentDeleteChangePolicyDetails;
@synthesize resellerSupportChangePolicyDetails = _resellerSupportChangePolicyDetails;
@synthesize rewindPolicyChangedDetails = _rewindPolicyChangedDetails;
@synthesize sendForSignaturePolicyChangedDetails = _sendForSignaturePolicyChangedDetails;
@synthesize sharingChangeFolderJoinPolicyDetails = _sharingChangeFolderJoinPolicyDetails;
@synthesize sharingChangeLinkAllowChangeExpirationPolicyDetails = _sharingChangeLinkAllowChangeExpirationPolicyDetails;
@synthesize sharingChangeLinkDefaultExpirationPolicyDetails = _sharingChangeLinkDefaultExpirationPolicyDetails;
@synthesize sharingChangeLinkEnforcePasswordPolicyDetails = _sharingChangeLinkEnforcePasswordPolicyDetails;
@synthesize sharingChangeLinkPolicyDetails = _sharingChangeLinkPolicyDetails;
@synthesize sharingChangeMemberPolicyDetails = _sharingChangeMemberPolicyDetails;
@synthesize showcaseChangeDownloadPolicyDetails = _showcaseChangeDownloadPolicyDetails;
@synthesize showcaseChangeEnabledPolicyDetails = _showcaseChangeEnabledPolicyDetails;
@synthesize showcaseChangeExternalSharingPolicyDetails = _showcaseChangeExternalSharingPolicyDetails;
@synthesize smarterSmartSyncPolicyChangedDetails = _smarterSmartSyncPolicyChangedDetails;
@synthesize smartSyncChangePolicyDetails = _smartSyncChangePolicyDetails;
@synthesize smartSyncNotOptOutDetails = _smartSyncNotOptOutDetails;
@synthesize smartSyncOptOutDetails = _smartSyncOptOutDetails;
@synthesize ssoChangePolicyDetails = _ssoChangePolicyDetails;
@synthesize teamBrandingPolicyChangedDetails = _teamBrandingPolicyChangedDetails;
@synthesize teamExtensionsPolicyChangedDetails = _teamExtensionsPolicyChangedDetails;
@synthesize teamSelectiveSyncPolicyChangedDetails = _teamSelectiveSyncPolicyChangedDetails;
@synthesize teamSharingWhitelistSubjectsChangedDetails = _teamSharingWhitelistSubjectsChangedDetails;
@synthesize tfaAddExceptionDetails = _tfaAddExceptionDetails;
@synthesize tfaChangePolicyDetails = _tfaChangePolicyDetails;
@synthesize tfaRemoveExceptionDetails = _tfaRemoveExceptionDetails;
@synthesize twoAccountChangePolicyDetails = _twoAccountChangePolicyDetails;
@synthesize viewerInfoPolicyChangedDetails = _viewerInfoPolicyChangedDetails;
@synthesize watermarkingPolicyChangedDetails = _watermarkingPolicyChangedDetails;
@synthesize webSessionsChangeActiveSessionLimitDetails = _webSessionsChangeActiveSessionLimitDetails;
@synthesize webSessionsChangeFixedLengthPolicyDetails = _webSessionsChangeFixedLengthPolicyDetails;
@synthesize webSessionsChangeIdleLengthPolicyDetails = _webSessionsChangeIdleLengthPolicyDetails;
@synthesize dataResidencyMigrationRequestSuccessfulDetails = _dataResidencyMigrationRequestSuccessfulDetails;
@synthesize dataResidencyMigrationRequestUnsuccessfulDetails = _dataResidencyMigrationRequestUnsuccessfulDetails;
@synthesize teamMergeFromDetails = _teamMergeFromDetails;
@synthesize teamMergeToDetails = _teamMergeToDetails;
@synthesize teamProfileAddBackgroundDetails = _teamProfileAddBackgroundDetails;
@synthesize teamProfileAddLogoDetails = _teamProfileAddLogoDetails;
@synthesize teamProfileChangeBackgroundDetails = _teamProfileChangeBackgroundDetails;
@synthesize teamProfileChangeDefaultLanguageDetails = _teamProfileChangeDefaultLanguageDetails;
@synthesize teamProfileChangeLogoDetails = _teamProfileChangeLogoDetails;
@synthesize teamProfileChangeNameDetails = _teamProfileChangeNameDetails;
@synthesize teamProfileRemoveBackgroundDetails = _teamProfileRemoveBackgroundDetails;
@synthesize teamProfileRemoveLogoDetails = _teamProfileRemoveLogoDetails;
@synthesize tfaAddBackupPhoneDetails = _tfaAddBackupPhoneDetails;
@synthesize tfaAddSecurityKeyDetails = _tfaAddSecurityKeyDetails;
@synthesize tfaChangeBackupPhoneDetails = _tfaChangeBackupPhoneDetails;
@synthesize tfaChangeStatusDetails = _tfaChangeStatusDetails;
@synthesize tfaRemoveBackupPhoneDetails = _tfaRemoveBackupPhoneDetails;
@synthesize tfaRemoveSecurityKeyDetails = _tfaRemoveSecurityKeyDetails;
@synthesize tfaResetDetails = _tfaResetDetails;
@synthesize changedEnterpriseAdminRoleDetails = _changedEnterpriseAdminRoleDetails;
@synthesize changedEnterpriseConnectedTeamStatusDetails = _changedEnterpriseConnectedTeamStatusDetails;
@synthesize endedEnterpriseAdminSessionDetails = _endedEnterpriseAdminSessionDetails;
@synthesize endedEnterpriseAdminSessionDeprecatedDetails = _endedEnterpriseAdminSessionDeprecatedDetails;
@synthesize enterpriseSettingsLockingDetails = _enterpriseSettingsLockingDetails;
@synthesize guestAdminChangeStatusDetails = _guestAdminChangeStatusDetails;
@synthesize startedEnterpriseAdminSessionDetails = _startedEnterpriseAdminSessionDetails;
@synthesize teamMergeRequestAcceptedDetails = _teamMergeRequestAcceptedDetails;
@synthesize teamMergeRequestAcceptedShownToPrimaryTeamDetails = _teamMergeRequestAcceptedShownToPrimaryTeamDetails;
@synthesize teamMergeRequestAcceptedShownToSecondaryTeamDetails = _teamMergeRequestAcceptedShownToSecondaryTeamDetails;
@synthesize teamMergeRequestAutoCanceledDetails = _teamMergeRequestAutoCanceledDetails;
@synthesize teamMergeRequestCanceledDetails = _teamMergeRequestCanceledDetails;
@synthesize teamMergeRequestCanceledShownToPrimaryTeamDetails = _teamMergeRequestCanceledShownToPrimaryTeamDetails;
@synthesize teamMergeRequestCanceledShownToSecondaryTeamDetails = _teamMergeRequestCanceledShownToSecondaryTeamDetails;
@synthesize teamMergeRequestExpiredDetails = _teamMergeRequestExpiredDetails;
@synthesize teamMergeRequestExpiredShownToPrimaryTeamDetails = _teamMergeRequestExpiredShownToPrimaryTeamDetails;
@synthesize teamMergeRequestExpiredShownToSecondaryTeamDetails = _teamMergeRequestExpiredShownToSecondaryTeamDetails;
@synthesize teamMergeRequestRejectedShownToPrimaryTeamDetails = _teamMergeRequestRejectedShownToPrimaryTeamDetails;
@synthesize teamMergeRequestRejectedShownToSecondaryTeamDetails = _teamMergeRequestRejectedShownToSecondaryTeamDetails;
@synthesize teamMergeRequestReminderDetails = _teamMergeRequestReminderDetails;
@synthesize teamMergeRequestReminderShownToPrimaryTeamDetails = _teamMergeRequestReminderShownToPrimaryTeamDetails;
@synthesize teamMergeRequestReminderShownToSecondaryTeamDetails = _teamMergeRequestReminderShownToSecondaryTeamDetails;
@synthesize teamMergeRequestRevokedDetails = _teamMergeRequestRevokedDetails;
@synthesize teamMergeRequestSentShownToPrimaryTeamDetails = _teamMergeRequestSentShownToPrimaryTeamDetails;
@synthesize teamMergeRequestSentShownToSecondaryTeamDetails = _teamMergeRequestSentShownToSecondaryTeamDetails;
@synthesize missingDetails = _missingDetails;

#pragma mark - Constructors

- (instancetype)initWithAdminAlertingAlertStateChangedDetails:
    (DBTEAMLOGAdminAlertingAlertStateChangedDetails *)adminAlertingAlertStateChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails;
    _adminAlertingAlertStateChangedDetails = adminAlertingAlertStateChangedDetails;
  }
  return self;
}

- (instancetype)initWithAdminAlertingChangedAlertConfigDetails:
    (DBTEAMLOGAdminAlertingChangedAlertConfigDetails *)adminAlertingChangedAlertConfigDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails;
    _adminAlertingChangedAlertConfigDetails = adminAlertingChangedAlertConfigDetails;
  }
  return self;
}

- (instancetype)initWithAdminAlertingTriggeredAlertDetails:
    (DBTEAMLOGAdminAlertingTriggeredAlertDetails *)adminAlertingTriggeredAlertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails;
    _adminAlertingTriggeredAlertDetails = adminAlertingTriggeredAlertDetails;
  }
  return self;
}

- (instancetype)initWithAppBlockedByPermissionsDetails:
    (DBTEAMLOGAppBlockedByPermissionsDetails *)appBlockedByPermissionsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails;
    _appBlockedByPermissionsDetails = appBlockedByPermissionsDetails;
  }
  return self;
}

- (instancetype)initWithAppLinkTeamDetails:(DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkTeamDetails;
    _appLinkTeamDetails = appLinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppLinkUserDetails:(DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppLinkUserDetails;
    _appLinkUserDetails = appLinkUserDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkTeamDetails:(DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
    _appUnlinkTeamDetails = appUnlinkTeamDetails;
  }
  return self;
}

- (instancetype)initWithAppUnlinkUserDetails:(DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppUnlinkUserDetails;
    _appUnlinkUserDetails = appUnlinkUserDetails;
  }
  return self;
}

- (instancetype)initWithIntegrationConnectedDetails:
    (DBTEAMLOGIntegrationConnectedDetails *)integrationConnectedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsIntegrationConnectedDetails;
    _integrationConnectedDetails = integrationConnectedDetails;
  }
  return self;
}

- (instancetype)initWithIntegrationDisconnectedDetails:
    (DBTEAMLOGIntegrationDisconnectedDetails *)integrationDisconnectedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsIntegrationDisconnectedDetails;
    _integrationDisconnectedDetails = integrationDisconnectedDetails;
  }
  return self;
}

- (instancetype)initWithFileAddCommentDetails:(DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddCommentDetails;
    _fileAddCommentDetails = fileAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileChangeCommentSubscriptionDetails:
    (DBTEAMLOGFileChangeCommentSubscriptionDetails *)fileChangeCommentSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails;
    _fileChangeCommentSubscriptionDetails = fileChangeCommentSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithFileDeleteCommentDetails:(DBTEAMLOGFileDeleteCommentDetails *)fileDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDeleteCommentDetails;
    _fileDeleteCommentDetails = fileDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileEditCommentDetails:(DBTEAMLOGFileEditCommentDetails *)fileEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileEditCommentDetails;
    _fileEditCommentDetails = fileEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileLikeCommentDetails:(DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileLikeCommentDetails;
    _fileLikeCommentDetails = fileLikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileResolveCommentDetails:(DBTEAMLOGFileResolveCommentDetails *)fileResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileResolveCommentDetails;
    _fileResolveCommentDetails = fileResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileUnlikeCommentDetails:(DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
    _fileUnlikeCommentDetails = fileUnlikeCommentDetails;
  }
  return self;
}

- (instancetype)initWithFileUnresolveCommentDetails:
    (DBTEAMLOGFileUnresolveCommentDetails *)fileUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileUnresolveCommentDetails;
    _fileUnresolveCommentDetails = fileUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyAddFoldersDetails:
    (DBTEAMLOGGovernancePolicyAddFoldersDetails *)governancePolicyAddFoldersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails;
    _governancePolicyAddFoldersDetails = governancePolicyAddFoldersDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyAddFolderFailedDetails:
    (DBTEAMLOGGovernancePolicyAddFolderFailedDetails *)governancePolicyAddFolderFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails;
    _governancePolicyAddFolderFailedDetails = governancePolicyAddFolderFailedDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyContentDisposedDetails:
    (DBTEAMLOGGovernancePolicyContentDisposedDetails *)governancePolicyContentDisposedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails;
    _governancePolicyContentDisposedDetails = governancePolicyContentDisposedDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyCreateDetails:
    (DBTEAMLOGGovernancePolicyCreateDetails *)governancePolicyCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyCreateDetails;
    _governancePolicyCreateDetails = governancePolicyCreateDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyDeleteDetails:
    (DBTEAMLOGGovernancePolicyDeleteDetails *)governancePolicyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails;
    _governancePolicyDeleteDetails = governancePolicyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyEditDetailsDetails:
    (DBTEAMLOGGovernancePolicyEditDetailsDetails *)governancePolicyEditDetailsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails;
    _governancePolicyEditDetailsDetails = governancePolicyEditDetailsDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyEditDurationDetails:
    (DBTEAMLOGGovernancePolicyEditDurationDetails *)governancePolicyEditDurationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails;
    _governancePolicyEditDurationDetails = governancePolicyEditDurationDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyExportCreatedDetails:
    (DBTEAMLOGGovernancePolicyExportCreatedDetails *)governancePolicyExportCreatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails;
    _governancePolicyExportCreatedDetails = governancePolicyExportCreatedDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyExportRemovedDetails:
    (DBTEAMLOGGovernancePolicyExportRemovedDetails *)governancePolicyExportRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails;
    _governancePolicyExportRemovedDetails = governancePolicyExportRemovedDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyRemoveFoldersDetails:
    (DBTEAMLOGGovernancePolicyRemoveFoldersDetails *)governancePolicyRemoveFoldersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails;
    _governancePolicyRemoveFoldersDetails = governancePolicyRemoveFoldersDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyReportCreatedDetails:
    (DBTEAMLOGGovernancePolicyReportCreatedDetails *)governancePolicyReportCreatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails;
    _governancePolicyReportCreatedDetails = governancePolicyReportCreatedDetails;
  }
  return self;
}

- (instancetype)initWithGovernancePolicyZipPartDownloadedDetails:
    (DBTEAMLOGGovernancePolicyZipPartDownloadedDetails *)governancePolicyZipPartDownloadedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails;
    _governancePolicyZipPartDownloadedDetails = governancePolicyZipPartDownloadedDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsActivateAHoldDetails:
    (DBTEAMLOGLegalHoldsActivateAHoldDetails *)legalHoldsActivateAHoldDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails;
    _legalHoldsActivateAHoldDetails = legalHoldsActivateAHoldDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsAddMembersDetails:
    (DBTEAMLOGLegalHoldsAddMembersDetails *)legalHoldsAddMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails;
    _legalHoldsAddMembersDetails = legalHoldsAddMembersDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsChangeHoldDetailsDetails:
    (DBTEAMLOGLegalHoldsChangeHoldDetailsDetails *)legalHoldsChangeHoldDetailsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails;
    _legalHoldsChangeHoldDetailsDetails = legalHoldsChangeHoldDetailsDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsChangeHoldNameDetails:
    (DBTEAMLOGLegalHoldsChangeHoldNameDetails *)legalHoldsChangeHoldNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails;
    _legalHoldsChangeHoldNameDetails = legalHoldsChangeHoldNameDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsExportAHoldDetails:
    (DBTEAMLOGLegalHoldsExportAHoldDetails *)legalHoldsExportAHoldDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails;
    _legalHoldsExportAHoldDetails = legalHoldsExportAHoldDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsExportCancelledDetails:
    (DBTEAMLOGLegalHoldsExportCancelledDetails *)legalHoldsExportCancelledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails;
    _legalHoldsExportCancelledDetails = legalHoldsExportCancelledDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsExportDownloadedDetails:
    (DBTEAMLOGLegalHoldsExportDownloadedDetails *)legalHoldsExportDownloadedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails;
    _legalHoldsExportDownloadedDetails = legalHoldsExportDownloadedDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsExportRemovedDetails:
    (DBTEAMLOGLegalHoldsExportRemovedDetails *)legalHoldsExportRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails;
    _legalHoldsExportRemovedDetails = legalHoldsExportRemovedDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsReleaseAHoldDetails:
    (DBTEAMLOGLegalHoldsReleaseAHoldDetails *)legalHoldsReleaseAHoldDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails;
    _legalHoldsReleaseAHoldDetails = legalHoldsReleaseAHoldDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsRemoveMembersDetails:
    (DBTEAMLOGLegalHoldsRemoveMembersDetails *)legalHoldsRemoveMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails;
    _legalHoldsRemoveMembersDetails = legalHoldsRemoveMembersDetails;
  }
  return self;
}

- (instancetype)initWithLegalHoldsReportAHoldDetails:
    (DBTEAMLOGLegalHoldsReportAHoldDetails *)legalHoldsReportAHoldDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails;
    _legalHoldsReportAHoldDetails = legalHoldsReportAHoldDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpDesktopDetails:
    (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
    _deviceChangeIpDesktopDetails = deviceChangeIpDesktopDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpMobileDetails:
    (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
    _deviceChangeIpMobileDetails = deviceChangeIpMobileDetails;
  }
  return self;
}

- (instancetype)initWithDeviceChangeIpWebDetails:(DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
    _deviceChangeIpWebDetails = deviceChangeIpWebDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkFailDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
    _deviceDeleteOnUnlinkFailDetails = deviceDeleteOnUnlinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceDeleteOnUnlinkSuccessDetails:
    (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
    _deviceDeleteOnUnlinkSuccessDetails = deviceDeleteOnUnlinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkFailDetails:(DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkFailDetails;
    _deviceLinkFailDetails = deviceLinkFailDetails;
  }
  return self;
}

- (instancetype)initWithDeviceLinkSuccessDetails:(DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
    _deviceLinkSuccessDetails = deviceLinkSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementDisabledDetails:
    (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
    _deviceManagementDisabledDetails = deviceManagementDisabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceManagementEnabledDetails:
    (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
    _deviceManagementEnabledDetails = deviceManagementEnabledDetails;
  }
  return self;
}

- (instancetype)initWithDeviceSyncBackupStatusChangedDetails:
    (DBTEAMLOGDeviceSyncBackupStatusChangedDetails *)deviceSyncBackupStatusChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails;
    _deviceSyncBackupStatusChangedDetails = deviceSyncBackupStatusChangedDetails;
  }
  return self;
}

- (instancetype)initWithDeviceUnlinkDetails:(DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceUnlinkDetails;
    _deviceUnlinkDetails = deviceUnlinkDetails;
  }
  return self;
}

- (instancetype)initWithDropboxPasswordsExportedDetails:
    (DBTEAMLOGDropboxPasswordsExportedDetails *)dropboxPasswordsExportedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails;
    _dropboxPasswordsExportedDetails = dropboxPasswordsExportedDetails;
  }
  return self;
}

- (instancetype)initWithDropboxPasswordsNewDeviceEnrolledDetails:
    (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *)dropboxPasswordsNewDeviceEnrolledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails;
    _dropboxPasswordsNewDeviceEnrolledDetails = dropboxPasswordsNewDeviceEnrolledDetails;
  }
  return self;
}

- (instancetype)initWithEmmRefreshAuthTokenDetails:(DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
    _emmRefreshAuthTokenDetails = emmRefreshAuthTokenDetails;
  }
  return self;
}

- (instancetype)initWithExternalDriveBackupEligibilityStatusCheckedDetails:
    (DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails *)externalDriveBackupEligibilityStatusCheckedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails;
    _externalDriveBackupEligibilityStatusCheckedDetails = externalDriveBackupEligibilityStatusCheckedDetails;
  }
  return self;
}

- (instancetype)initWithExternalDriveBackupStatusChangedDetails:
    (DBTEAMLOGExternalDriveBackupStatusChangedDetails *)externalDriveBackupStatusChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails;
    _externalDriveBackupStatusChangedDetails = externalDriveBackupStatusChangedDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangeAvailabilityDetails:
    (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
    _accountCaptureChangeAvailabilityDetails = accountCaptureChangeAvailabilityDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureMigrateAccountDetails:
    (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
    _accountCaptureMigrateAccountDetails = accountCaptureMigrateAccountDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureNotificationEmailsSentDetails:
    (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)accountCaptureNotificationEmailsSentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails;
    _accountCaptureNotificationEmailsSentDetails = accountCaptureNotificationEmailsSentDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureRelinquishAccountDetails:
    (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
    _accountCaptureRelinquishAccountDetails = accountCaptureRelinquishAccountDetails;
  }
  return self;
}

- (instancetype)initWithDisabledDomainInvitesDetails:
    (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
    _disabledDomainInvitesDetails = disabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesApproveRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
    _domainInvitesApproveRequestToJoinTeamDetails = domainInvitesApproveRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesDeclineRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
    _domainInvitesDeclineRequestToJoinTeamDetails = domainInvitesDeclineRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesEmailExistingUsersDetails:
    (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
    _domainInvitesEmailExistingUsersDetails = domainInvitesEmailExistingUsersDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesRequestToJoinTeamDetails:
    (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
    _domainInvitesRequestToJoinTeamDetails = domainInvitesRequestToJoinTeamDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToNoDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
    _domainInvitesSetInviteNewUserPrefToNoDetails = domainInvitesSetInviteNewUserPrefToNoDetails;
  }
  return self;
}

- (instancetype)initWithDomainInvitesSetInviteNewUserPrefToYesDetails:
    (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
    _domainInvitesSetInviteNewUserPrefToYesDetails = domainInvitesSetInviteNewUserPrefToYesDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainFailDetails:
    (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
    _domainVerificationAddDomainFailDetails = domainVerificationAddDomainFailDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationAddDomainSuccessDetails:
    (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
    _domainVerificationAddDomainSuccessDetails = domainVerificationAddDomainSuccessDetails;
  }
  return self;
}

- (instancetype)initWithDomainVerificationRemoveDomainDetails:
    (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
    _domainVerificationRemoveDomainDetails = domainVerificationRemoveDomainDetails;
  }
  return self;
}

- (instancetype)initWithEnabledDomainInvitesDetails:
    (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
    _enabledDomainInvitesDetails = enabledDomainInvitesDetails;
  }
  return self;
}

- (instancetype)initWithApplyNamingConventionDetails:
    (DBTEAMLOGApplyNamingConventionDetails *)applyNamingConventionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsApplyNamingConventionDetails;
    _applyNamingConventionDetails = applyNamingConventionDetails;
  }
  return self;
}

- (instancetype)initWithCreateFolderDetails:(DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCreateFolderDetails;
    _createFolderDetails = createFolderDetails;
  }
  return self;
}

- (instancetype)initWithFileAddDetails:(DBTEAMLOGFileAddDetails *)fileAddDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileAddDetails;
    _fileAddDetails = fileAddDetails;
  }
  return self;
}

- (instancetype)initWithFileCopyDetails:(DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCopyDetails;
    _fileCopyDetails = fileCopyDetails;
  }
  return self;
}

- (instancetype)initWithFileDeleteDetails:(DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDeleteDetails;
    _fileDeleteDetails = fileDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFileDownloadDetails:(DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileDownloadDetails;
    _fileDownloadDetails = fileDownloadDetails;
  }
  return self;
}

- (instancetype)initWithFileEditDetails:(DBTEAMLOGFileEditDetails *)fileEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileEditDetails;
    _fileEditDetails = fileEditDetails;
  }
  return self;
}

- (instancetype)initWithFileGetCopyReferenceDetails:
    (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
    _fileGetCopyReferenceDetails = fileGetCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFileLockingLockStatusChangedDetails:
    (DBTEAMLOGFileLockingLockStatusChangedDetails *)fileLockingLockStatusChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails;
    _fileLockingLockStatusChangedDetails = fileLockingLockStatusChangedDetails;
  }
  return self;
}

- (instancetype)initWithFileMoveDetails:(DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileMoveDetails;
    _fileMoveDetails = fileMoveDetails;
  }
  return self;
}

- (instancetype)initWithFilePermanentlyDeleteDetails:
    (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
    _filePermanentlyDeleteDetails = filePermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFilePreviewDetails:(DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFilePreviewDetails;
    _filePreviewDetails = filePreviewDetails;
  }
  return self;
}

- (instancetype)initWithFileRenameDetails:(DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRenameDetails;
    _fileRenameDetails = fileRenameDetails;
  }
  return self;
}

- (instancetype)initWithFileRestoreDetails:(DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRestoreDetails;
    _fileRestoreDetails = fileRestoreDetails;
  }
  return self;
}

- (instancetype)initWithFileRevertDetails:(DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRevertDetails;
    _fileRevertDetails = fileRevertDetails;
  }
  return self;
}

- (instancetype)initWithFileRollbackChangesDetails:(DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRollbackChangesDetails;
    _fileRollbackChangesDetails = fileRollbackChangesDetails;
  }
  return self;
}

- (instancetype)initWithFileSaveCopyReferenceDetails:
    (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
    _fileSaveCopyReferenceDetails = fileSaveCopyReferenceDetails;
  }
  return self;
}

- (instancetype)initWithFolderOverviewDescriptionChangedDetails:
    (DBTEAMLOGFolderOverviewDescriptionChangedDetails *)folderOverviewDescriptionChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails;
    _folderOverviewDescriptionChangedDetails = folderOverviewDescriptionChangedDetails;
  }
  return self;
}

- (instancetype)initWithFolderOverviewItemPinnedDetails:
    (DBTEAMLOGFolderOverviewItemPinnedDetails *)folderOverviewItemPinnedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails;
    _folderOverviewItemPinnedDetails = folderOverviewItemPinnedDetails;
  }
  return self;
}

- (instancetype)initWithFolderOverviewItemUnpinnedDetails:
    (DBTEAMLOGFolderOverviewItemUnpinnedDetails *)folderOverviewItemUnpinnedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails;
    _folderOverviewItemUnpinnedDetails = folderOverviewItemUnpinnedDetails;
  }
  return self;
}

- (instancetype)initWithObjectLabelAddedDetails:(DBTEAMLOGObjectLabelAddedDetails *)objectLabelAddedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsObjectLabelAddedDetails;
    _objectLabelAddedDetails = objectLabelAddedDetails;
  }
  return self;
}

- (instancetype)initWithObjectLabelRemovedDetails:(DBTEAMLOGObjectLabelRemovedDetails *)objectLabelRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsObjectLabelRemovedDetails;
    _objectLabelRemovedDetails = objectLabelRemovedDetails;
  }
  return self;
}

- (instancetype)initWithObjectLabelUpdatedValueDetails:
    (DBTEAMLOGObjectLabelUpdatedValueDetails *)objectLabelUpdatedValueDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails;
    _objectLabelUpdatedValueDetails = objectLabelUpdatedValueDetails;
  }
  return self;
}

- (instancetype)initWithOrganizeFolderWithTidyDetails:
    (DBTEAMLOGOrganizeFolderWithTidyDetails *)organizeFolderWithTidyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails;
    _organizeFolderWithTidyDetails = organizeFolderWithTidyDetails;
  }
  return self;
}

- (instancetype)initWithRewindFolderDetails:(DBTEAMLOGRewindFolderDetails *)rewindFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsRewindFolderDetails;
    _rewindFolderDetails = rewindFolderDetails;
  }
  return self;
}

- (instancetype)initWithUndoNamingConventionDetails:
    (DBTEAMLOGUndoNamingConventionDetails *)undoNamingConventionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsUndoNamingConventionDetails;
    _undoNamingConventionDetails = undoNamingConventionDetails;
  }
  return self;
}

- (instancetype)initWithUndoOrganizeFolderWithTidyDetails:
    (DBTEAMLOGUndoOrganizeFolderWithTidyDetails *)undoOrganizeFolderWithTidyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails;
    _undoOrganizeFolderWithTidyDetails = undoOrganizeFolderWithTidyDetails;
  }
  return self;
}

- (instancetype)initWithUserTagsAddedDetails:(DBTEAMLOGUserTagsAddedDetails *)userTagsAddedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsUserTagsAddedDetails;
    _userTagsAddedDetails = userTagsAddedDetails;
  }
  return self;
}

- (instancetype)initWithUserTagsRemovedDetails:(DBTEAMLOGUserTagsRemovedDetails *)userTagsRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsUserTagsRemovedDetails;
    _userTagsRemovedDetails = userTagsRemovedDetails;
  }
  return self;
}

- (instancetype)initWithEmailIngestReceiveFileDetails:
    (DBTEAMLOGEmailIngestReceiveFileDetails *)emailIngestReceiveFileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails;
    _emailIngestReceiveFileDetails = emailIngestReceiveFileDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestChangeDetails:(DBTEAMLOGFileRequestChangeDetails *)fileRequestChangeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestChangeDetails;
    _fileRequestChangeDetails = fileRequestChangeDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCloseDetails:(DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCloseDetails;
    _fileRequestCloseDetails = fileRequestCloseDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestCreateDetails:(DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestCreateDetails;
    _fileRequestCreateDetails = fileRequestCreateDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestDeleteDetails:(DBTEAMLOGFileRequestDeleteDetails *)fileRequestDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestDeleteDetails;
    _fileRequestDeleteDetails = fileRequestDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestReceiveFileDetails:
    (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
    _fileRequestReceiveFileDetails = fileRequestReceiveFileDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddExternalIdDetails:(DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
    _groupAddExternalIdDetails = groupAddExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupAddMemberDetails:(DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupAddMemberDetails;
    _groupAddMemberDetails = groupAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeExternalIdDetails:
    (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
    _groupChangeExternalIdDetails = groupChangeExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeManagementTypeDetails:
    (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
    _groupChangeManagementTypeDetails = groupChangeManagementTypeDetails;
  }
  return self;
}

- (instancetype)initWithGroupChangeMemberRoleDetails:
    (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
    _groupChangeMemberRoleDetails = groupChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithGroupCreateDetails:(DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupCreateDetails;
    _groupCreateDetails = groupCreateDetails;
  }
  return self;
}

- (instancetype)initWithGroupDeleteDetails:(DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDeleteDetails;
    _groupDeleteDetails = groupDeleteDetails;
  }
  return self;
}

- (instancetype)initWithGroupDescriptionUpdatedDetails:
    (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
    _groupDescriptionUpdatedDetails = groupDescriptionUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupJoinPolicyUpdatedDetails:
    (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
    _groupJoinPolicyUpdatedDetails = groupJoinPolicyUpdatedDetails;
  }
  return self;
}

- (instancetype)initWithGroupMovedDetails:(DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupMovedDetails;
    _groupMovedDetails = groupMovedDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveExternalIdDetails:
    (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
    _groupRemoveExternalIdDetails = groupRemoveExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithGroupRemoveMemberDetails:(DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
    _groupRemoveMemberDetails = groupRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithGroupRenameDetails:(DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupRenameDetails;
    _groupRenameDetails = groupRenameDetails;
  }
  return self;
}

- (instancetype)initWithAccountLockOrUnlockedDetails:
    (DBTEAMLOGAccountLockOrUnlockedDetails *)accountLockOrUnlockedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails;
    _accountLockOrUnlockedDetails = accountLockOrUnlockedDetails;
  }
  return self;
}

- (instancetype)initWithEmmErrorDetails:(DBTEAMLOGEmmErrorDetails *)emmErrorDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmErrorDetails;
    _emmErrorDetails = emmErrorDetails;
  }
  return self;
}

- (instancetype)initWithGuestAdminSignedInViaTrustedTeamsDetails:
    (DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails *)guestAdminSignedInViaTrustedTeamsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails;
    _guestAdminSignedInViaTrustedTeamsDetails = guestAdminSignedInViaTrustedTeamsDetails;
  }
  return self;
}

- (instancetype)initWithGuestAdminSignedOutViaTrustedTeamsDetails:
    (DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails *)guestAdminSignedOutViaTrustedTeamsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails;
    _guestAdminSignedOutViaTrustedTeamsDetails = guestAdminSignedOutViaTrustedTeamsDetails;
  }
  return self;
}

- (instancetype)initWithLoginFailDetails:(DBTEAMLOGLoginFailDetails *)loginFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLoginFailDetails;
    _loginFailDetails = loginFailDetails;
  }
  return self;
}

- (instancetype)initWithLoginSuccessDetails:(DBTEAMLOGLoginSuccessDetails *)loginSuccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLoginSuccessDetails;
    _loginSuccessDetails = loginSuccessDetails;
  }
  return self;
}

- (instancetype)initWithLogoutDetails:(DBTEAMLOGLogoutDetails *)logoutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsLogoutDetails;
    _logoutDetails = logoutDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionEndDetails:
    (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
    _resellerSupportSessionEndDetails = resellerSupportSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportSessionStartDetails:
    (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
    _resellerSupportSessionStartDetails = resellerSupportSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionEndDetails:(DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
    _signInAsSessionEndDetails = signInAsSessionEndDetails;
  }
  return self;
}

- (instancetype)initWithSignInAsSessionStartDetails:
    (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
    _signInAsSessionStartDetails = signInAsSessionStartDetails;
  }
  return self;
}

- (instancetype)initWithSsoErrorDetails:(DBTEAMLOGSsoErrorDetails *)ssoErrorDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoErrorDetails;
    _ssoErrorDetails = ssoErrorDetails;
  }
  return self;
}

- (instancetype)initWithCreateTeamInviteLinkDetails:
    (DBTEAMLOGCreateTeamInviteLinkDetails *)createTeamInviteLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails;
    _createTeamInviteLinkDetails = createTeamInviteLinkDetails;
  }
  return self;
}

- (instancetype)initWithDeleteTeamInviteLinkDetails:
    (DBTEAMLOGDeleteTeamInviteLinkDetails *)deleteTeamInviteLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails;
    _deleteTeamInviteLinkDetails = deleteTeamInviteLinkDetails;
  }
  return self;
}

- (instancetype)initWithMemberAddExternalIdDetails:(DBTEAMLOGMemberAddExternalIdDetails *)memberAddExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberAddExternalIdDetails;
    _memberAddExternalIdDetails = memberAddExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithMemberAddNameDetails:(DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberAddNameDetails;
    _memberAddNameDetails = memberAddNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeAdminRoleDetails:
    (DBTEAMLOGMemberChangeAdminRoleDetails *)memberChangeAdminRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails;
    _memberChangeAdminRoleDetails = memberChangeAdminRoleDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeEmailDetails:(DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeEmailDetails;
    _memberChangeEmailDetails = memberChangeEmailDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeExternalIdDetails:
    (DBTEAMLOGMemberChangeExternalIdDetails *)memberChangeExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeExternalIdDetails;
    _memberChangeExternalIdDetails = memberChangeExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeMembershipTypeDetails:
    (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
    _memberChangeMembershipTypeDetails = memberChangeMembershipTypeDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeNameDetails:(DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeNameDetails;
    _memberChangeNameDetails = memberChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeResellerRoleDetails:
    (DBTEAMLOGMemberChangeResellerRoleDetails *)memberChangeResellerRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails;
    _memberChangeResellerRoleDetails = memberChangeResellerRoleDetails;
  }
  return self;
}

- (instancetype)initWithMemberChangeStatusDetails:(DBTEAMLOGMemberChangeStatusDetails *)memberChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberChangeStatusDetails;
    _memberChangeStatusDetails = memberChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithMemberDeleteManualContactsDetails:
    (DBTEAMLOGMemberDeleteManualContactsDetails *)memberDeleteManualContactsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails;
    _memberDeleteManualContactsDetails = memberDeleteManualContactsDetails;
  }
  return self;
}

- (instancetype)initWithMemberDeleteProfilePhotoDetails:
    (DBTEAMLOGMemberDeleteProfilePhotoDetails *)memberDeleteProfilePhotoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails;
    _memberDeleteProfilePhotoDetails = memberDeleteProfilePhotoDetails;
  }
  return self;
}

- (instancetype)initWithMemberPermanentlyDeleteAccountContentsDetails:
    (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
    _memberPermanentlyDeleteAccountContentsDetails = memberPermanentlyDeleteAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithMemberRemoveExternalIdDetails:
    (DBTEAMLOGMemberRemoveExternalIdDetails *)memberRemoveExternalIdDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails;
    _memberRemoveExternalIdDetails = memberRemoveExternalIdDetails;
  }
  return self;
}

- (instancetype)initWithMemberSetProfilePhotoDetails:
    (DBTEAMLOGMemberSetProfilePhotoDetails *)memberSetProfilePhotoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails;
    _memberSetProfilePhotoDetails = memberSetProfilePhotoDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)memberSpaceLimitsAddCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails;
    _memberSpaceLimitsAddCustomQuotaDetails = memberSpaceLimitsAddCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)memberSpaceLimitsChangeCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails;
    _memberSpaceLimitsChangeCustomQuotaDetails = memberSpaceLimitsChangeCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeStatusDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
    _memberSpaceLimitsChangeStatusDetails = memberSpaceLimitsChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveCustomQuotaDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)memberSpaceLimitsRemoveCustomQuotaDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails;
    _memberSpaceLimitsRemoveCustomQuotaDetails = memberSpaceLimitsRemoveCustomQuotaDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestDetails:(DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestDetails;
    _memberSuggestDetails = memberSuggestDetails;
  }
  return self;
}

- (instancetype)initWithMemberTransferAccountContentsDetails:
    (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
    _memberTransferAccountContentsDetails = memberTransferAccountContentsDetails;
  }
  return self;
}

- (instancetype)initWithPendingSecondaryEmailAddedDetails:
    (DBTEAMLOGPendingSecondaryEmailAddedDetails *)pendingSecondaryEmailAddedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails;
    _pendingSecondaryEmailAddedDetails = pendingSecondaryEmailAddedDetails;
  }
  return self;
}

- (instancetype)initWithSecondaryEmailDeletedDetails:
    (DBTEAMLOGSecondaryEmailDeletedDetails *)secondaryEmailDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails;
    _secondaryEmailDeletedDetails = secondaryEmailDeletedDetails;
  }
  return self;
}

- (instancetype)initWithSecondaryEmailVerifiedDetails:
    (DBTEAMLOGSecondaryEmailVerifiedDetails *)secondaryEmailVerifiedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails;
    _secondaryEmailVerifiedDetails = secondaryEmailVerifiedDetails;
  }
  return self;
}

- (instancetype)initWithSecondaryMailsPolicyChangedDetails:
    (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)secondaryMailsPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails;
    _secondaryMailsPolicyChangedDetails = secondaryMailsPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithBinderAddPageDetails:(DBTEAMLOGBinderAddPageDetails *)binderAddPageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderAddPageDetails;
    _binderAddPageDetails = binderAddPageDetails;
  }
  return self;
}

- (instancetype)initWithBinderAddSectionDetails:(DBTEAMLOGBinderAddSectionDetails *)binderAddSectionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderAddSectionDetails;
    _binderAddSectionDetails = binderAddSectionDetails;
  }
  return self;
}

- (instancetype)initWithBinderRemovePageDetails:(DBTEAMLOGBinderRemovePageDetails *)binderRemovePageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderRemovePageDetails;
    _binderRemovePageDetails = binderRemovePageDetails;
  }
  return self;
}

- (instancetype)initWithBinderRemoveSectionDetails:(DBTEAMLOGBinderRemoveSectionDetails *)binderRemoveSectionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderRemoveSectionDetails;
    _binderRemoveSectionDetails = binderRemoveSectionDetails;
  }
  return self;
}

- (instancetype)initWithBinderRenamePageDetails:(DBTEAMLOGBinderRenamePageDetails *)binderRenamePageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderRenamePageDetails;
    _binderRenamePageDetails = binderRenamePageDetails;
  }
  return self;
}

- (instancetype)initWithBinderRenameSectionDetails:(DBTEAMLOGBinderRenameSectionDetails *)binderRenameSectionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderRenameSectionDetails;
    _binderRenameSectionDetails = binderRenameSectionDetails;
  }
  return self;
}

- (instancetype)initWithBinderReorderPageDetails:(DBTEAMLOGBinderReorderPageDetails *)binderReorderPageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderReorderPageDetails;
    _binderReorderPageDetails = binderReorderPageDetails;
  }
  return self;
}

- (instancetype)initWithBinderReorderSectionDetails:
    (DBTEAMLOGBinderReorderSectionDetails *)binderReorderSectionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsBinderReorderSectionDetails;
    _binderReorderSectionDetails = binderReorderSectionDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddMemberDetails:
    (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
    _paperContentAddMemberDetails = paperContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentAddToFolderDetails:
    (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
    _paperContentAddToFolderDetails = paperContentAddToFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentArchiveDetails:(DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentArchiveDetails;
    _paperContentArchiveDetails = paperContentArchiveDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentCreateDetails:(DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentCreateDetails;
    _paperContentCreateDetails = paperContentCreateDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentPermanentlyDeleteDetails:
    (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
    _paperContentPermanentlyDeleteDetails = paperContentPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveFromFolderDetails:
    (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
    _paperContentRemoveFromFolderDetails = paperContentRemoveFromFolderDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRemoveMemberDetails:
    (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
    _paperContentRemoveMemberDetails = paperContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRenameDetails:(DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRenameDetails;
    _paperContentRenameDetails = paperContentRenameDetails;
  }
  return self;
}

- (instancetype)initWithPaperContentRestoreDetails:(DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperContentRestoreDetails;
    _paperContentRestoreDetails = paperContentRestoreDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocAddCommentDetails:(DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
    _paperDocAddCommentDetails = paperDocAddCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeMemberRoleDetails:
    (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
    _paperDocChangeMemberRoleDetails = paperDocChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSharingPolicyDetails:
    (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
    _paperDocChangeSharingPolicyDetails = paperDocChangeSharingPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocChangeSubscriptionDetails:
    (DBTEAMLOGPaperDocChangeSubscriptionDetails *)paperDocChangeSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails;
    _paperDocChangeSubscriptionDetails = paperDocChangeSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeletedDetails:(DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeletedDetails;
    _paperDocDeletedDetails = paperDocDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDeleteCommentDetails:
    (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
    _paperDocDeleteCommentDetails = paperDocDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocDownloadDetails:(DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocDownloadDetails;
    _paperDocDownloadDetails = paperDocDownloadDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditDetails:(DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditDetails;
    _paperDocEditDetails = paperDocEditDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocEditCommentDetails:(DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
    _paperDocEditCommentDetails = paperDocEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocFollowedDetails:(DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocFollowedDetails;
    _paperDocFollowedDetails = paperDocFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocMentionDetails:(DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocMentionDetails;
    _paperDocMentionDetails = paperDocMentionDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocOwnershipChangedDetails:
    (DBTEAMLOGPaperDocOwnershipChangedDetails *)paperDocOwnershipChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails;
    _paperDocOwnershipChangedDetails = paperDocOwnershipChangedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRequestAccessDetails:
    (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
    _paperDocRequestAccessDetails = paperDocRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocResolveCommentDetails:
    (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
    _paperDocResolveCommentDetails = paperDocResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocRevertDetails:(DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocRevertDetails;
    _paperDocRevertDetails = paperDocRevertDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocSlackShareDetails:(DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
    _paperDocSlackShareDetails = paperDocSlackShareDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocTeamInviteDetails:(DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
    _paperDocTeamInviteDetails = paperDocTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocTrashedDetails:(DBTEAMLOGPaperDocTrashedDetails *)paperDocTrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocTrashedDetails;
    _paperDocTrashedDetails = paperDocTrashedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocUnresolveCommentDetails:
    (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
    _paperDocUnresolveCommentDetails = paperDocUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocUntrashedDetails:(DBTEAMLOGPaperDocUntrashedDetails *)paperDocUntrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocUntrashedDetails;
    _paperDocUntrashedDetails = paperDocUntrashedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDocViewDetails:(DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDocViewDetails;
    _paperDocViewDetails = paperDocViewDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewAllowDetails:
    (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
    _paperExternalViewAllowDetails = paperExternalViewAllowDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewDefaultTeamDetails:
    (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
    _paperExternalViewDefaultTeamDetails = paperExternalViewDefaultTeamDetails;
  }
  return self;
}

- (instancetype)initWithPaperExternalViewForbidDetails:
    (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
    _paperExternalViewForbidDetails = paperExternalViewForbidDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderChangeSubscriptionDetails:
    (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)paperFolderChangeSubscriptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails;
    _paperFolderChangeSubscriptionDetails = paperFolderChangeSubscriptionDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderDeletedDetails:(DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
    _paperFolderDeletedDetails = paperFolderDeletedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderFollowedDetails:(DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
    _paperFolderFollowedDetails = paperFolderFollowedDetails;
  }
  return self;
}

- (instancetype)initWithPaperFolderTeamInviteDetails:
    (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
    _paperFolderTeamInviteDetails = paperFolderTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithPaperPublishedLinkChangePermissionDetails:
    (DBTEAMLOGPaperPublishedLinkChangePermissionDetails *)paperPublishedLinkChangePermissionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails;
    _paperPublishedLinkChangePermissionDetails = paperPublishedLinkChangePermissionDetails;
  }
  return self;
}

- (instancetype)initWithPaperPublishedLinkCreateDetails:
    (DBTEAMLOGPaperPublishedLinkCreateDetails *)paperPublishedLinkCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails;
    _paperPublishedLinkCreateDetails = paperPublishedLinkCreateDetails;
  }
  return self;
}

- (instancetype)initWithPaperPublishedLinkDisabledDetails:
    (DBTEAMLOGPaperPublishedLinkDisabledDetails *)paperPublishedLinkDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails;
    _paperPublishedLinkDisabledDetails = paperPublishedLinkDisabledDetails;
  }
  return self;
}

- (instancetype)initWithPaperPublishedLinkViewDetails:
    (DBTEAMLOGPaperPublishedLinkViewDetails *)paperPublishedLinkViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails;
    _paperPublishedLinkViewDetails = paperPublishedLinkViewDetails;
  }
  return self;
}

- (instancetype)initWithPasswordChangeDetails:(DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordChangeDetails;
    _passwordChangeDetails = passwordChangeDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetDetails:(DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetDetails;
    _passwordResetDetails = passwordResetDetails;
  }
  return self;
}

- (instancetype)initWithPasswordResetAllDetails:(DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordResetAllDetails;
    _passwordResetAllDetails = passwordResetAllDetails;
  }
  return self;
}

- (instancetype)initWithClassificationCreateReportDetails:
    (DBTEAMLOGClassificationCreateReportDetails *)classificationCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsClassificationCreateReportDetails;
    _classificationCreateReportDetails = classificationCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithClassificationCreateReportFailDetails:
    (DBTEAMLOGClassificationCreateReportFailDetails *)classificationCreateReportFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsClassificationCreateReportFailDetails;
    _classificationCreateReportFailDetails = classificationCreateReportFailDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateExceptionsReportDetails:
    (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
    _emmCreateExceptionsReportDetails = emmCreateExceptionsReportDetails;
  }
  return self;
}

- (instancetype)initWithEmmCreateUsageReportDetails:
    (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
    _emmCreateUsageReportDetails = emmCreateUsageReportDetails;
  }
  return self;
}

- (instancetype)initWithExportMembersReportDetails:(DBTEAMLOGExportMembersReportDetails *)exportMembersReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExportMembersReportDetails;
    _exportMembersReportDetails = exportMembersReportDetails;
  }
  return self;
}

- (instancetype)initWithExportMembersReportFailDetails:
    (DBTEAMLOGExportMembersReportFailDetails *)exportMembersReportFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExportMembersReportFailDetails;
    _exportMembersReportFailDetails = exportMembersReportFailDetails;
  }
  return self;
}

- (instancetype)initWithExternalSharingCreateReportDetails:
    (DBTEAMLOGExternalSharingCreateReportDetails *)externalSharingCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExternalSharingCreateReportDetails;
    _externalSharingCreateReportDetails = externalSharingCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithExternalSharingReportFailedDetails:
    (DBTEAMLOGExternalSharingReportFailedDetails *)externalSharingReportFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExternalSharingReportFailedDetails;
    _externalSharingReportFailedDetails = externalSharingReportFailedDetails;
  }
  return self;
}

- (instancetype)initWithNoExpirationLinkGenCreateReportDetails:
    (DBTEAMLOGNoExpirationLinkGenCreateReportDetails *)noExpirationLinkGenCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails;
    _noExpirationLinkGenCreateReportDetails = noExpirationLinkGenCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithNoExpirationLinkGenReportFailedDetails:
    (DBTEAMLOGNoExpirationLinkGenReportFailedDetails *)noExpirationLinkGenReportFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails;
    _noExpirationLinkGenReportFailedDetails = noExpirationLinkGenReportFailedDetails;
  }
  return self;
}

- (instancetype)initWithNoPasswordLinkGenCreateReportDetails:
    (DBTEAMLOGNoPasswordLinkGenCreateReportDetails *)noPasswordLinkGenCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails;
    _noPasswordLinkGenCreateReportDetails = noPasswordLinkGenCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithNoPasswordLinkGenReportFailedDetails:
    (DBTEAMLOGNoPasswordLinkGenReportFailedDetails *)noPasswordLinkGenReportFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails;
    _noPasswordLinkGenReportFailedDetails = noPasswordLinkGenReportFailedDetails;
  }
  return self;
}

- (instancetype)initWithNoPasswordLinkViewCreateReportDetails:
    (DBTEAMLOGNoPasswordLinkViewCreateReportDetails *)noPasswordLinkViewCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails;
    _noPasswordLinkViewCreateReportDetails = noPasswordLinkViewCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithNoPasswordLinkViewReportFailedDetails:
    (DBTEAMLOGNoPasswordLinkViewReportFailedDetails *)noPasswordLinkViewReportFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails;
    _noPasswordLinkViewReportFailedDetails = noPasswordLinkViewReportFailedDetails;
  }
  return self;
}

- (instancetype)initWithOutdatedLinkViewCreateReportDetails:
    (DBTEAMLOGOutdatedLinkViewCreateReportDetails *)outdatedLinkViewCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails;
    _outdatedLinkViewCreateReportDetails = outdatedLinkViewCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithOutdatedLinkViewReportFailedDetails:
    (DBTEAMLOGOutdatedLinkViewReportFailedDetails *)outdatedLinkViewReportFailedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails;
    _outdatedLinkViewReportFailedDetails = outdatedLinkViewReportFailedDetails;
  }
  return self;
}

- (instancetype)initWithPaperAdminExportStartDetails:
    (DBTEAMLOGPaperAdminExportStartDetails *)paperAdminExportStartDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperAdminExportStartDetails;
    _paperAdminExportStartDetails = paperAdminExportStartDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncCreateAdminPrivilegeReportDetails:
    (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
    _smartSyncCreateAdminPrivilegeReportDetails = smartSyncCreateAdminPrivilegeReportDetails;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReportDetails:
    (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
    _teamActivityCreateReportDetails = teamActivityCreateReportDetails;
  }
  return self;
}

- (instancetype)initWithTeamActivityCreateReportFailDetails:
    (DBTEAMLOGTeamActivityCreateReportFailDetails *)teamActivityCreateReportFailDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails;
    _teamActivityCreateReportFailDetails = teamActivityCreateReportFailDetails;
  }
  return self;
}

- (instancetype)initWithCollectionShareDetails:(DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCollectionShareDetails;
    _collectionShareDetails = collectionShareDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersFileAddDetails:
    (DBTEAMLOGFileTransfersFileAddDetails *)fileTransfersFileAddDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersFileAddDetails;
    _fileTransfersFileAddDetails = fileTransfersFileAddDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersTransferDeleteDetails:
    (DBTEAMLOGFileTransfersTransferDeleteDetails *)fileTransfersTransferDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails;
    _fileTransfersTransferDeleteDetails = fileTransfersTransferDeleteDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersTransferDownloadDetails:
    (DBTEAMLOGFileTransfersTransferDownloadDetails *)fileTransfersTransferDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails;
    _fileTransfersTransferDownloadDetails = fileTransfersTransferDownloadDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersTransferSendDetails:
    (DBTEAMLOGFileTransfersTransferSendDetails *)fileTransfersTransferSendDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersTransferSendDetails;
    _fileTransfersTransferSendDetails = fileTransfersTransferSendDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersTransferViewDetails:
    (DBTEAMLOGFileTransfersTransferViewDetails *)fileTransfersTransferViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersTransferViewDetails;
    _fileTransfersTransferViewDetails = fileTransfersTransferViewDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclInviteOnlyDetails:(DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
    _noteAclInviteOnlyDetails = noteAclInviteOnlyDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclLinkDetails:(DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclLinkDetails;
    _noteAclLinkDetails = noteAclLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteAclTeamLinkDetails:(DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
    _noteAclTeamLinkDetails = noteAclTeamLinkDetails;
  }
  return self;
}

- (instancetype)initWithNoteSharedDetails:(DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteSharedDetails;
    _noteSharedDetails = noteSharedDetails;
  }
  return self;
}

- (instancetype)initWithNoteShareReceiveDetails:(DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNoteShareReceiveDetails;
    _noteShareReceiveDetails = noteShareReceiveDetails;
  }
  return self;
}

- (instancetype)initWithOpenNoteSharedDetails:(DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOpenNoteSharedDetails;
    _openNoteSharedDetails = openNoteSharedDetails;
  }
  return self;
}

- (instancetype)initWithSfAddGroupDetails:(DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAddGroupDetails;
    _sfAddGroupDetails = sfAddGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfAllowNonMembersToViewSharedLinksDetails:
    (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
    _sfAllowNonMembersToViewSharedLinksDetails = sfAllowNonMembersToViewSharedLinksDetails;
  }
  return self;
}

- (instancetype)initWithSfExternalInviteWarnDetails:
    (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
    _sfExternalInviteWarnDetails = sfExternalInviteWarnDetails;
  }
  return self;
}

- (instancetype)initWithSfFbInviteDetails:(DBTEAMLOGSfFbInviteDetails *)sfFbInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbInviteDetails;
    _sfFbInviteDetails = sfFbInviteDetails;
  }
  return self;
}

- (instancetype)initWithSfFbInviteChangeRoleDetails:
    (DBTEAMLOGSfFbInviteChangeRoleDetails *)sfFbInviteChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails;
    _sfFbInviteChangeRoleDetails = sfFbInviteChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSfFbUninviteDetails:(DBTEAMLOGSfFbUninviteDetails *)sfFbUninviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfFbUninviteDetails;
    _sfFbUninviteDetails = sfFbUninviteDetails;
  }
  return self;
}

- (instancetype)initWithSfInviteGroupDetails:(DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfInviteGroupDetails;
    _sfInviteGroupDetails = sfInviteGroupDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamGrantAccessDetails:(DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
    _sfTeamGrantAccessDetails = sfTeamGrantAccessDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteDetails:(DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteDetails;
    _sfTeamInviteDetails = sfTeamInviteDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamInviteChangeRoleDetails:
    (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
    _sfTeamInviteChangeRoleDetails = sfTeamInviteChangeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinDetails:(DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinDetails;
    _sfTeamJoinDetails = sfTeamJoinDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamJoinFromOobLinkDetails:
    (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
    _sfTeamJoinFromOobLinkDetails = sfTeamJoinFromOobLinkDetails;
  }
  return self;
}

- (instancetype)initWithSfTeamUninviteDetails:(DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSfTeamUninviteDetails;
    _sfTeamUninviteDetails = sfTeamUninviteDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddInviteesDetails:
    (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
    _sharedContentAddInviteesDetails = sharedContentAddInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkExpiryDetails:
    (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
    _sharedContentAddLinkExpiryDetails = sharedContentAddLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddLinkPasswordDetails:
    (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
    _sharedContentAddLinkPasswordDetails = sharedContentAddLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentAddMemberDetails:
    (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
    _sharedContentAddMemberDetails = sharedContentAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeDownloadsPolicyDetails:
    (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
    _sharedContentChangeDownloadsPolicyDetails = sharedContentChangeDownloadsPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeInviteeRoleDetails:
    (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
    _sharedContentChangeInviteeRoleDetails = sharedContentChangeInviteeRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkAudienceDetails:
    (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
    _sharedContentChangeLinkAudienceDetails = sharedContentChangeLinkAudienceDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkExpiryDetails:
    (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
    _sharedContentChangeLinkExpiryDetails = sharedContentChangeLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeLinkPasswordDetails:
    (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
    _sharedContentChangeLinkPasswordDetails = sharedContentChangeLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeMemberRoleDetails:
    (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
    _sharedContentChangeMemberRoleDetails = sharedContentChangeMemberRoleDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentChangeViewerInfoPolicyDetails:
    (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
    _sharedContentChangeViewerInfoPolicyDetails = sharedContentChangeViewerInfoPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentClaimInvitationDetails:
    (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
    _sharedContentClaimInvitationDetails = sharedContentClaimInvitationDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentCopyDetails:(DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentCopyDetails;
    _sharedContentCopyDetails = sharedContentCopyDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentDownloadDetails:
    (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentDownloadDetails;
    _sharedContentDownloadDetails = sharedContentDownloadDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRelinquishMembershipDetails:
    (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
    _sharedContentRelinquishMembershipDetails = sharedContentRelinquishMembershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveInviteesDetails:
    (DBTEAMLOGSharedContentRemoveInviteesDetails *)sharedContentRemoveInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails;
    _sharedContentRemoveInviteesDetails = sharedContentRemoveInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkExpiryDetails:
    (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
    _sharedContentRemoveLinkExpiryDetails = sharedContentRemoveLinkExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveLinkPasswordDetails:
    (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
    _sharedContentRemoveLinkPasswordDetails = sharedContentRemoveLinkPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRemoveMemberDetails:
    (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
    _sharedContentRemoveMemberDetails = sharedContentRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRequestAccessDetails:
    (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
    _sharedContentRequestAccessDetails = sharedContentRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRestoreInviteesDetails:
    (DBTEAMLOGSharedContentRestoreInviteesDetails *)sharedContentRestoreInviteesDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails;
    _sharedContentRestoreInviteesDetails = sharedContentRestoreInviteesDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentRestoreMemberDetails:
    (DBTEAMLOGSharedContentRestoreMemberDetails *)sharedContentRestoreMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails;
    _sharedContentRestoreMemberDetails = sharedContentRestoreMemberDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentUnshareDetails:
    (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentUnshareDetails;
    _sharedContentUnshareDetails = sharedContentUnshareDetails;
  }
  return self;
}

- (instancetype)initWithSharedContentViewDetails:(DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedContentViewDetails;
    _sharedContentViewDetails = sharedContentViewDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeLinkPolicyDetails:
    (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
    _sharedFolderChangeLinkPolicyDetails = sharedFolderChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersInheritancePolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)sharedFolderChangeMembersInheritancePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails;
    _sharedFolderChangeMembersInheritancePolicyDetails = sharedFolderChangeMembersInheritancePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersManagementPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)sharedFolderChangeMembersManagementPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails;
    _sharedFolderChangeMembersManagementPolicyDetails = sharedFolderChangeMembersManagementPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderChangeMembersPolicyDetails:
    (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)sharedFolderChangeMembersPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails;
    _sharedFolderChangeMembersPolicyDetails = sharedFolderChangeMembersPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderCreateDetails:(DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderCreateDetails;
    _sharedFolderCreateDetails = sharedFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderDeclineInvitationDetails:
    (DBTEAMLOGSharedFolderDeclineInvitationDetails *)sharedFolderDeclineInvitationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails;
    _sharedFolderDeclineInvitationDetails = sharedFolderDeclineInvitationDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderMountDetails:(DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderMountDetails;
    _sharedFolderMountDetails = sharedFolderMountDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderNestDetails:(DBTEAMLOGSharedFolderNestDetails *)sharedFolderNestDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderNestDetails;
    _sharedFolderNestDetails = sharedFolderNestDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderTransferOwnershipDetails:
    (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
    _sharedFolderTransferOwnershipDetails = sharedFolderTransferOwnershipDetails;
  }
  return self;
}

- (instancetype)initWithSharedFolderUnmountDetails:(DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
    _sharedFolderUnmountDetails = sharedFolderUnmountDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkAddExpiryDetails:(DBTEAMLOGSharedLinkAddExpiryDetails *)sharedLinkAddExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails;
    _sharedLinkAddExpiryDetails = sharedLinkAddExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeExpiryDetails:
    (DBTEAMLOGSharedLinkChangeExpiryDetails *)sharedLinkChangeExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails;
    _sharedLinkChangeExpiryDetails = sharedLinkChangeExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkChangeVisibilityDetails:
    (DBTEAMLOGSharedLinkChangeVisibilityDetails *)sharedLinkChangeVisibilityDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails;
    _sharedLinkChangeVisibilityDetails = sharedLinkChangeVisibilityDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkCopyDetails:(DBTEAMLOGSharedLinkCopyDetails *)sharedLinkCopyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkCopyDetails;
    _sharedLinkCopyDetails = sharedLinkCopyDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkCreateDetails:(DBTEAMLOGSharedLinkCreateDetails *)sharedLinkCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkCreateDetails;
    _sharedLinkCreateDetails = sharedLinkCreateDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkDisableDetails:(DBTEAMLOGSharedLinkDisableDetails *)sharedLinkDisableDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkDisableDetails;
    _sharedLinkDisableDetails = sharedLinkDisableDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkDownloadDetails:(DBTEAMLOGSharedLinkDownloadDetails *)sharedLinkDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkDownloadDetails;
    _sharedLinkDownloadDetails = sharedLinkDownloadDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkRemoveExpiryDetails:
    (DBTEAMLOGSharedLinkRemoveExpiryDetails *)sharedLinkRemoveExpiryDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails;
    _sharedLinkRemoveExpiryDetails = sharedLinkRemoveExpiryDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsAddExpirationDetails:
    (DBTEAMLOGSharedLinkSettingsAddExpirationDetails *)sharedLinkSettingsAddExpirationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails;
    _sharedLinkSettingsAddExpirationDetails = sharedLinkSettingsAddExpirationDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsAddPasswordDetails:
    (DBTEAMLOGSharedLinkSettingsAddPasswordDetails *)sharedLinkSettingsAddPasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails;
    _sharedLinkSettingsAddPasswordDetails = sharedLinkSettingsAddPasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsAllowDownloadDisabledDetails:
    (DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails *)sharedLinkSettingsAllowDownloadDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails;
    _sharedLinkSettingsAllowDownloadDisabledDetails = sharedLinkSettingsAllowDownloadDisabledDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsAllowDownloadEnabledDetails:
    (DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails *)sharedLinkSettingsAllowDownloadEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails;
    _sharedLinkSettingsAllowDownloadEnabledDetails = sharedLinkSettingsAllowDownloadEnabledDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsChangeAudienceDetails:
    (DBTEAMLOGSharedLinkSettingsChangeAudienceDetails *)sharedLinkSettingsChangeAudienceDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails;
    _sharedLinkSettingsChangeAudienceDetails = sharedLinkSettingsChangeAudienceDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsChangeExpirationDetails:
    (DBTEAMLOGSharedLinkSettingsChangeExpirationDetails *)sharedLinkSettingsChangeExpirationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails;
    _sharedLinkSettingsChangeExpirationDetails = sharedLinkSettingsChangeExpirationDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsChangePasswordDetails:
    (DBTEAMLOGSharedLinkSettingsChangePasswordDetails *)sharedLinkSettingsChangePasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails;
    _sharedLinkSettingsChangePasswordDetails = sharedLinkSettingsChangePasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsRemoveExpirationDetails:
    (DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails *)sharedLinkSettingsRemoveExpirationDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails;
    _sharedLinkSettingsRemoveExpirationDetails = sharedLinkSettingsRemoveExpirationDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkSettingsRemovePasswordDetails:
    (DBTEAMLOGSharedLinkSettingsRemovePasswordDetails *)sharedLinkSettingsRemovePasswordDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails;
    _sharedLinkSettingsRemovePasswordDetails = sharedLinkSettingsRemovePasswordDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkShareDetails:(DBTEAMLOGSharedLinkShareDetails *)sharedLinkShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkShareDetails;
    _sharedLinkShareDetails = sharedLinkShareDetails;
  }
  return self;
}

- (instancetype)initWithSharedLinkViewDetails:(DBTEAMLOGSharedLinkViewDetails *)sharedLinkViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedLinkViewDetails;
    _sharedLinkViewDetails = sharedLinkViewDetails;
  }
  return self;
}

- (instancetype)initWithSharedNoteOpenedDetails:(DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
    _sharedNoteOpenedDetails = sharedNoteOpenedDetails;
  }
  return self;
}

- (instancetype)initWithShmodelDisableDownloadsDetails:
    (DBTEAMLOGShmodelDisableDownloadsDetails *)shmodelDisableDownloadsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails;
    _shmodelDisableDownloadsDetails = shmodelDisableDownloadsDetails;
  }
  return self;
}

- (instancetype)initWithShmodelEnableDownloadsDetails:
    (DBTEAMLOGShmodelEnableDownloadsDetails *)shmodelEnableDownloadsDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails;
    _shmodelEnableDownloadsDetails = shmodelEnableDownloadsDetails;
  }
  return self;
}

- (instancetype)initWithShmodelGroupShareDetails:(DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShmodelGroupShareDetails;
    _shmodelGroupShareDetails = shmodelGroupShareDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseAccessGrantedDetails:
    (DBTEAMLOGShowcaseAccessGrantedDetails *)showcaseAccessGrantedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails;
    _showcaseAccessGrantedDetails = showcaseAccessGrantedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseAddMemberDetails:(DBTEAMLOGShowcaseAddMemberDetails *)showcaseAddMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseAddMemberDetails;
    _showcaseAddMemberDetails = showcaseAddMemberDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseArchivedDetails:(DBTEAMLOGShowcaseArchivedDetails *)showcaseArchivedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseArchivedDetails;
    _showcaseArchivedDetails = showcaseArchivedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseCreatedDetails:(DBTEAMLOGShowcaseCreatedDetails *)showcaseCreatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseCreatedDetails;
    _showcaseCreatedDetails = showcaseCreatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseDeleteCommentDetails:
    (DBTEAMLOGShowcaseDeleteCommentDetails *)showcaseDeleteCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails;
    _showcaseDeleteCommentDetails = showcaseDeleteCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseEditedDetails:(DBTEAMLOGShowcaseEditedDetails *)showcaseEditedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseEditedDetails;
    _showcaseEditedDetails = showcaseEditedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseEditCommentDetails:(DBTEAMLOGShowcaseEditCommentDetails *)showcaseEditCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseEditCommentDetails;
    _showcaseEditCommentDetails = showcaseEditCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileAddedDetails:(DBTEAMLOGShowcaseFileAddedDetails *)showcaseFileAddedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileAddedDetails;
    _showcaseFileAddedDetails = showcaseFileAddedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileDownloadDetails:
    (DBTEAMLOGShowcaseFileDownloadDetails *)showcaseFileDownloadDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileDownloadDetails;
    _showcaseFileDownloadDetails = showcaseFileDownloadDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileRemovedDetails:(DBTEAMLOGShowcaseFileRemovedDetails *)showcaseFileRemovedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileRemovedDetails;
    _showcaseFileRemovedDetails = showcaseFileRemovedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseFileViewDetails:(DBTEAMLOGShowcaseFileViewDetails *)showcaseFileViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseFileViewDetails;
    _showcaseFileViewDetails = showcaseFileViewDetails;
  }
  return self;
}

- (instancetype)initWithShowcasePermanentlyDeletedDetails:
    (DBTEAMLOGShowcasePermanentlyDeletedDetails *)showcasePermanentlyDeletedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails;
    _showcasePermanentlyDeletedDetails = showcasePermanentlyDeletedDetails;
  }
  return self;
}

- (instancetype)initWithShowcasePostCommentDetails:(DBTEAMLOGShowcasePostCommentDetails *)showcasePostCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcasePostCommentDetails;
    _showcasePostCommentDetails = showcasePostCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRemoveMemberDetails:
    (DBTEAMLOGShowcaseRemoveMemberDetails *)showcaseRemoveMemberDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails;
    _showcaseRemoveMemberDetails = showcaseRemoveMemberDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRenamedDetails:(DBTEAMLOGShowcaseRenamedDetails *)showcaseRenamedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRenamedDetails;
    _showcaseRenamedDetails = showcaseRenamedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRequestAccessDetails:
    (DBTEAMLOGShowcaseRequestAccessDetails *)showcaseRequestAccessDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRequestAccessDetails;
    _showcaseRequestAccessDetails = showcaseRequestAccessDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseResolveCommentDetails:
    (DBTEAMLOGShowcaseResolveCommentDetails *)showcaseResolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseResolveCommentDetails;
    _showcaseResolveCommentDetails = showcaseResolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseRestoredDetails:(DBTEAMLOGShowcaseRestoredDetails *)showcaseRestoredDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseRestoredDetails;
    _showcaseRestoredDetails = showcaseRestoredDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashedDetails:(DBTEAMLOGShowcaseTrashedDetails *)showcaseTrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseTrashedDetails;
    _showcaseTrashedDetails = showcaseTrashedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseTrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)showcaseTrashedDeprecatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails;
    _showcaseTrashedDeprecatedDetails = showcaseTrashedDeprecatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUnresolveCommentDetails:
    (DBTEAMLOGShowcaseUnresolveCommentDetails *)showcaseUnresolveCommentDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails;
    _showcaseUnresolveCommentDetails = showcaseUnresolveCommentDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashedDetails:(DBTEAMLOGShowcaseUntrashedDetails *)showcaseUntrashedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUntrashedDetails;
    _showcaseUntrashedDetails = showcaseUntrashedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseUntrashedDeprecatedDetails:
    (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)showcaseUntrashedDeprecatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails;
    _showcaseUntrashedDeprecatedDetails = showcaseUntrashedDeprecatedDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseViewDetails:(DBTEAMLOGShowcaseViewDetails *)showcaseViewDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseViewDetails;
    _showcaseViewDetails = showcaseViewDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddCertDetails:(DBTEAMLOGSsoAddCertDetails *)ssoAddCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddCertDetails;
    _ssoAddCertDetails = ssoAddCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddLoginUrlDetails:(DBTEAMLOGSsoAddLoginUrlDetails *)ssoAddLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddLoginUrlDetails;
    _ssoAddLoginUrlDetails = ssoAddLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoAddLogoutUrlDetails:(DBTEAMLOGSsoAddLogoutUrlDetails *)ssoAddLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails;
    _ssoAddLogoutUrlDetails = ssoAddLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeCertDetails:(DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeCertDetails;
    _ssoChangeCertDetails = ssoChangeCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLoginUrlDetails:(DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
    _ssoChangeLoginUrlDetails = ssoChangeLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeLogoutUrlDetails:(DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
    _ssoChangeLogoutUrlDetails = ssoChangeLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangeSamlIdentityModeDetails:
    (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
    _ssoChangeSamlIdentityModeDetails = ssoChangeSamlIdentityModeDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveCertDetails:(DBTEAMLOGSsoRemoveCertDetails *)ssoRemoveCertDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveCertDetails;
    _ssoRemoveCertDetails = ssoRemoveCertDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLoginUrlDetails:(DBTEAMLOGSsoRemoveLoginUrlDetails *)ssoRemoveLoginUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails;
    _ssoRemoveLoginUrlDetails = ssoRemoveLoginUrlDetails;
  }
  return self;
}

- (instancetype)initWithSsoRemoveLogoutUrlDetails:(DBTEAMLOGSsoRemoveLogoutUrlDetails *)ssoRemoveLogoutUrlDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails;
    _ssoRemoveLogoutUrlDetails = ssoRemoveLogoutUrlDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderChangeStatusDetails:
    (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
    _teamFolderChangeStatusDetails = teamFolderChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderCreateDetails:(DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderCreateDetails;
    _teamFolderCreateDetails = teamFolderCreateDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderDowngradeDetails:(DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
    _teamFolderDowngradeDetails = teamFolderDowngradeDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderPermanentlyDeleteDetails:
    (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
    _teamFolderPermanentlyDeleteDetails = teamFolderPermanentlyDeleteDetails;
  }
  return self;
}

- (instancetype)initWithTeamFolderRenameDetails:(DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamFolderRenameDetails;
    _teamFolderRenameDetails = teamFolderRenameDetails;
  }
  return self;
}

- (instancetype)initWithTeamSelectiveSyncSettingsChangedDetails:
    (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)teamSelectiveSyncSettingsChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails;
    _teamSelectiveSyncSettingsChangedDetails = teamSelectiveSyncSettingsChangedDetails;
  }
  return self;
}

- (instancetype)initWithAccountCaptureChangePolicyDetails:
    (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
    _accountCaptureChangePolicyDetails = accountCaptureChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithAdminEmailRemindersChangedDetails:
    (DBTEAMLOGAdminEmailRemindersChangedDetails *)adminEmailRemindersChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails;
    _adminEmailRemindersChangedDetails = adminEmailRemindersChangedDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadDisabledDetails:
    (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
    _allowDownloadDisabledDetails = allowDownloadDisabledDetails;
  }
  return self;
}

- (instancetype)initWithAllowDownloadEnabledDetails:
    (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
    _allowDownloadEnabledDetails = allowDownloadEnabledDetails;
  }
  return self;
}

- (instancetype)initWithAppPermissionsChangedDetails:
    (DBTEAMLOGAppPermissionsChangedDetails *)appPermissionsChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsAppPermissionsChangedDetails;
    _appPermissionsChangedDetails = appPermissionsChangedDetails;
  }
  return self;
}

- (instancetype)initWithCameraUploadsPolicyChangedDetails:
    (DBTEAMLOGCameraUploadsPolicyChangedDetails *)cameraUploadsPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails;
    _cameraUploadsPolicyChangedDetails = cameraUploadsPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithCaptureTranscriptPolicyChangedDetails:
    (DBTEAMLOGCaptureTranscriptPolicyChangedDetails *)captureTranscriptPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails;
    _captureTranscriptPolicyChangedDetails = captureTranscriptPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithClassificationChangePolicyDetails:
    (DBTEAMLOGClassificationChangePolicyDetails *)classificationChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsClassificationChangePolicyDetails;
    _classificationChangePolicyDetails = classificationChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithComputerBackupPolicyChangedDetails:
    (DBTEAMLOGComputerBackupPolicyChangedDetails *)computerBackupPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails;
    _computerBackupPolicyChangedDetails = computerBackupPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithContentAdministrationPolicyChangedDetails:
    (DBTEAMLOGContentAdministrationPolicyChangedDetails *)contentAdministrationPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails;
    _contentAdministrationPolicyChangedDetails = contentAdministrationPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionChangePolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
    _dataPlacementRestrictionChangePolicyDetails = dataPlacementRestrictionChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDataPlacementRestrictionSatisfyPolicyDetails:
    (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
    _dataPlacementRestrictionSatisfyPolicyDetails = dataPlacementRestrictionSatisfyPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsAddExceptionDetails:
    (DBTEAMLOGDeviceApprovalsAddExceptionDetails *)deviceApprovalsAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails;
    _deviceApprovalsAddExceptionDetails = deviceApprovalsAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeDesktopPolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
    _deviceApprovalsChangeDesktopPolicyDetails = deviceApprovalsChangeDesktopPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeMobilePolicyDetails:
    (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
    _deviceApprovalsChangeMobilePolicyDetails = deviceApprovalsChangeMobilePolicyDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeOverageActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
    _deviceApprovalsChangeOverageActionDetails = deviceApprovalsChangeOverageActionDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsChangeUnlinkActionDetails:
    (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
    _deviceApprovalsChangeUnlinkActionDetails = deviceApprovalsChangeUnlinkActionDetails;
  }
  return self;
}

- (instancetype)initWithDeviceApprovalsRemoveExceptionDetails:
    (DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *)deviceApprovalsRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails;
    _deviceApprovalsRemoveExceptionDetails = deviceApprovalsRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsAddMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)directoryRestrictionsAddMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails;
    _directoryRestrictionsAddMembersDetails = directoryRestrictionsAddMembersDetails;
  }
  return self;
}

- (instancetype)initWithDirectoryRestrictionsRemoveMembersDetails:
    (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)directoryRestrictionsRemoveMembersDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails;
    _directoryRestrictionsRemoveMembersDetails = directoryRestrictionsRemoveMembersDetails;
  }
  return self;
}

- (instancetype)initWithDropboxPasswordsPolicyChangedDetails:
    (DBTEAMLOGDropboxPasswordsPolicyChangedDetails *)dropboxPasswordsPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails;
    _dropboxPasswordsPolicyChangedDetails = dropboxPasswordsPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithEmailIngestPolicyChangedDetails:
    (DBTEAMLOGEmailIngestPolicyChangedDetails *)emailIngestPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails;
    _emailIngestPolicyChangedDetails = emailIngestPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithEmmAddExceptionDetails:(DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmAddExceptionDetails;
    _emmAddExceptionDetails = emmAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithEmmChangePolicyDetails:(DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmChangePolicyDetails;
    _emmChangePolicyDetails = emmChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithEmmRemoveExceptionDetails:(DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
    _emmRemoveExceptionDetails = emmRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithExtendedVersionHistoryChangePolicyDetails:
    (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
    _extendedVersionHistoryChangePolicyDetails = extendedVersionHistoryChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithExternalDriveBackupPolicyChangedDetails:
    (DBTEAMLOGExternalDriveBackupPolicyChangedDetails *)externalDriveBackupPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails;
    _externalDriveBackupPolicyChangedDetails = externalDriveBackupPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithFileCommentsChangePolicyDetails:
    (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
    _fileCommentsChangePolicyDetails = fileCommentsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileLockingPolicyChangedDetails:
    (DBTEAMLOGFileLockingPolicyChangedDetails *)fileLockingPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails;
    _fileLockingPolicyChangedDetails = fileLockingPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsChangePolicyDetails:
    (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
    _fileRequestsChangePolicyDetails = fileRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsEnabledDetails:
    (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
    _fileRequestsEmailsEnabledDetails = fileRequestsEmailsEnabledDetails;
  }
  return self;
}

- (instancetype)initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:
    (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
    _fileRequestsEmailsRestrictedToTeamOnlyDetails = fileRequestsEmailsRestrictedToTeamOnlyDetails;
  }
  return self;
}

- (instancetype)initWithFileTransfersPolicyChangedDetails:
    (DBTEAMLOGFileTransfersPolicyChangedDetails *)fileTransfersPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails;
    _fileTransfersPolicyChangedDetails = fileTransfersPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithGoogleSsoChangePolicyDetails:
    (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
    _googleSsoChangePolicyDetails = googleSsoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithGroupUserManagementChangePolicyDetails:
    (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
    _groupUserManagementChangePolicyDetails = groupUserManagementChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithIntegrationPolicyChangedDetails:
    (DBTEAMLOGIntegrationPolicyChangedDetails *)integrationPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails;
    _integrationPolicyChangedDetails = integrationPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithInviteAcceptanceEmailPolicyChangedDetails:
    (DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails *)inviteAcceptanceEmailPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails;
    _inviteAcceptanceEmailPolicyChangedDetails = inviteAcceptanceEmailPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithMemberRequestsChangePolicyDetails:
    (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
    _memberRequestsChangePolicyDetails = memberRequestsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSendInvitePolicyChangedDetails:
    (DBTEAMLOGMemberSendInvitePolicyChangedDetails *)memberSendInvitePolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails;
    _memberSendInvitePolicyChangedDetails = memberSendInvitePolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsAddExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
    _memberSpaceLimitsAddExceptionDetails = memberSpaceLimitsAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangeCapsTypePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)memberSpaceLimitsChangeCapsTypePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails;
    _memberSpaceLimitsChangeCapsTypePolicyDetails = memberSpaceLimitsChangeCapsTypePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsChangePolicyDetails:
    (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
    _memberSpaceLimitsChangePolicyDetails = memberSpaceLimitsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMemberSpaceLimitsRemoveExceptionDetails:
    (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
    _memberSpaceLimitsRemoveExceptionDetails = memberSpaceLimitsRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithMemberSuggestionsChangePolicyDetails:
    (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
    _memberSuggestionsChangePolicyDetails = memberSuggestionsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithMicrosoftOfficeAddinChangePolicyDetails:
    (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
    _microsoftOfficeAddinChangePolicyDetails = microsoftOfficeAddinChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithNetworkControlChangePolicyDetails:
    (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
    _networkControlChangePolicyDetails = networkControlChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeDeploymentPolicyDetails:
    (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
    _paperChangeDeploymentPolicyDetails = paperChangeDeploymentPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberLinkPolicyDetails:
    (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)paperChangeMemberLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails;
    _paperChangeMemberLinkPolicyDetails = paperChangeMemberLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangeMemberPolicyDetails:
    (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
    _paperChangeMemberPolicyDetails = paperChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperChangePolicyDetails:(DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperChangePolicyDetails;
    _paperChangePolicyDetails = paperChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPaperDefaultFolderPolicyChangedDetails:
    (DBTEAMLOGPaperDefaultFolderPolicyChangedDetails *)paperDefaultFolderPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails;
    _paperDefaultFolderPolicyChangedDetails = paperDefaultFolderPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithPaperDesktopPolicyChangedDetails:
    (DBTEAMLOGPaperDesktopPolicyChangedDetails *)paperDesktopPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails;
    _paperDesktopPolicyChangedDetails = paperDesktopPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupAdditionDetails:
    (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
    _paperEnabledUsersGroupAdditionDetails = paperEnabledUsersGroupAdditionDetails;
  }
  return self;
}

- (instancetype)initWithPaperEnabledUsersGroupRemovalDetails:
    (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
    _paperEnabledUsersGroupRemovalDetails = paperEnabledUsersGroupRemovalDetails;
  }
  return self;
}

- (instancetype)initWithPasswordStrengthRequirementsChangePolicyDetails:
    (DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails *)passwordStrengthRequirementsChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails;
    _passwordStrengthRequirementsChangePolicyDetails = passwordStrengthRequirementsChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithPermanentDeleteChangePolicyDetails:
    (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
    _permanentDeleteChangePolicyDetails = permanentDeleteChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithResellerSupportChangePolicyDetails:
    (DBTEAMLOGResellerSupportChangePolicyDetails *)resellerSupportChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails;
    _resellerSupportChangePolicyDetails = resellerSupportChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithRewindPolicyChangedDetails:(DBTEAMLOGRewindPolicyChangedDetails *)rewindPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsRewindPolicyChangedDetails;
    _rewindPolicyChangedDetails = rewindPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithSendForSignaturePolicyChangedDetails:
    (DBTEAMLOGSendForSignaturePolicyChangedDetails *)sendForSignaturePolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails;
    _sendForSignaturePolicyChangedDetails = sendForSignaturePolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeFolderJoinPolicyDetails:
    (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
    _sharingChangeFolderJoinPolicyDetails = sharingChangeFolderJoinPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkAllowChangeExpirationPolicyDetails:
    (DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails *)
        sharingChangeLinkAllowChangeExpirationPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails;
    _sharingChangeLinkAllowChangeExpirationPolicyDetails = sharingChangeLinkAllowChangeExpirationPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkDefaultExpirationPolicyDetails:
    (DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails *)sharingChangeLinkDefaultExpirationPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails;
    _sharingChangeLinkDefaultExpirationPolicyDetails = sharingChangeLinkDefaultExpirationPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkEnforcePasswordPolicyDetails:
    (DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails *)sharingChangeLinkEnforcePasswordPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails;
    _sharingChangeLinkEnforcePasswordPolicyDetails = sharingChangeLinkEnforcePasswordPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeLinkPolicyDetails:
    (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
    _sharingChangeLinkPolicyDetails = sharingChangeLinkPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSharingChangeMemberPolicyDetails:
    (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
    _sharingChangeMemberPolicyDetails = sharingChangeMemberPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeDownloadPolicyDetails:
    (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)showcaseChangeDownloadPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails;
    _showcaseChangeDownloadPolicyDetails = showcaseChangeDownloadPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeEnabledPolicyDetails:
    (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)showcaseChangeEnabledPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails;
    _showcaseChangeEnabledPolicyDetails = showcaseChangeEnabledPolicyDetails;
  }
  return self;
}

- (instancetype)initWithShowcaseChangeExternalSharingPolicyDetails:
    (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)showcaseChangeExternalSharingPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails;
    _showcaseChangeExternalSharingPolicyDetails = showcaseChangeExternalSharingPolicyDetails;
  }
  return self;
}

- (instancetype)initWithSmarterSmartSyncPolicyChangedDetails:
    (DBTEAMLOGSmarterSmartSyncPolicyChangedDetails *)smarterSmartSyncPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails;
    _smarterSmartSyncPolicyChangedDetails = smarterSmartSyncPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncChangePolicyDetails:
    (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
    _smartSyncChangePolicyDetails = smartSyncChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncNotOptOutDetails:(DBTEAMLOGSmartSyncNotOptOutDetails *)smartSyncNotOptOutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails;
    _smartSyncNotOptOutDetails = smartSyncNotOptOutDetails;
  }
  return self;
}

- (instancetype)initWithSmartSyncOptOutDetails:(DBTEAMLOGSmartSyncOptOutDetails *)smartSyncOptOutDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSmartSyncOptOutDetails;
    _smartSyncOptOutDetails = smartSyncOptOutDetails;
  }
  return self;
}

- (instancetype)initWithSsoChangePolicyDetails:(DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsSsoChangePolicyDetails;
    _ssoChangePolicyDetails = ssoChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTeamBrandingPolicyChangedDetails:
    (DBTEAMLOGTeamBrandingPolicyChangedDetails *)teamBrandingPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails;
    _teamBrandingPolicyChangedDetails = teamBrandingPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithTeamExtensionsPolicyChangedDetails:
    (DBTEAMLOGTeamExtensionsPolicyChangedDetails *)teamExtensionsPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails;
    _teamExtensionsPolicyChangedDetails = teamExtensionsPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithTeamSelectiveSyncPolicyChangedDetails:
    (DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails *)teamSelectiveSyncPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails;
    _teamSelectiveSyncPolicyChangedDetails = teamSelectiveSyncPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithTeamSharingWhitelistSubjectsChangedDetails:
    (DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails *)teamSharingWhitelistSubjectsChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails;
    _teamSharingWhitelistSubjectsChangedDetails = teamSharingWhitelistSubjectsChangedDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddExceptionDetails:(DBTEAMLOGTfaAddExceptionDetails *)tfaAddExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddExceptionDetails;
    _tfaAddExceptionDetails = tfaAddExceptionDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangePolicyDetails:(DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangePolicyDetails;
    _tfaChangePolicyDetails = tfaChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveExceptionDetails:(DBTEAMLOGTfaRemoveExceptionDetails *)tfaRemoveExceptionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveExceptionDetails;
    _tfaRemoveExceptionDetails = tfaRemoveExceptionDetails;
  }
  return self;
}

- (instancetype)initWithTwoAccountChangePolicyDetails:
    (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
    _twoAccountChangePolicyDetails = twoAccountChangePolicyDetails;
  }
  return self;
}

- (instancetype)initWithViewerInfoPolicyChangedDetails:
    (DBTEAMLOGViewerInfoPolicyChangedDetails *)viewerInfoPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails;
    _viewerInfoPolicyChangedDetails = viewerInfoPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithWatermarkingPolicyChangedDetails:
    (DBTEAMLOGWatermarkingPolicyChangedDetails *)watermarkingPolicyChangedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails;
    _watermarkingPolicyChangedDetails = watermarkingPolicyChangedDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeActiveSessionLimitDetails:
    (DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails *)webSessionsChangeActiveSessionLimitDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails;
    _webSessionsChangeActiveSessionLimitDetails = webSessionsChangeActiveSessionLimitDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeFixedLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
    _webSessionsChangeFixedLengthPolicyDetails = webSessionsChangeFixedLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithWebSessionsChangeIdleLengthPolicyDetails:
    (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
    _webSessionsChangeIdleLengthPolicyDetails = webSessionsChangeIdleLengthPolicyDetails;
  }
  return self;
}

- (instancetype)initWithDataResidencyMigrationRequestSuccessfulDetails:
    (DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *)dataResidencyMigrationRequestSuccessfulDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails;
    _dataResidencyMigrationRequestSuccessfulDetails = dataResidencyMigrationRequestSuccessfulDetails;
  }
  return self;
}

- (instancetype)initWithDataResidencyMigrationRequestUnsuccessfulDetails:
    (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *)dataResidencyMigrationRequestUnsuccessfulDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails;
    _dataResidencyMigrationRequestUnsuccessfulDetails = dataResidencyMigrationRequestUnsuccessfulDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeFromDetails:(DBTEAMLOGTeamMergeFromDetails *)teamMergeFromDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeFromDetails;
    _teamMergeFromDetails = teamMergeFromDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeToDetails:(DBTEAMLOGTeamMergeToDetails *)teamMergeToDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeToDetails;
    _teamMergeToDetails = teamMergeToDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddBackgroundDetails:
    (DBTEAMLOGTeamProfileAddBackgroundDetails *)teamProfileAddBackgroundDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails;
    _teamProfileAddBackgroundDetails = teamProfileAddBackgroundDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileAddLogoDetails:(DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
    _teamProfileAddLogoDetails = teamProfileAddLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeBackgroundDetails:
    (DBTEAMLOGTeamProfileChangeBackgroundDetails *)teamProfileChangeBackgroundDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails;
    _teamProfileChangeBackgroundDetails = teamProfileChangeBackgroundDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeDefaultLanguageDetails:
    (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)teamProfileChangeDefaultLanguageDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails;
    _teamProfileChangeDefaultLanguageDetails = teamProfileChangeDefaultLanguageDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeLogoDetails:
    (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
    _teamProfileChangeLogoDetails = teamProfileChangeLogoDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileChangeNameDetails:
    (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
    _teamProfileChangeNameDetails = teamProfileChangeNameDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveBackgroundDetails:
    (DBTEAMLOGTeamProfileRemoveBackgroundDetails *)teamProfileRemoveBackgroundDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails;
    _teamProfileRemoveBackgroundDetails = teamProfileRemoveBackgroundDetails;
  }
  return self;
}

- (instancetype)initWithTeamProfileRemoveLogoDetails:
    (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
    _teamProfileRemoveLogoDetails = teamProfileRemoveLogoDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddBackupPhoneDetails:(DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
    _tfaAddBackupPhoneDetails = tfaAddBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaAddSecurityKeyDetails:(DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
    _tfaAddSecurityKeyDetails = tfaAddSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeBackupPhoneDetails:
    (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
    _tfaChangeBackupPhoneDetails = tfaChangeBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaChangeStatusDetails:(DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaChangeStatusDetails;
    _tfaChangeStatusDetails = tfaChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveBackupPhoneDetails:
    (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
    _tfaRemoveBackupPhoneDetails = tfaRemoveBackupPhoneDetails;
  }
  return self;
}

- (instancetype)initWithTfaRemoveSecurityKeyDetails:
    (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
    _tfaRemoveSecurityKeyDetails = tfaRemoveSecurityKeyDetails;
  }
  return self;
}

- (instancetype)initWithTfaResetDetails:(DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTfaResetDetails;
    _tfaResetDetails = tfaResetDetails;
  }
  return self;
}

- (instancetype)initWithChangedEnterpriseAdminRoleDetails:
    (DBTEAMLOGChangedEnterpriseAdminRoleDetails *)changedEnterpriseAdminRoleDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails;
    _changedEnterpriseAdminRoleDetails = changedEnterpriseAdminRoleDetails;
  }
  return self;
}

- (instancetype)initWithChangedEnterpriseConnectedTeamStatusDetails:
    (DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *)changedEnterpriseConnectedTeamStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails;
    _changedEnterpriseConnectedTeamStatusDetails = changedEnterpriseConnectedTeamStatusDetails;
  }
  return self;
}

- (instancetype)initWithEndedEnterpriseAdminSessionDetails:
    (DBTEAMLOGEndedEnterpriseAdminSessionDetails *)endedEnterpriseAdminSessionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails;
    _endedEnterpriseAdminSessionDetails = endedEnterpriseAdminSessionDetails;
  }
  return self;
}

- (instancetype)initWithEndedEnterpriseAdminSessionDeprecatedDetails:
    (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *)endedEnterpriseAdminSessionDeprecatedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails;
    _endedEnterpriseAdminSessionDeprecatedDetails = endedEnterpriseAdminSessionDeprecatedDetails;
  }
  return self;
}

- (instancetype)initWithEnterpriseSettingsLockingDetails:
    (DBTEAMLOGEnterpriseSettingsLockingDetails *)enterpriseSettingsLockingDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails;
    _enterpriseSettingsLockingDetails = enterpriseSettingsLockingDetails;
  }
  return self;
}

- (instancetype)initWithGuestAdminChangeStatusDetails:
    (DBTEAMLOGGuestAdminChangeStatusDetails *)guestAdminChangeStatusDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails;
    _guestAdminChangeStatusDetails = guestAdminChangeStatusDetails;
  }
  return self;
}

- (instancetype)initWithStartedEnterpriseAdminSessionDetails:
    (DBTEAMLOGStartedEnterpriseAdminSessionDetails *)startedEnterpriseAdminSessionDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails;
    _startedEnterpriseAdminSessionDetails = startedEnterpriseAdminSessionDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestAcceptedDetails:
    (DBTEAMLOGTeamMergeRequestAcceptedDetails *)teamMergeRequestAcceptedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails;
    _teamMergeRequestAcceptedDetails = teamMergeRequestAcceptedDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestAcceptedShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails *)teamMergeRequestAcceptedShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails;
    _teamMergeRequestAcceptedShownToPrimaryTeamDetails = teamMergeRequestAcceptedShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestAcceptedShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails *)
        teamMergeRequestAcceptedShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails;
    _teamMergeRequestAcceptedShownToSecondaryTeamDetails = teamMergeRequestAcceptedShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestAutoCanceledDetails:
    (DBTEAMLOGTeamMergeRequestAutoCanceledDetails *)teamMergeRequestAutoCanceledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails;
    _teamMergeRequestAutoCanceledDetails = teamMergeRequestAutoCanceledDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestCanceledDetails:
    (DBTEAMLOGTeamMergeRequestCanceledDetails *)teamMergeRequestCanceledDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails;
    _teamMergeRequestCanceledDetails = teamMergeRequestCanceledDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestCanceledShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails *)teamMergeRequestCanceledShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails;
    _teamMergeRequestCanceledShownToPrimaryTeamDetails = teamMergeRequestCanceledShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestCanceledShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails *)
        teamMergeRequestCanceledShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails;
    _teamMergeRequestCanceledShownToSecondaryTeamDetails = teamMergeRequestCanceledShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestExpiredDetails:
    (DBTEAMLOGTeamMergeRequestExpiredDetails *)teamMergeRequestExpiredDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails;
    _teamMergeRequestExpiredDetails = teamMergeRequestExpiredDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestExpiredShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails *)teamMergeRequestExpiredShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails;
    _teamMergeRequestExpiredShownToPrimaryTeamDetails = teamMergeRequestExpiredShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestExpiredShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails *)teamMergeRequestExpiredShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails;
    _teamMergeRequestExpiredShownToSecondaryTeamDetails = teamMergeRequestExpiredShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestRejectedShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails *)teamMergeRequestRejectedShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails;
    _teamMergeRequestRejectedShownToPrimaryTeamDetails = teamMergeRequestRejectedShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestRejectedShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails *)
        teamMergeRequestRejectedShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails;
    _teamMergeRequestRejectedShownToSecondaryTeamDetails = teamMergeRequestRejectedShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestReminderDetails:
    (DBTEAMLOGTeamMergeRequestReminderDetails *)teamMergeRequestReminderDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails;
    _teamMergeRequestReminderDetails = teamMergeRequestReminderDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestReminderShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails *)teamMergeRequestReminderShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails;
    _teamMergeRequestReminderShownToPrimaryTeamDetails = teamMergeRequestReminderShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestReminderShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails *)
        teamMergeRequestReminderShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails;
    _teamMergeRequestReminderShownToSecondaryTeamDetails = teamMergeRequestReminderShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestRevokedDetails:
    (DBTEAMLOGTeamMergeRequestRevokedDetails *)teamMergeRequestRevokedDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails;
    _teamMergeRequestRevokedDetails = teamMergeRequestRevokedDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestSentShownToPrimaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails *)teamMergeRequestSentShownToPrimaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails;
    _teamMergeRequestSentShownToPrimaryTeamDetails = teamMergeRequestSentShownToPrimaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithTeamMergeRequestSentShownToSecondaryTeamDetails:
    (DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails *)teamMergeRequestSentShownToSecondaryTeamDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails;
    _teamMergeRequestSentShownToSecondaryTeamDetails = teamMergeRequestSentShownToSecondaryTeamDetails;
  }
  return self;
}

- (instancetype)initWithMissingDetails:(DBTEAMLOGMissingDetails *)missingDetails {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsMissingDetails;
    _missingDetails = missingDetails;
  }
  return self;
}

- (instancetype)initWithOther {
  self = [super init];
  if (self) {
    _tag = DBTEAMLOGEventDetailsOther;
  }
  return self;
}

#pragma mark - Instance field accessors

- (DBTEAMLOGAdminAlertingAlertStateChangedDetails *)adminAlertingAlertStateChangedDetails {
  if (![self isAdminAlertingAlertStateChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _adminAlertingAlertStateChangedDetails;
}

- (DBTEAMLOGAdminAlertingChangedAlertConfigDetails *)adminAlertingChangedAlertConfigDetails {
  if (![self isAdminAlertingChangedAlertConfigDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails, but was %@.",
               [self tagName]];
  }
  return _adminAlertingChangedAlertConfigDetails;
}

- (DBTEAMLOGAdminAlertingTriggeredAlertDetails *)adminAlertingTriggeredAlertDetails {
  if (![self isAdminAlertingTriggeredAlertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails, but was %@.",
                       [self tagName]];
  }
  return _adminAlertingTriggeredAlertDetails;
}

- (DBTEAMLOGAppBlockedByPermissionsDetails *)appBlockedByPermissionsDetails {
  if (![self isAppBlockedByPermissionsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails, but was %@.",
                       [self tagName]];
  }
  return _appBlockedByPermissionsDetails;
}

- (DBTEAMLOGAppLinkTeamDetails *)appLinkTeamDetails {
  if (![self isAppLinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appLinkTeamDetails;
}

- (DBTEAMLOGAppLinkUserDetails *)appLinkUserDetails {
  if (![self isAppLinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppLinkUserDetails, but was %@.", [self tagName]];
  }
  return _appLinkUserDetails;
}

- (DBTEAMLOGAppUnlinkTeamDetails *)appUnlinkTeamDetails {
  if (![self isAppUnlinkTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkTeamDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkTeamDetails;
}

- (DBTEAMLOGAppUnlinkUserDetails *)appUnlinkUserDetails {
  if (![self isAppUnlinkUserDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAppUnlinkUserDetails, but was %@.", [self tagName]];
  }
  return _appUnlinkUserDetails;
}

- (DBTEAMLOGIntegrationConnectedDetails *)integrationConnectedDetails {
  if (![self isIntegrationConnectedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsIntegrationConnectedDetails, but was %@.", [self tagName]];
  }
  return _integrationConnectedDetails;
}

- (DBTEAMLOGIntegrationDisconnectedDetails *)integrationDisconnectedDetails {
  if (![self isIntegrationDisconnectedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsIntegrationDisconnectedDetails, but was %@.",
                       [self tagName]];
  }
  return _integrationDisconnectedDetails;
}

- (DBTEAMLOGFileAddCommentDetails *)fileAddCommentDetails {
  if (![self isFileAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddCommentDetails, but was %@.", [self tagName]];
  }
  return _fileAddCommentDetails;
}

- (DBTEAMLOGFileChangeCommentSubscriptionDetails *)fileChangeCommentSubscriptionDetails {
  if (![self isFileChangeCommentSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _fileChangeCommentSubscriptionDetails;
}

- (DBTEAMLOGFileDeleteCommentDetails *)fileDeleteCommentDetails {
  if (![self isFileDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _fileDeleteCommentDetails;
}

- (DBTEAMLOGFileEditCommentDetails *)fileEditCommentDetails {
  if (![self isFileEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileEditCommentDetails, but was %@.", [self tagName]];
  }
  return _fileEditCommentDetails;
}

- (DBTEAMLOGFileLikeCommentDetails *)fileLikeCommentDetails {
  if (![self isFileLikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileLikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileLikeCommentDetails;
}

- (DBTEAMLOGFileResolveCommentDetails *)fileResolveCommentDetails {
  if (![self isFileResolveCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileResolveCommentDetails, but was %@.", [self tagName]];
  }
  return _fileResolveCommentDetails;
}

- (DBTEAMLOGFileUnlikeCommentDetails *)fileUnlikeCommentDetails {
  if (![self isFileUnlikeCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileUnlikeCommentDetails, but was %@.", [self tagName]];
  }
  return _fileUnlikeCommentDetails;
}

- (DBTEAMLOGFileUnresolveCommentDetails *)fileUnresolveCommentDetails {
  if (![self isFileUnresolveCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileUnresolveCommentDetails, but was %@.", [self tagName]];
  }
  return _fileUnresolveCommentDetails;
}

- (DBTEAMLOGGovernancePolicyAddFoldersDetails *)governancePolicyAddFoldersDetails {
  if (![self isGovernancePolicyAddFoldersDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyAddFoldersDetails;
}

- (DBTEAMLOGGovernancePolicyAddFolderFailedDetails *)governancePolicyAddFolderFailedDetails {
  if (![self isGovernancePolicyAddFolderFailedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails, but was %@.",
               [self tagName]];
  }
  return _governancePolicyAddFolderFailedDetails;
}

- (DBTEAMLOGGovernancePolicyContentDisposedDetails *)governancePolicyContentDisposedDetails {
  if (![self isGovernancePolicyContentDisposedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails, but was %@.",
               [self tagName]];
  }
  return _governancePolicyContentDisposedDetails;
}

- (DBTEAMLOGGovernancePolicyCreateDetails *)governancePolicyCreateDetails {
  if (![self isGovernancePolicyCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyCreateDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyCreateDetails;
}

- (DBTEAMLOGGovernancePolicyDeleteDetails *)governancePolicyDeleteDetails {
  if (![self isGovernancePolicyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyDeleteDetails;
}

- (DBTEAMLOGGovernancePolicyEditDetailsDetails *)governancePolicyEditDetailsDetails {
  if (![self isGovernancePolicyEditDetailsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyEditDetailsDetails;
}

- (DBTEAMLOGGovernancePolicyEditDurationDetails *)governancePolicyEditDurationDetails {
  if (![self isGovernancePolicyEditDurationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyEditDurationDetails;
}

- (DBTEAMLOGGovernancePolicyExportCreatedDetails *)governancePolicyExportCreatedDetails {
  if (![self isGovernancePolicyExportCreatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyExportCreatedDetails;
}

- (DBTEAMLOGGovernancePolicyExportRemovedDetails *)governancePolicyExportRemovedDetails {
  if (![self isGovernancePolicyExportRemovedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyExportRemovedDetails;
}

- (DBTEAMLOGGovernancePolicyRemoveFoldersDetails *)governancePolicyRemoveFoldersDetails {
  if (![self isGovernancePolicyRemoveFoldersDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyRemoveFoldersDetails;
}

- (DBTEAMLOGGovernancePolicyReportCreatedDetails *)governancePolicyReportCreatedDetails {
  if (![self isGovernancePolicyReportCreatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails, but was %@.",
                       [self tagName]];
  }
  return _governancePolicyReportCreatedDetails;
}

- (DBTEAMLOGGovernancePolicyZipPartDownloadedDetails *)governancePolicyZipPartDownloadedDetails {
  if (![self isGovernancePolicyZipPartDownloadedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails, but was %@.",
               [self tagName]];
  }
  return _governancePolicyZipPartDownloadedDetails;
}

- (DBTEAMLOGLegalHoldsActivateAHoldDetails *)legalHoldsActivateAHoldDetails {
  if (![self isLegalHoldsActivateAHoldDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsActivateAHoldDetails;
}

- (DBTEAMLOGLegalHoldsAddMembersDetails *)legalHoldsAddMembersDetails {
  if (![self isLegalHoldsAddMembersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails, but was %@.", [self tagName]];
  }
  return _legalHoldsAddMembersDetails;
}

- (DBTEAMLOGLegalHoldsChangeHoldDetailsDetails *)legalHoldsChangeHoldDetailsDetails {
  if (![self isLegalHoldsChangeHoldDetailsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsChangeHoldDetailsDetails;
}

- (DBTEAMLOGLegalHoldsChangeHoldNameDetails *)legalHoldsChangeHoldNameDetails {
  if (![self isLegalHoldsChangeHoldNameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsChangeHoldNameDetails;
}

- (DBTEAMLOGLegalHoldsExportAHoldDetails *)legalHoldsExportAHoldDetails {
  if (![self isLegalHoldsExportAHoldDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails, but was %@.", [self tagName]];
  }
  return _legalHoldsExportAHoldDetails;
}

- (DBTEAMLOGLegalHoldsExportCancelledDetails *)legalHoldsExportCancelledDetails {
  if (![self isLegalHoldsExportCancelledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsExportCancelledDetails;
}

- (DBTEAMLOGLegalHoldsExportDownloadedDetails *)legalHoldsExportDownloadedDetails {
  if (![self isLegalHoldsExportDownloadedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsExportDownloadedDetails;
}

- (DBTEAMLOGLegalHoldsExportRemovedDetails *)legalHoldsExportRemovedDetails {
  if (![self isLegalHoldsExportRemovedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsExportRemovedDetails;
}

- (DBTEAMLOGLegalHoldsReleaseAHoldDetails *)legalHoldsReleaseAHoldDetails {
  if (![self isLegalHoldsReleaseAHoldDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsReleaseAHoldDetails;
}

- (DBTEAMLOGLegalHoldsRemoveMembersDetails *)legalHoldsRemoveMembersDetails {
  if (![self isLegalHoldsRemoveMembersDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails, but was %@.",
                       [self tagName]];
  }
  return _legalHoldsRemoveMembersDetails;
}

- (DBTEAMLOGLegalHoldsReportAHoldDetails *)legalHoldsReportAHoldDetails {
  if (![self isLegalHoldsReportAHoldDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails, but was %@.", [self tagName]];
  }
  return _legalHoldsReportAHoldDetails;
}

- (DBTEAMLOGDeviceChangeIpDesktopDetails *)deviceChangeIpDesktopDetails {
  if (![self isDeviceChangeIpDesktopDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpDesktopDetails;
}

- (DBTEAMLOGDeviceChangeIpMobileDetails *)deviceChangeIpMobileDetails {
  if (![self isDeviceChangeIpMobileDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpMobileDetails;
}

- (DBTEAMLOGDeviceChangeIpWebDetails *)deviceChangeIpWebDetails {
  if (![self isDeviceChangeIpWebDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceChangeIpWebDetails, but was %@.", [self tagName]];
  }
  return _deviceChangeIpWebDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *)deviceDeleteOnUnlinkFailDetails {
  if (![self isDeviceDeleteOnUnlinkFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkFailDetails;
}

- (DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *)deviceDeleteOnUnlinkSuccessDetails {
  if (![self isDeviceDeleteOnUnlinkSuccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceDeleteOnUnlinkSuccessDetails;
}

- (DBTEAMLOGDeviceLinkFailDetails *)deviceLinkFailDetails {
  if (![self isDeviceLinkFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkFailDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkFailDetails;
}

- (DBTEAMLOGDeviceLinkSuccessDetails *)deviceLinkSuccessDetails {
  if (![self isDeviceLinkSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceLinkSuccessDetails, but was %@.", [self tagName]];
  }
  return _deviceLinkSuccessDetails;
}

- (DBTEAMLOGDeviceManagementDisabledDetails *)deviceManagementDisabledDetails {
  if (![self isDeviceManagementDisabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementDisabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementDisabledDetails;
}

- (DBTEAMLOGDeviceManagementEnabledDetails *)deviceManagementEnabledDetails {
  if (![self isDeviceManagementEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceManagementEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceManagementEnabledDetails;
}

- (DBTEAMLOGDeviceSyncBackupStatusChangedDetails *)deviceSyncBackupStatusChangedDetails {
  if (![self isDeviceSyncBackupStatusChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceSyncBackupStatusChangedDetails;
}

- (DBTEAMLOGDeviceUnlinkDetails *)deviceUnlinkDetails {
  if (![self isDeviceUnlinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceUnlinkDetails, but was %@.", [self tagName]];
  }
  return _deviceUnlinkDetails;
}

- (DBTEAMLOGDropboxPasswordsExportedDetails *)dropboxPasswordsExportedDetails {
  if (![self isDropboxPasswordsExportedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails, but was %@.",
                       [self tagName]];
  }
  return _dropboxPasswordsExportedDetails;
}

- (DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *)dropboxPasswordsNewDeviceEnrolledDetails {
  if (![self isDropboxPasswordsNewDeviceEnrolledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails, but was %@.",
               [self tagName]];
  }
  return _dropboxPasswordsNewDeviceEnrolledDetails;
}

- (DBTEAMLOGEmmRefreshAuthTokenDetails *)emmRefreshAuthTokenDetails {
  if (![self isEmmRefreshAuthTokenDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails, but was %@.", [self tagName]];
  }
  return _emmRefreshAuthTokenDetails;
}

- (DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails *)externalDriveBackupEligibilityStatusCheckedDetails {
  if (![self isExternalDriveBackupEligibilityStatusCheckedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails, but was %@.",
                       [self tagName]];
  }
  return _externalDriveBackupEligibilityStatusCheckedDetails;
}

- (DBTEAMLOGExternalDriveBackupStatusChangedDetails *)externalDriveBackupStatusChangedDetails {
  if (![self isExternalDriveBackupStatusChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails, but was %@.",
               [self tagName]];
  }
  return _externalDriveBackupStatusChangedDetails;
}

- (DBTEAMLOGAccountCaptureChangeAvailabilityDetails *)accountCaptureChangeAvailabilityDetails {
  if (![self isAccountCaptureChangeAvailabilityDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureChangeAvailabilityDetails;
}

- (DBTEAMLOGAccountCaptureMigrateAccountDetails *)accountCaptureMigrateAccountDetails {
  if (![self isAccountCaptureMigrateAccountDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureMigrateAccountDetails;
}

- (DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *)accountCaptureNotificationEmailsSentDetails {
  if (![self isAccountCaptureNotificationEmailsSentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureNotificationEmailsSentDetails;
}

- (DBTEAMLOGAccountCaptureRelinquishAccountDetails *)accountCaptureRelinquishAccountDetails {
  if (![self isAccountCaptureRelinquishAccountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails, but was %@.",
               [self tagName]];
  }
  return _accountCaptureRelinquishAccountDetails;
}

- (DBTEAMLOGDisabledDomainInvitesDetails *)disabledDomainInvitesDetails {
  if (![self isDisabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDisabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _disabledDomainInvitesDetails;
}

- (DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *)domainInvitesApproveRequestToJoinTeamDetails {
  if (![self isDomainInvitesApproveRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesApproveRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *)domainInvitesDeclineRequestToJoinTeamDetails {
  if (![self isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesDeclineRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesEmailExistingUsersDetails *)domainInvitesEmailExistingUsersDetails {
  if (![self isDomainInvitesEmailExistingUsersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesEmailExistingUsersDetails;
}

- (DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *)domainInvitesRequestToJoinTeamDetails {
  if (![self isDomainInvitesRequestToJoinTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _domainInvitesRequestToJoinTeamDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *)domainInvitesSetInviteNewUserPrefToNoDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToNoDetails;
}

- (DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *)domainInvitesSetInviteNewUserPrefToYesDetails {
  if (![self isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails, but was %@.",
               [self tagName]];
  }
  return _domainInvitesSetInviteNewUserPrefToYesDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainFailDetails *)domainVerificationAddDomainFailDetails {
  if (![self isDomainVerificationAddDomainFailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainFailDetails;
}

- (DBTEAMLOGDomainVerificationAddDomainSuccessDetails *)domainVerificationAddDomainSuccessDetails {
  if (![self isDomainVerificationAddDomainSuccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails, but was %@.",
               [self tagName]];
  }
  return _domainVerificationAddDomainSuccessDetails;
}

- (DBTEAMLOGDomainVerificationRemoveDomainDetails *)domainVerificationRemoveDomainDetails {
  if (![self isDomainVerificationRemoveDomainDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails, but was %@.",
                       [self tagName]];
  }
  return _domainVerificationRemoveDomainDetails;
}

- (DBTEAMLOGEnabledDomainInvitesDetails *)enabledDomainInvitesDetails {
  if (![self isEnabledDomainInvitesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEnabledDomainInvitesDetails, but was %@.", [self tagName]];
  }
  return _enabledDomainInvitesDetails;
}

- (DBTEAMLOGApplyNamingConventionDetails *)applyNamingConventionDetails {
  if (![self isApplyNamingConventionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsApplyNamingConventionDetails, but was %@.", [self tagName]];
  }
  return _applyNamingConventionDetails;
}

- (DBTEAMLOGCreateFolderDetails *)createFolderDetails {
  if (![self isCreateFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsCreateFolderDetails, but was %@.", [self tagName]];
  }
  return _createFolderDetails;
}

- (DBTEAMLOGFileAddDetails *)fileAddDetails {
  if (![self isFileAddDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileAddDetails, but was %@.", [self tagName]];
  }
  return _fileAddDetails;
}

- (DBTEAMLOGFileCopyDetails *)fileCopyDetails {
  if (![self isFileCopyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCopyDetails, but was %@.", [self tagName]];
  }
  return _fileCopyDetails;
}

- (DBTEAMLOGFileDeleteDetails *)fileDeleteDetails {
  if (![self isFileDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDeleteDetails, but was %@.", [self tagName]];
  }
  return _fileDeleteDetails;
}

- (DBTEAMLOGFileDownloadDetails *)fileDownloadDetails {
  if (![self isFileDownloadDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileDownloadDetails, but was %@.", [self tagName]];
  }
  return _fileDownloadDetails;
}

- (DBTEAMLOGFileEditDetails *)fileEditDetails {
  if (![self isFileEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileEditDetails, but was %@.", [self tagName]];
  }
  return _fileEditDetails;
}

- (DBTEAMLOGFileGetCopyReferenceDetails *)fileGetCopyReferenceDetails {
  if (![self isFileGetCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileGetCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileGetCopyReferenceDetails;
}

- (DBTEAMLOGFileLockingLockStatusChangedDetails *)fileLockingLockStatusChangedDetails {
  if (![self isFileLockingLockStatusChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _fileLockingLockStatusChangedDetails;
}

- (DBTEAMLOGFileMoveDetails *)fileMoveDetails {
  if (![self isFileMoveDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileMoveDetails, but was %@.", [self tagName]];
  }
  return _fileMoveDetails;
}

- (DBTEAMLOGFilePermanentlyDeleteDetails *)filePermanentlyDeleteDetails {
  if (![self isFilePermanentlyDeleteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails, but was %@.", [self tagName]];
  }
  return _filePermanentlyDeleteDetails;
}

- (DBTEAMLOGFilePreviewDetails *)filePreviewDetails {
  if (![self isFilePreviewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFilePreviewDetails, but was %@.", [self tagName]];
  }
  return _filePreviewDetails;
}

- (DBTEAMLOGFileRenameDetails *)fileRenameDetails {
  if (![self isFileRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRenameDetails, but was %@.", [self tagName]];
  }
  return _fileRenameDetails;
}

- (DBTEAMLOGFileRestoreDetails *)fileRestoreDetails {
  if (![self isFileRestoreDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRestoreDetails, but was %@.", [self tagName]];
  }
  return _fileRestoreDetails;
}

- (DBTEAMLOGFileRevertDetails *)fileRevertDetails {
  if (![self isFileRevertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRevertDetails, but was %@.", [self tagName]];
  }
  return _fileRevertDetails;
}

- (DBTEAMLOGFileRollbackChangesDetails *)fileRollbackChangesDetails {
  if (![self isFileRollbackChangesDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRollbackChangesDetails, but was %@.", [self tagName]];
  }
  return _fileRollbackChangesDetails;
}

- (DBTEAMLOGFileSaveCopyReferenceDetails *)fileSaveCopyReferenceDetails {
  if (![self isFileSaveCopyReferenceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails, but was %@.", [self tagName]];
  }
  return _fileSaveCopyReferenceDetails;
}

- (DBTEAMLOGFolderOverviewDescriptionChangedDetails *)folderOverviewDescriptionChangedDetails {
  if (![self isFolderOverviewDescriptionChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails, but was %@.",
               [self tagName]];
  }
  return _folderOverviewDescriptionChangedDetails;
}

- (DBTEAMLOGFolderOverviewItemPinnedDetails *)folderOverviewItemPinnedDetails {
  if (![self isFolderOverviewItemPinnedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails, but was %@.",
                       [self tagName]];
  }
  return _folderOverviewItemPinnedDetails;
}

- (DBTEAMLOGFolderOverviewItemUnpinnedDetails *)folderOverviewItemUnpinnedDetails {
  if (![self isFolderOverviewItemUnpinnedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails, but was %@.",
                       [self tagName]];
  }
  return _folderOverviewItemUnpinnedDetails;
}

- (DBTEAMLOGObjectLabelAddedDetails *)objectLabelAddedDetails {
  if (![self isObjectLabelAddedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsObjectLabelAddedDetails, but was %@.", [self tagName]];
  }
  return _objectLabelAddedDetails;
}

- (DBTEAMLOGObjectLabelRemovedDetails *)objectLabelRemovedDetails {
  if (![self isObjectLabelRemovedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsObjectLabelRemovedDetails, but was %@.", [self tagName]];
  }
  return _objectLabelRemovedDetails;
}

- (DBTEAMLOGObjectLabelUpdatedValueDetails *)objectLabelUpdatedValueDetails {
  if (![self isObjectLabelUpdatedValueDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails, but was %@.",
                       [self tagName]];
  }
  return _objectLabelUpdatedValueDetails;
}

- (DBTEAMLOGOrganizeFolderWithTidyDetails *)organizeFolderWithTidyDetails {
  if (![self isOrganizeFolderWithTidyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails, but was %@.",
                       [self tagName]];
  }
  return _organizeFolderWithTidyDetails;
}

- (DBTEAMLOGRewindFolderDetails *)rewindFolderDetails {
  if (![self isRewindFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsRewindFolderDetails, but was %@.", [self tagName]];
  }
  return _rewindFolderDetails;
}

- (DBTEAMLOGUndoNamingConventionDetails *)undoNamingConventionDetails {
  if (![self isUndoNamingConventionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsUndoNamingConventionDetails, but was %@.", [self tagName]];
  }
  return _undoNamingConventionDetails;
}

- (DBTEAMLOGUndoOrganizeFolderWithTidyDetails *)undoOrganizeFolderWithTidyDetails {
  if (![self isUndoOrganizeFolderWithTidyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails, but was %@.",
                       [self tagName]];
  }
  return _undoOrganizeFolderWithTidyDetails;
}

- (DBTEAMLOGUserTagsAddedDetails *)userTagsAddedDetails {
  if (![self isUserTagsAddedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsUserTagsAddedDetails, but was %@.", [self tagName]];
  }
  return _userTagsAddedDetails;
}

- (DBTEAMLOGUserTagsRemovedDetails *)userTagsRemovedDetails {
  if (![self isUserTagsRemovedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsUserTagsRemovedDetails, but was %@.", [self tagName]];
  }
  return _userTagsRemovedDetails;
}

- (DBTEAMLOGEmailIngestReceiveFileDetails *)emailIngestReceiveFileDetails {
  if (![self isEmailIngestReceiveFileDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails, but was %@.",
                       [self tagName]];
  }
  return _emailIngestReceiveFileDetails;
}

- (DBTEAMLOGFileRequestChangeDetails *)fileRequestChangeDetails {
  if (![self isFileRequestChangeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestChangeDetails, but was %@.", [self tagName]];
  }
  return _fileRequestChangeDetails;
}

- (DBTEAMLOGFileRequestCloseDetails *)fileRequestCloseDetails {
  if (![self isFileRequestCloseDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCloseDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCloseDetails;
}

- (DBTEAMLOGFileRequestCreateDetails *)fileRequestCreateDetails {
  if (![self isFileRequestCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestCreateDetails, but was %@.", [self tagName]];
  }
  return _fileRequestCreateDetails;
}

- (DBTEAMLOGFileRequestDeleteDetails *)fileRequestDeleteDetails {
  if (![self isFileRequestDeleteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestDeleteDetails, but was %@.", [self tagName]];
  }
  return _fileRequestDeleteDetails;
}

- (DBTEAMLOGFileRequestReceiveFileDetails *)fileRequestReceiveFileDetails {
  if (![self isFileRequestReceiveFileDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestReceiveFileDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestReceiveFileDetails;
}

- (DBTEAMLOGGroupAddExternalIdDetails *)groupAddExternalIdDetails {
  if (![self isGroupAddExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupAddExternalIdDetails;
}

- (DBTEAMLOGGroupAddMemberDetails *)groupAddMemberDetails {
  if (![self isGroupAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupAddMemberDetails, but was %@.", [self tagName]];
  }
  return _groupAddMemberDetails;
}

- (DBTEAMLOGGroupChangeExternalIdDetails *)groupChangeExternalIdDetails {
  if (![self isGroupChangeExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupChangeExternalIdDetails;
}

- (DBTEAMLOGGroupChangeManagementTypeDetails *)groupChangeManagementTypeDetails {
  if (![self isGroupChangeManagementTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _groupChangeManagementTypeDetails;
}

- (DBTEAMLOGGroupChangeMemberRoleDetails *)groupChangeMemberRoleDetails {
  if (![self isGroupChangeMemberRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails, but was %@.", [self tagName]];
  }
  return _groupChangeMemberRoleDetails;
}

- (DBTEAMLOGGroupCreateDetails *)groupCreateDetails {
  if (![self isGroupCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupCreateDetails, but was %@.", [self tagName]];
  }
  return _groupCreateDetails;
}

- (DBTEAMLOGGroupDeleteDetails *)groupDeleteDetails {
  if (![self isGroupDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDeleteDetails, but was %@.", [self tagName]];
  }
  return _groupDeleteDetails;
}

- (DBTEAMLOGGroupDescriptionUpdatedDetails *)groupDescriptionUpdatedDetails {
  if (![self isGroupDescriptionUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupDescriptionUpdatedDetails;
}

- (DBTEAMLOGGroupJoinPolicyUpdatedDetails *)groupJoinPolicyUpdatedDetails {
  if (![self isGroupJoinPolicyUpdatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails, but was %@.",
                       [self tagName]];
  }
  return _groupJoinPolicyUpdatedDetails;
}

- (DBTEAMLOGGroupMovedDetails *)groupMovedDetails {
  if (![self isGroupMovedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupMovedDetails, but was %@.", [self tagName]];
  }
  return _groupMovedDetails;
}

- (DBTEAMLOGGroupRemoveExternalIdDetails *)groupRemoveExternalIdDetails {
  if (![self isGroupRemoveExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveExternalIdDetails;
}

- (DBTEAMLOGGroupRemoveMemberDetails *)groupRemoveMemberDetails {
  if (![self isGroupRemoveMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRemoveMemberDetails, but was %@.", [self tagName]];
  }
  return _groupRemoveMemberDetails;
}

- (DBTEAMLOGGroupRenameDetails *)groupRenameDetails {
  if (![self isGroupRenameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupRenameDetails, but was %@.", [self tagName]];
  }
  return _groupRenameDetails;
}

- (DBTEAMLOGAccountLockOrUnlockedDetails *)accountLockOrUnlockedDetails {
  if (![self isAccountLockOrUnlockedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails, but was %@.", [self tagName]];
  }
  return _accountLockOrUnlockedDetails;
}

- (DBTEAMLOGEmmErrorDetails *)emmErrorDetails {
  if (![self isEmmErrorDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmErrorDetails, but was %@.", [self tagName]];
  }
  return _emmErrorDetails;
}

- (DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails *)guestAdminSignedInViaTrustedTeamsDetails {
  if (![self isGuestAdminSignedInViaTrustedTeamsDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails, but was %@.",
               [self tagName]];
  }
  return _guestAdminSignedInViaTrustedTeamsDetails;
}

- (DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails *)guestAdminSignedOutViaTrustedTeamsDetails {
  if (![self isGuestAdminSignedOutViaTrustedTeamsDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails, but was %@.",
               [self tagName]];
  }
  return _guestAdminSignedOutViaTrustedTeamsDetails;
}

- (DBTEAMLOGLoginFailDetails *)loginFailDetails {
  if (![self isLoginFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLoginFailDetails, but was %@.", [self tagName]];
  }
  return _loginFailDetails;
}

- (DBTEAMLOGLoginSuccessDetails *)loginSuccessDetails {
  if (![self isLoginSuccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLoginSuccessDetails, but was %@.", [self tagName]];
  }
  return _loginSuccessDetails;
}

- (DBTEAMLOGLogoutDetails *)logoutDetails {
  if (![self isLogoutDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsLogoutDetails, but was %@.", [self tagName]];
  }
  return _logoutDetails;
}

- (DBTEAMLOGResellerSupportSessionEndDetails *)resellerSupportSessionEndDetails {
  if (![self isResellerSupportSessionEndDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionEndDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionEndDetails;
}

- (DBTEAMLOGResellerSupportSessionStartDetails *)resellerSupportSessionStartDetails {
  if (![self isResellerSupportSessionStartDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportSessionStartDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportSessionStartDetails;
}

- (DBTEAMLOGSignInAsSessionEndDetails *)signInAsSessionEndDetails {
  if (![self isSignInAsSessionEndDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionEndDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionEndDetails;
}

- (DBTEAMLOGSignInAsSessionStartDetails *)signInAsSessionStartDetails {
  if (![self isSignInAsSessionStartDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSignInAsSessionStartDetails, but was %@.", [self tagName]];
  }
  return _signInAsSessionStartDetails;
}

- (DBTEAMLOGSsoErrorDetails *)ssoErrorDetails {
  if (![self isSsoErrorDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoErrorDetails, but was %@.", [self tagName]];
  }
  return _ssoErrorDetails;
}

- (DBTEAMLOGCreateTeamInviteLinkDetails *)createTeamInviteLinkDetails {
  if (![self isCreateTeamInviteLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails, but was %@.", [self tagName]];
  }
  return _createTeamInviteLinkDetails;
}

- (DBTEAMLOGDeleteTeamInviteLinkDetails *)deleteTeamInviteLinkDetails {
  if (![self isDeleteTeamInviteLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails, but was %@.", [self tagName]];
  }
  return _deleteTeamInviteLinkDetails;
}

- (DBTEAMLOGMemberAddExternalIdDetails *)memberAddExternalIdDetails {
  if (![self isMemberAddExternalIdDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberAddExternalIdDetails, but was %@.", [self tagName]];
  }
  return _memberAddExternalIdDetails;
}

- (DBTEAMLOGMemberAddNameDetails *)memberAddNameDetails {
  if (![self isMemberAddNameDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberAddNameDetails, but was %@.", [self tagName]];
  }
  return _memberAddNameDetails;
}

- (DBTEAMLOGMemberChangeAdminRoleDetails *)memberChangeAdminRoleDetails {
  if (![self isMemberChangeAdminRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails, but was %@.", [self tagName]];
  }
  return _memberChangeAdminRoleDetails;
}

- (DBTEAMLOGMemberChangeEmailDetails *)memberChangeEmailDetails {
  if (![self isMemberChangeEmailDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeEmailDetails, but was %@.", [self tagName]];
  }
  return _memberChangeEmailDetails;
}

- (DBTEAMLOGMemberChangeExternalIdDetails *)memberChangeExternalIdDetails {
  if (![self isMemberChangeExternalIdDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeExternalIdDetails, but was %@.",
                       [self tagName]];
  }
  return _memberChangeExternalIdDetails;
}

- (DBTEAMLOGMemberChangeMembershipTypeDetails *)memberChangeMembershipTypeDetails {
  if (![self isMemberChangeMembershipTypeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails, but was %@.",
                       [self tagName]];
  }
  return _memberChangeMembershipTypeDetails;
}

- (DBTEAMLOGMemberChangeNameDetails *)memberChangeNameDetails {
  if (![self isMemberChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeNameDetails, but was %@.", [self tagName]];
  }
  return _memberChangeNameDetails;
}

- (DBTEAMLOGMemberChangeResellerRoleDetails *)memberChangeResellerRoleDetails {
  if (![self isMemberChangeResellerRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _memberChangeResellerRoleDetails;
}

- (DBTEAMLOGMemberChangeStatusDetails *)memberChangeStatusDetails {
  if (![self isMemberChangeStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberChangeStatusDetails, but was %@.", [self tagName]];
  }
  return _memberChangeStatusDetails;
}

- (DBTEAMLOGMemberDeleteManualContactsDetails *)memberDeleteManualContactsDetails {
  if (![self isMemberDeleteManualContactsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails, but was %@.",
                       [self tagName]];
  }
  return _memberDeleteManualContactsDetails;
}

- (DBTEAMLOGMemberDeleteProfilePhotoDetails *)memberDeleteProfilePhotoDetails {
  if (![self isMemberDeleteProfilePhotoDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails, but was %@.",
                       [self tagName]];
  }
  return _memberDeleteProfilePhotoDetails;
}

- (DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *)memberPermanentlyDeleteAccountContentsDetails {
  if (![self isMemberPermanentlyDeleteAccountContentsDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails, but was %@.",
               [self tagName]];
  }
  return _memberPermanentlyDeleteAccountContentsDetails;
}

- (DBTEAMLOGMemberRemoveExternalIdDetails *)memberRemoveExternalIdDetails {
  if (![self isMemberRemoveExternalIdDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails, but was %@.",
                       [self tagName]];
  }
  return _memberRemoveExternalIdDetails;
}

- (DBTEAMLOGMemberSetProfilePhotoDetails *)memberSetProfilePhotoDetails {
  if (![self isMemberSetProfilePhotoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails, but was %@.", [self tagName]];
  }
  return _memberSetProfilePhotoDetails;
}

- (DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *)memberSpaceLimitsAddCustomQuotaDetails {
  if (![self isMemberSpaceLimitsAddCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsAddCustomQuotaDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *)memberSpaceLimitsChangeCustomQuotaDetails {
  if (![self isMemberSpaceLimitsChangeCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsChangeCustomQuotaDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *)memberSpaceLimitsChangeStatusDetails {
  if (![self isMemberSpaceLimitsChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangeStatusDetails;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *)memberSpaceLimitsRemoveCustomQuotaDetails {
  if (![self isMemberSpaceLimitsRemoveCustomQuotaDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsRemoveCustomQuotaDetails;
}

- (DBTEAMLOGMemberSuggestDetails *)memberSuggestDetails {
  if (![self isMemberSuggestDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestDetails, but was %@.", [self tagName]];
  }
  return _memberSuggestDetails;
}

- (DBTEAMLOGMemberTransferAccountContentsDetails *)memberTransferAccountContentsDetails {
  if (![self isMemberTransferAccountContentsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails, but was %@.",
                       [self tagName]];
  }
  return _memberTransferAccountContentsDetails;
}

- (DBTEAMLOGPendingSecondaryEmailAddedDetails *)pendingSecondaryEmailAddedDetails {
  if (![self isPendingSecondaryEmailAddedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails, but was %@.",
                       [self tagName]];
  }
  return _pendingSecondaryEmailAddedDetails;
}

- (DBTEAMLOGSecondaryEmailDeletedDetails *)secondaryEmailDeletedDetails {
  if (![self isSecondaryEmailDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails, but was %@.", [self tagName]];
  }
  return _secondaryEmailDeletedDetails;
}

- (DBTEAMLOGSecondaryEmailVerifiedDetails *)secondaryEmailVerifiedDetails {
  if (![self isSecondaryEmailVerifiedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails, but was %@.",
                       [self tagName]];
  }
  return _secondaryEmailVerifiedDetails;
}

- (DBTEAMLOGSecondaryMailsPolicyChangedDetails *)secondaryMailsPolicyChangedDetails {
  if (![self isSecondaryMailsPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _secondaryMailsPolicyChangedDetails;
}

- (DBTEAMLOGBinderAddPageDetails *)binderAddPageDetails {
  if (![self isBinderAddPageDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderAddPageDetails, but was %@.", [self tagName]];
  }
  return _binderAddPageDetails;
}

- (DBTEAMLOGBinderAddSectionDetails *)binderAddSectionDetails {
  if (![self isBinderAddSectionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderAddSectionDetails, but was %@.", [self tagName]];
  }
  return _binderAddSectionDetails;
}

- (DBTEAMLOGBinderRemovePageDetails *)binderRemovePageDetails {
  if (![self isBinderRemovePageDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderRemovePageDetails, but was %@.", [self tagName]];
  }
  return _binderRemovePageDetails;
}

- (DBTEAMLOGBinderRemoveSectionDetails *)binderRemoveSectionDetails {
  if (![self isBinderRemoveSectionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderRemoveSectionDetails, but was %@.", [self tagName]];
  }
  return _binderRemoveSectionDetails;
}

- (DBTEAMLOGBinderRenamePageDetails *)binderRenamePageDetails {
  if (![self isBinderRenamePageDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderRenamePageDetails, but was %@.", [self tagName]];
  }
  return _binderRenamePageDetails;
}

- (DBTEAMLOGBinderRenameSectionDetails *)binderRenameSectionDetails {
  if (![self isBinderRenameSectionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderRenameSectionDetails, but was %@.", [self tagName]];
  }
  return _binderRenameSectionDetails;
}

- (DBTEAMLOGBinderReorderPageDetails *)binderReorderPageDetails {
  if (![self isBinderReorderPageDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderReorderPageDetails, but was %@.", [self tagName]];
  }
  return _binderReorderPageDetails;
}

- (DBTEAMLOGBinderReorderSectionDetails *)binderReorderSectionDetails {
  if (![self isBinderReorderSectionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsBinderReorderSectionDetails, but was %@.", [self tagName]];
  }
  return _binderReorderSectionDetails;
}

- (DBTEAMLOGPaperContentAddMemberDetails *)paperContentAddMemberDetails {
  if (![self isPaperContentAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddMemberDetails, but was %@.", [self tagName]];
  }
  return _paperContentAddMemberDetails;
}

- (DBTEAMLOGPaperContentAddToFolderDetails *)paperContentAddToFolderDetails {
  if (![self isPaperContentAddToFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentAddToFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentAddToFolderDetails;
}

- (DBTEAMLOGPaperContentArchiveDetails *)paperContentArchiveDetails {
  if (![self isPaperContentArchiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentArchiveDetails, but was %@.", [self tagName]];
  }
  return _paperContentArchiveDetails;
}

- (DBTEAMLOGPaperContentCreateDetails *)paperContentCreateDetails {
  if (![self isPaperContentCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentCreateDetails, but was %@.", [self tagName]];
  }
  return _paperContentCreateDetails;
}

- (DBTEAMLOGPaperContentPermanentlyDeleteDetails *)paperContentPermanentlyDeleteDetails {
  if (![self isPaperContentPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentPermanentlyDeleteDetails;
}

- (DBTEAMLOGPaperContentRemoveFromFolderDetails *)paperContentRemoveFromFolderDetails {
  if (![self isPaperContentRemoveFromFolderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveFromFolderDetails;
}

- (DBTEAMLOGPaperContentRemoveMemberDetails *)paperContentRemoveMemberDetails {
  if (![self isPaperContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _paperContentRemoveMemberDetails;
}

- (DBTEAMLOGPaperContentRenameDetails *)paperContentRenameDetails {
  if (![self isPaperContentRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRenameDetails, but was %@.", [self tagName]];
  }
  return _paperContentRenameDetails;
}

- (DBTEAMLOGPaperContentRestoreDetails *)paperContentRestoreDetails {
  if (![self isPaperContentRestoreDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperContentRestoreDetails, but was %@.", [self tagName]];
  }
  return _paperContentRestoreDetails;
}

- (DBTEAMLOGPaperDocAddCommentDetails *)paperDocAddCommentDetails {
  if (![self isPaperDocAddCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocAddCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocAddCommentDetails;
}

- (DBTEAMLOGPaperDocChangeMemberRoleDetails *)paperDocChangeMemberRoleDetails {
  if (![self isPaperDocChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeMemberRoleDetails;
}

- (DBTEAMLOGPaperDocChangeSharingPolicyDetails *)paperDocChangeSharingPolicyDetails {
  if (![self isPaperDocChangeSharingPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeSharingPolicyDetails;
}

- (DBTEAMLOGPaperDocChangeSubscriptionDetails *)paperDocChangeSubscriptionDetails {
  if (![self isPaperDocChangeSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocChangeSubscriptionDetails;
}

- (DBTEAMLOGPaperDocDeletedDetails *)paperDocDeletedDetails {
  if (![self isPaperDocDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeletedDetails;
}

- (DBTEAMLOGPaperDocDeleteCommentDetails *)paperDocDeleteCommentDetails {
  if (![self isPaperDocDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocDeleteCommentDetails;
}

- (DBTEAMLOGPaperDocDownloadDetails *)paperDocDownloadDetails {
  if (![self isPaperDocDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocDownloadDetails, but was %@.", [self tagName]];
  }
  return _paperDocDownloadDetails;
}

- (DBTEAMLOGPaperDocEditDetails *)paperDocEditDetails {
  if (![self isPaperDocEditDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditDetails;
}

- (DBTEAMLOGPaperDocEditCommentDetails *)paperDocEditCommentDetails {
  if (![self isPaperDocEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocEditCommentDetails, but was %@.", [self tagName]];
  }
  return _paperDocEditCommentDetails;
}

- (DBTEAMLOGPaperDocFollowedDetails *)paperDocFollowedDetails {
  if (![self isPaperDocFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperDocFollowedDetails;
}

- (DBTEAMLOGPaperDocMentionDetails *)paperDocMentionDetails {
  if (![self isPaperDocMentionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocMentionDetails, but was %@.", [self tagName]];
  }
  return _paperDocMentionDetails;
}

- (DBTEAMLOGPaperDocOwnershipChangedDetails *)paperDocOwnershipChangedDetails {
  if (![self isPaperDocOwnershipChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocOwnershipChangedDetails;
}

- (DBTEAMLOGPaperDocRequestAccessDetails *)paperDocRequestAccessDetails {
  if (![self isPaperDocRequestAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRequestAccessDetails, but was %@.", [self tagName]];
  }
  return _paperDocRequestAccessDetails;
}

- (DBTEAMLOGPaperDocResolveCommentDetails *)paperDocResolveCommentDetails {
  if (![self isPaperDocResolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocResolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocResolveCommentDetails;
}

- (DBTEAMLOGPaperDocRevertDetails *)paperDocRevertDetails {
  if (![self isPaperDocRevertDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocRevertDetails, but was %@.", [self tagName]];
  }
  return _paperDocRevertDetails;
}

- (DBTEAMLOGPaperDocSlackShareDetails *)paperDocSlackShareDetails {
  if (![self isPaperDocSlackShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocSlackShareDetails, but was %@.", [self tagName]];
  }
  return _paperDocSlackShareDetails;
}

- (DBTEAMLOGPaperDocTeamInviteDetails *)paperDocTeamInviteDetails {
  if (![self isPaperDocTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperDocTeamInviteDetails;
}

- (DBTEAMLOGPaperDocTrashedDetails *)paperDocTrashedDetails {
  if (![self isPaperDocTrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocTrashedDetails, but was %@.", [self tagName]];
  }
  return _paperDocTrashedDetails;
}

- (DBTEAMLOGPaperDocUnresolveCommentDetails *)paperDocUnresolveCommentDetails {
  if (![self isPaperDocUnresolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDocUnresolveCommentDetails;
}

- (DBTEAMLOGPaperDocUntrashedDetails *)paperDocUntrashedDetails {
  if (![self isPaperDocUntrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocUntrashedDetails, but was %@.", [self tagName]];
  }
  return _paperDocUntrashedDetails;
}

- (DBTEAMLOGPaperDocViewDetails *)paperDocViewDetails {
  if (![self isPaperDocViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDocViewDetails, but was %@.", [self tagName]];
  }
  return _paperDocViewDetails;
}

- (DBTEAMLOGPaperExternalViewAllowDetails *)paperExternalViewAllowDetails {
  if (![self isPaperExternalViewAllowDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewAllowDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewAllowDetails;
}

- (DBTEAMLOGPaperExternalViewDefaultTeamDetails *)paperExternalViewDefaultTeamDetails {
  if (![self isPaperExternalViewDefaultTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewDefaultTeamDetails;
}

- (DBTEAMLOGPaperExternalViewForbidDetails *)paperExternalViewForbidDetails {
  if (![self isPaperExternalViewForbidDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperExternalViewForbidDetails, but was %@.",
                       [self tagName]];
  }
  return _paperExternalViewForbidDetails;
}

- (DBTEAMLOGPaperFolderChangeSubscriptionDetails *)paperFolderChangeSubscriptionDetails {
  if (![self isPaperFolderChangeSubscriptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperFolderChangeSubscriptionDetails;
}

- (DBTEAMLOGPaperFolderDeletedDetails *)paperFolderDeletedDetails {
  if (![self isPaperFolderDeletedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderDeletedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderDeletedDetails;
}

- (DBTEAMLOGPaperFolderFollowedDetails *)paperFolderFollowedDetails {
  if (![self isPaperFolderFollowedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderFollowedDetails, but was %@.", [self tagName]];
  }
  return _paperFolderFollowedDetails;
}

- (DBTEAMLOGPaperFolderTeamInviteDetails *)paperFolderTeamInviteDetails {
  if (![self isPaperFolderTeamInviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _paperFolderTeamInviteDetails;
}

- (DBTEAMLOGPaperPublishedLinkChangePermissionDetails *)paperPublishedLinkChangePermissionDetails {
  if (![self isPaperPublishedLinkChangePermissionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails, but was %@.",
               [self tagName]];
  }
  return _paperPublishedLinkChangePermissionDetails;
}

- (DBTEAMLOGPaperPublishedLinkCreateDetails *)paperPublishedLinkCreateDetails {
  if (![self isPaperPublishedLinkCreateDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails, but was %@.",
                       [self tagName]];
  }
  return _paperPublishedLinkCreateDetails;
}

- (DBTEAMLOGPaperPublishedLinkDisabledDetails *)paperPublishedLinkDisabledDetails {
  if (![self isPaperPublishedLinkDisabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails, but was %@.",
                       [self tagName]];
  }
  return _paperPublishedLinkDisabledDetails;
}

- (DBTEAMLOGPaperPublishedLinkViewDetails *)paperPublishedLinkViewDetails {
  if (![self isPaperPublishedLinkViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails, but was %@.",
                       [self tagName]];
  }
  return _paperPublishedLinkViewDetails;
}

- (DBTEAMLOGPasswordChangeDetails *)passwordChangeDetails {
  if (![self isPasswordChangeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordChangeDetails, but was %@.", [self tagName]];
  }
  return _passwordChangeDetails;
}

- (DBTEAMLOGPasswordResetDetails *)passwordResetDetails {
  if (![self isPasswordResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetDetails, but was %@.", [self tagName]];
  }
  return _passwordResetDetails;
}

- (DBTEAMLOGPasswordResetAllDetails *)passwordResetAllDetails {
  if (![self isPasswordResetAllDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordResetAllDetails, but was %@.", [self tagName]];
  }
  return _passwordResetAllDetails;
}

- (DBTEAMLOGClassificationCreateReportDetails *)classificationCreateReportDetails {
  if (![self isClassificationCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsClassificationCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _classificationCreateReportDetails;
}

- (DBTEAMLOGClassificationCreateReportFailDetails *)classificationCreateReportFailDetails {
  if (![self isClassificationCreateReportFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsClassificationCreateReportFailDetails, but was %@.",
                       [self tagName]];
  }
  return _classificationCreateReportFailDetails;
}

- (DBTEAMLOGEmmCreateExceptionsReportDetails *)emmCreateExceptionsReportDetails {
  if (![self isEmmCreateExceptionsReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails, but was %@.",
                       [self tagName]];
  }
  return _emmCreateExceptionsReportDetails;
}

- (DBTEAMLOGEmmCreateUsageReportDetails *)emmCreateUsageReportDetails {
  if (![self isEmmCreateUsageReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmCreateUsageReportDetails, but was %@.", [self tagName]];
  }
  return _emmCreateUsageReportDetails;
}

- (DBTEAMLOGExportMembersReportDetails *)exportMembersReportDetails {
  if (![self isExportMembersReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExportMembersReportDetails, but was %@.", [self tagName]];
  }
  return _exportMembersReportDetails;
}

- (DBTEAMLOGExportMembersReportFailDetails *)exportMembersReportFailDetails {
  if (![self isExportMembersReportFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsExportMembersReportFailDetails, but was %@.",
                       [self tagName]];
  }
  return _exportMembersReportFailDetails;
}

- (DBTEAMLOGExternalSharingCreateReportDetails *)externalSharingCreateReportDetails {
  if (![self isExternalSharingCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsExternalSharingCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _externalSharingCreateReportDetails;
}

- (DBTEAMLOGExternalSharingReportFailedDetails *)externalSharingReportFailedDetails {
  if (![self isExternalSharingReportFailedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsExternalSharingReportFailedDetails, but was %@.",
                       [self tagName]];
  }
  return _externalSharingReportFailedDetails;
}

- (DBTEAMLOGNoExpirationLinkGenCreateReportDetails *)noExpirationLinkGenCreateReportDetails {
  if (![self isNoExpirationLinkGenCreateReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails, but was %@.",
               [self tagName]];
  }
  return _noExpirationLinkGenCreateReportDetails;
}

- (DBTEAMLOGNoExpirationLinkGenReportFailedDetails *)noExpirationLinkGenReportFailedDetails {
  if (![self isNoExpirationLinkGenReportFailedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails, but was %@.",
               [self tagName]];
  }
  return _noExpirationLinkGenReportFailedDetails;
}

- (DBTEAMLOGNoPasswordLinkGenCreateReportDetails *)noPasswordLinkGenCreateReportDetails {
  if (![self isNoPasswordLinkGenCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _noPasswordLinkGenCreateReportDetails;
}

- (DBTEAMLOGNoPasswordLinkGenReportFailedDetails *)noPasswordLinkGenReportFailedDetails {
  if (![self isNoPasswordLinkGenReportFailedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails, but was %@.",
                       [self tagName]];
  }
  return _noPasswordLinkGenReportFailedDetails;
}

- (DBTEAMLOGNoPasswordLinkViewCreateReportDetails *)noPasswordLinkViewCreateReportDetails {
  if (![self isNoPasswordLinkViewCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _noPasswordLinkViewCreateReportDetails;
}

- (DBTEAMLOGNoPasswordLinkViewReportFailedDetails *)noPasswordLinkViewReportFailedDetails {
  if (![self isNoPasswordLinkViewReportFailedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails, but was %@.",
                       [self tagName]];
  }
  return _noPasswordLinkViewReportFailedDetails;
}

- (DBTEAMLOGOutdatedLinkViewCreateReportDetails *)outdatedLinkViewCreateReportDetails {
  if (![self isOutdatedLinkViewCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _outdatedLinkViewCreateReportDetails;
}

- (DBTEAMLOGOutdatedLinkViewReportFailedDetails *)outdatedLinkViewReportFailedDetails {
  if (![self isOutdatedLinkViewReportFailedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails, but was %@.",
                       [self tagName]];
  }
  return _outdatedLinkViewReportFailedDetails;
}

- (DBTEAMLOGPaperAdminExportStartDetails *)paperAdminExportStartDetails {
  if (![self isPaperAdminExportStartDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperAdminExportStartDetails, but was %@.", [self tagName]];
  }
  return _paperAdminExportStartDetails;
}

- (DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *)smartSyncCreateAdminPrivilegeReportDetails {
  if (![self isSmartSyncCreateAdminPrivilegeReportDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails, but was %@.",
               [self tagName]];
  }
  return _smartSyncCreateAdminPrivilegeReportDetails;
}

- (DBTEAMLOGTeamActivityCreateReportDetails *)teamActivityCreateReportDetails {
  if (![self isTeamActivityCreateReportDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamActivityCreateReportDetails, but was %@.",
                       [self tagName]];
  }
  return _teamActivityCreateReportDetails;
}

- (DBTEAMLOGTeamActivityCreateReportFailDetails *)teamActivityCreateReportFailDetails {
  if (![self isTeamActivityCreateReportFailDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails, but was %@.",
                       [self tagName]];
  }
  return _teamActivityCreateReportFailDetails;
}

- (DBTEAMLOGCollectionShareDetails *)collectionShareDetails {
  if (![self isCollectionShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsCollectionShareDetails, but was %@.", [self tagName]];
  }
  return _collectionShareDetails;
}

- (DBTEAMLOGFileTransfersFileAddDetails *)fileTransfersFileAddDetails {
  if (![self isFileTransfersFileAddDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersFileAddDetails, but was %@.", [self tagName]];
  }
  return _fileTransfersFileAddDetails;
}

- (DBTEAMLOGFileTransfersTransferDeleteDetails *)fileTransfersTransferDeleteDetails {
  if (![self isFileTransfersTransferDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _fileTransfersTransferDeleteDetails;
}

- (DBTEAMLOGFileTransfersTransferDownloadDetails *)fileTransfersTransferDownloadDetails {
  if (![self isFileTransfersTransferDownloadDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails, but was %@.",
                       [self tagName]];
  }
  return _fileTransfersTransferDownloadDetails;
}

- (DBTEAMLOGFileTransfersTransferSendDetails *)fileTransfersTransferSendDetails {
  if (![self isFileTransfersTransferSendDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersTransferSendDetails, but was %@.",
                       [self tagName]];
  }
  return _fileTransfersTransferSendDetails;
}

- (DBTEAMLOGFileTransfersTransferViewDetails *)fileTransfersTransferViewDetails {
  if (![self isFileTransfersTransferViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersTransferViewDetails, but was %@.",
                       [self tagName]];
  }
  return _fileTransfersTransferViewDetails;
}

- (DBTEAMLOGNoteAclInviteOnlyDetails *)noteAclInviteOnlyDetails {
  if (![self isNoteAclInviteOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails, but was %@.", [self tagName]];
  }
  return _noteAclInviteOnlyDetails;
}

- (DBTEAMLOGNoteAclLinkDetails *)noteAclLinkDetails {
  if (![self isNoteAclLinkDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclLinkDetails;
}

- (DBTEAMLOGNoteAclTeamLinkDetails *)noteAclTeamLinkDetails {
  if (![self isNoteAclTeamLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteAclTeamLinkDetails, but was %@.", [self tagName]];
  }
  return _noteAclTeamLinkDetails;
}

- (DBTEAMLOGNoteSharedDetails *)noteSharedDetails {
  if (![self isNoteSharedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _noteSharedDetails;
}

- (DBTEAMLOGNoteShareReceiveDetails *)noteShareReceiveDetails {
  if (![self isNoteShareReceiveDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsNoteShareReceiveDetails, but was %@.", [self tagName]];
  }
  return _noteShareReceiveDetails;
}

- (DBTEAMLOGOpenNoteSharedDetails *)openNoteSharedDetails {
  if (![self isOpenNoteSharedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsOpenNoteSharedDetails, but was %@.", [self tagName]];
  }
  return _openNoteSharedDetails;
}

- (DBTEAMLOGSfAddGroupDetails *)sfAddGroupDetails {
  if (![self isSfAddGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAddGroupDetails, but was %@.", [self tagName]];
  }
  return _sfAddGroupDetails;
}

- (DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *)sfAllowNonMembersToViewSharedLinksDetails {
  if (![self isSfAllowNonMembersToViewSharedLinksDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails, but was %@.",
               [self tagName]];
  }
  return _sfAllowNonMembersToViewSharedLinksDetails;
}

- (DBTEAMLOGSfExternalInviteWarnDetails *)sfExternalInviteWarnDetails {
  if (![self isSfExternalInviteWarnDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfExternalInviteWarnDetails, but was %@.", [self tagName]];
  }
  return _sfExternalInviteWarnDetails;
}

- (DBTEAMLOGSfFbInviteDetails *)sfFbInviteDetails {
  if (![self isSfFbInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbInviteDetails, but was %@.", [self tagName]];
  }
  return _sfFbInviteDetails;
}

- (DBTEAMLOGSfFbInviteChangeRoleDetails *)sfFbInviteChangeRoleDetails {
  if (![self isSfFbInviteChangeRoleDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails, but was %@.", [self tagName]];
  }
  return _sfFbInviteChangeRoleDetails;
}

- (DBTEAMLOGSfFbUninviteDetails *)sfFbUninviteDetails {
  if (![self isSfFbUninviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfFbUninviteDetails, but was %@.", [self tagName]];
  }
  return _sfFbUninviteDetails;
}

- (DBTEAMLOGSfInviteGroupDetails *)sfInviteGroupDetails {
  if (![self isSfInviteGroupDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfInviteGroupDetails, but was %@.", [self tagName]];
  }
  return _sfInviteGroupDetails;
}

- (DBTEAMLOGSfTeamGrantAccessDetails *)sfTeamGrantAccessDetails {
  if (![self isSfTeamGrantAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamGrantAccessDetails, but was %@.", [self tagName]];
  }
  return _sfTeamGrantAccessDetails;
}

- (DBTEAMLOGSfTeamInviteDetails *)sfTeamInviteDetails {
  if (![self isSfTeamInviteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamInviteDetails;
}

- (DBTEAMLOGSfTeamInviteChangeRoleDetails *)sfTeamInviteChangeRoleDetails {
  if (![self isSfTeamInviteChangeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sfTeamInviteChangeRoleDetails;
}

- (DBTEAMLOGSfTeamJoinDetails *)sfTeamJoinDetails {
  if (![self isSfTeamJoinDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinDetails;
}

- (DBTEAMLOGSfTeamJoinFromOobLinkDetails *)sfTeamJoinFromOobLinkDetails {
  if (![self isSfTeamJoinFromOobLinkDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails, but was %@.", [self tagName]];
  }
  return _sfTeamJoinFromOobLinkDetails;
}

- (DBTEAMLOGSfTeamUninviteDetails *)sfTeamUninviteDetails {
  if (![self isSfTeamUninviteDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSfTeamUninviteDetails, but was %@.", [self tagName]];
  }
  return _sfTeamUninviteDetails;
}

- (DBTEAMLOGSharedContentAddInviteesDetails *)sharedContentAddInviteesDetails {
  if (![self isSharedContentAddInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddInviteesDetails;
}

- (DBTEAMLOGSharedContentAddLinkExpiryDetails *)sharedContentAddLinkExpiryDetails {
  if (![self isSharedContentAddLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentAddLinkPasswordDetails *)sharedContentAddLinkPasswordDetails {
  if (![self isSharedContentAddLinkPasswordDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentAddMemberDetails *)sharedContentAddMemberDetails {
  if (![self isSharedContentAddMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentAddMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentAddMemberDetails;
}

- (DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *)sharedContentChangeDownloadsPolicyDetails {
  if (![self isSharedContentChangeDownloadsPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeDownloadsPolicyDetails;
}

- (DBTEAMLOGSharedContentChangeInviteeRoleDetails *)sharedContentChangeInviteeRoleDetails {
  if (![self isSharedContentChangeInviteeRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeInviteeRoleDetails;
}

- (DBTEAMLOGSharedContentChangeLinkAudienceDetails *)sharedContentChangeLinkAudienceDetails {
  if (![self isSharedContentChangeLinkAudienceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkAudienceDetails;
}

- (DBTEAMLOGSharedContentChangeLinkExpiryDetails *)sharedContentChangeLinkExpiryDetails {
  if (![self isSharedContentChangeLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentChangeLinkPasswordDetails *)sharedContentChangeLinkPasswordDetails {
  if (![self isSharedContentChangeLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentChangeMemberRoleDetails *)sharedContentChangeMemberRoleDetails {
  if (![self isSharedContentChangeMemberRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentChangeMemberRoleDetails;
}

- (DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *)sharedContentChangeViewerInfoPolicyDetails {
  if (![self isSharedContentChangeViewerInfoPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentChangeViewerInfoPolicyDetails;
}

- (DBTEAMLOGSharedContentClaimInvitationDetails *)sharedContentClaimInvitationDetails {
  if (![self isSharedContentClaimInvitationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentClaimInvitationDetails;
}

- (DBTEAMLOGSharedContentCopyDetails *)sharedContentCopyDetails {
  if (![self isSharedContentCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentCopyDetails, but was %@.", [self tagName]];
  }
  return _sharedContentCopyDetails;
}

- (DBTEAMLOGSharedContentDownloadDetails *)sharedContentDownloadDetails {
  if (![self isSharedContentDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentDownloadDetails, but was %@.", [self tagName]];
  }
  return _sharedContentDownloadDetails;
}

- (DBTEAMLOGSharedContentRelinquishMembershipDetails *)sharedContentRelinquishMembershipDetails {
  if (![self isSharedContentRelinquishMembershipDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRelinquishMembershipDetails;
}

- (DBTEAMLOGSharedContentRemoveInviteesDetails *)sharedContentRemoveInviteesDetails {
  if (![self isSharedContentRemoveInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveInviteesDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkExpiryDetails *)sharedContentRemoveLinkExpiryDetails {
  if (![self isSharedContentRemoveLinkExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveLinkExpiryDetails;
}

- (DBTEAMLOGSharedContentRemoveLinkPasswordDetails *)sharedContentRemoveLinkPasswordDetails {
  if (![self isSharedContentRemoveLinkPasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedContentRemoveLinkPasswordDetails;
}

- (DBTEAMLOGSharedContentRemoveMemberDetails *)sharedContentRemoveMemberDetails {
  if (![self isSharedContentRemoveMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRemoveMemberDetails;
}

- (DBTEAMLOGSharedContentRequestAccessDetails *)sharedContentRequestAccessDetails {
  if (![self isSharedContentRequestAccessDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRequestAccessDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRequestAccessDetails;
}

- (DBTEAMLOGSharedContentRestoreInviteesDetails *)sharedContentRestoreInviteesDetails {
  if (![self isSharedContentRestoreInviteesDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRestoreInviteesDetails;
}

- (DBTEAMLOGSharedContentRestoreMemberDetails *)sharedContentRestoreMemberDetails {
  if (![self isSharedContentRestoreMemberDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedContentRestoreMemberDetails;
}

- (DBTEAMLOGSharedContentUnshareDetails *)sharedContentUnshareDetails {
  if (![self isSharedContentUnshareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentUnshareDetails, but was %@.", [self tagName]];
  }
  return _sharedContentUnshareDetails;
}

- (DBTEAMLOGSharedContentViewDetails *)sharedContentViewDetails {
  if (![self isSharedContentViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedContentViewDetails, but was %@.", [self tagName]];
  }
  return _sharedContentViewDetails;
}

- (DBTEAMLOGSharedFolderChangeLinkPolicyDetails *)sharedFolderChangeLinkPolicyDetails {
  if (![self isSharedFolderChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *)sharedFolderChangeMembersInheritancePolicyDetails {
  if (![self isSharedFolderChangeMembersInheritancePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMembersInheritancePolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *)sharedFolderChangeMembersManagementPolicyDetails {
  if (![self isSharedFolderChangeMembersManagementPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedFolderChangeMembersManagementPolicyDetails;
}

- (DBTEAMLOGSharedFolderChangeMembersPolicyDetails *)sharedFolderChangeMembersPolicyDetails {
  if (![self isSharedFolderChangeMembersPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharedFolderChangeMembersPolicyDetails;
}

- (DBTEAMLOGSharedFolderCreateDetails *)sharedFolderCreateDetails {
  if (![self isSharedFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderCreateDetails;
}

- (DBTEAMLOGSharedFolderDeclineInvitationDetails *)sharedFolderDeclineInvitationDetails {
  if (![self isSharedFolderDeclineInvitationDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderDeclineInvitationDetails;
}

- (DBTEAMLOGSharedFolderMountDetails *)sharedFolderMountDetails {
  if (![self isSharedFolderMountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderMountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderMountDetails;
}

- (DBTEAMLOGSharedFolderNestDetails *)sharedFolderNestDetails {
  if (![self isSharedFolderNestDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderNestDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderNestDetails;
}

- (DBTEAMLOGSharedFolderTransferOwnershipDetails *)sharedFolderTransferOwnershipDetails {
  if (![self isSharedFolderTransferOwnershipDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedFolderTransferOwnershipDetails;
}

- (DBTEAMLOGSharedFolderUnmountDetails *)sharedFolderUnmountDetails {
  if (![self isSharedFolderUnmountDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedFolderUnmountDetails, but was %@.", [self tagName]];
  }
  return _sharedFolderUnmountDetails;
}

- (DBTEAMLOGSharedLinkAddExpiryDetails *)sharedLinkAddExpiryDetails {
  if (![self isSharedLinkAddExpiryDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkAddExpiryDetails;
}

- (DBTEAMLOGSharedLinkChangeExpiryDetails *)sharedLinkChangeExpiryDetails {
  if (![self isSharedLinkChangeExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkChangeExpiryDetails;
}

- (DBTEAMLOGSharedLinkChangeVisibilityDetails *)sharedLinkChangeVisibilityDetails {
  if (![self isSharedLinkChangeVisibilityDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkChangeVisibilityDetails;
}

- (DBTEAMLOGSharedLinkCopyDetails *)sharedLinkCopyDetails {
  if (![self isSharedLinkCopyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkCopyDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkCopyDetails;
}

- (DBTEAMLOGSharedLinkCreateDetails *)sharedLinkCreateDetails {
  if (![self isSharedLinkCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkCreateDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkCreateDetails;
}

- (DBTEAMLOGSharedLinkDisableDetails *)sharedLinkDisableDetails {
  if (![self isSharedLinkDisableDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkDisableDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkDisableDetails;
}

- (DBTEAMLOGSharedLinkDownloadDetails *)sharedLinkDownloadDetails {
  if (![self isSharedLinkDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkDownloadDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkDownloadDetails;
}

- (DBTEAMLOGSharedLinkRemoveExpiryDetails *)sharedLinkRemoveExpiryDetails {
  if (![self isSharedLinkRemoveExpiryDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkRemoveExpiryDetails;
}

- (DBTEAMLOGSharedLinkSettingsAddExpirationDetails *)sharedLinkSettingsAddExpirationDetails {
  if (![self isSharedLinkSettingsAddExpirationDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsAddExpirationDetails;
}

- (DBTEAMLOGSharedLinkSettingsAddPasswordDetails *)sharedLinkSettingsAddPasswordDetails {
  if (![self isSharedLinkSettingsAddPasswordDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails, but was %@.",
                       [self tagName]];
  }
  return _sharedLinkSettingsAddPasswordDetails;
}

- (DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails *)sharedLinkSettingsAllowDownloadDisabledDetails {
  if (![self isSharedLinkSettingsAllowDownloadDisabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharedLinkSettingsAllowDownloadDisabledDetails;
}

- (DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails *)sharedLinkSettingsAllowDownloadEnabledDetails {
  if (![self isSharedLinkSettingsAllowDownloadEnabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsAllowDownloadEnabledDetails;
}

- (DBTEAMLOGSharedLinkSettingsChangeAudienceDetails *)sharedLinkSettingsChangeAudienceDetails {
  if (![self isSharedLinkSettingsChangeAudienceDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsChangeAudienceDetails;
}

- (DBTEAMLOGSharedLinkSettingsChangeExpirationDetails *)sharedLinkSettingsChangeExpirationDetails {
  if (![self isSharedLinkSettingsChangeExpirationDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsChangeExpirationDetails;
}

- (DBTEAMLOGSharedLinkSettingsChangePasswordDetails *)sharedLinkSettingsChangePasswordDetails {
  if (![self isSharedLinkSettingsChangePasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsChangePasswordDetails;
}

- (DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails *)sharedLinkSettingsRemoveExpirationDetails {
  if (![self isSharedLinkSettingsRemoveExpirationDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsRemoveExpirationDetails;
}

- (DBTEAMLOGSharedLinkSettingsRemovePasswordDetails *)sharedLinkSettingsRemovePasswordDetails {
  if (![self isSharedLinkSettingsRemovePasswordDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails, but was %@.",
               [self tagName]];
  }
  return _sharedLinkSettingsRemovePasswordDetails;
}

- (DBTEAMLOGSharedLinkShareDetails *)sharedLinkShareDetails {
  if (![self isSharedLinkShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkShareDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkShareDetails;
}

- (DBTEAMLOGSharedLinkViewDetails *)sharedLinkViewDetails {
  if (![self isSharedLinkViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedLinkViewDetails, but was %@.", [self tagName]];
  }
  return _sharedLinkViewDetails;
}

- (DBTEAMLOGSharedNoteOpenedDetails *)sharedNoteOpenedDetails {
  if (![self isSharedNoteOpenedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharedNoteOpenedDetails, but was %@.", [self tagName]];
  }
  return _sharedNoteOpenedDetails;
}

- (DBTEAMLOGShmodelDisableDownloadsDetails *)shmodelDisableDownloadsDetails {
  if (![self isShmodelDisableDownloadsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelDisableDownloadsDetails;
}

- (DBTEAMLOGShmodelEnableDownloadsDetails *)shmodelEnableDownloadsDetails {
  if (![self isShmodelEnableDownloadsDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails, but was %@.",
                       [self tagName]];
  }
  return _shmodelEnableDownloadsDetails;
}

- (DBTEAMLOGShmodelGroupShareDetails *)shmodelGroupShareDetails {
  if (![self isShmodelGroupShareDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShmodelGroupShareDetails, but was %@.", [self tagName]];
  }
  return _shmodelGroupShareDetails;
}

- (DBTEAMLOGShowcaseAccessGrantedDetails *)showcaseAccessGrantedDetails {
  if (![self isShowcaseAccessGrantedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails, but was %@.", [self tagName]];
  }
  return _showcaseAccessGrantedDetails;
}

- (DBTEAMLOGShowcaseAddMemberDetails *)showcaseAddMemberDetails {
  if (![self isShowcaseAddMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseAddMemberDetails, but was %@.", [self tagName]];
  }
  return _showcaseAddMemberDetails;
}

- (DBTEAMLOGShowcaseArchivedDetails *)showcaseArchivedDetails {
  if (![self isShowcaseArchivedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseArchivedDetails, but was %@.", [self tagName]];
  }
  return _showcaseArchivedDetails;
}

- (DBTEAMLOGShowcaseCreatedDetails *)showcaseCreatedDetails {
  if (![self isShowcaseCreatedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseCreatedDetails, but was %@.", [self tagName]];
  }
  return _showcaseCreatedDetails;
}

- (DBTEAMLOGShowcaseDeleteCommentDetails *)showcaseDeleteCommentDetails {
  if (![self isShowcaseDeleteCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails, but was %@.", [self tagName]];
  }
  return _showcaseDeleteCommentDetails;
}

- (DBTEAMLOGShowcaseEditedDetails *)showcaseEditedDetails {
  if (![self isShowcaseEditedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseEditedDetails, but was %@.", [self tagName]];
  }
  return _showcaseEditedDetails;
}

- (DBTEAMLOGShowcaseEditCommentDetails *)showcaseEditCommentDetails {
  if (![self isShowcaseEditCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseEditCommentDetails, but was %@.", [self tagName]];
  }
  return _showcaseEditCommentDetails;
}

- (DBTEAMLOGShowcaseFileAddedDetails *)showcaseFileAddedDetails {
  if (![self isShowcaseFileAddedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileAddedDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileAddedDetails;
}

- (DBTEAMLOGShowcaseFileDownloadDetails *)showcaseFileDownloadDetails {
  if (![self isShowcaseFileDownloadDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileDownloadDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileDownloadDetails;
}

- (DBTEAMLOGShowcaseFileRemovedDetails *)showcaseFileRemovedDetails {
  if (![self isShowcaseFileRemovedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileRemovedDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileRemovedDetails;
}

- (DBTEAMLOGShowcaseFileViewDetails *)showcaseFileViewDetails {
  if (![self isShowcaseFileViewDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseFileViewDetails, but was %@.", [self tagName]];
  }
  return _showcaseFileViewDetails;
}

- (DBTEAMLOGShowcasePermanentlyDeletedDetails *)showcasePermanentlyDeletedDetails {
  if (![self isShowcasePermanentlyDeletedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcasePermanentlyDeletedDetails;
}

- (DBTEAMLOGShowcasePostCommentDetails *)showcasePostCommentDetails {
  if (![self isShowcasePostCommentDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcasePostCommentDetails, but was %@.", [self tagName]];
  }
  return _showcasePostCommentDetails;
}

- (DBTEAMLOGShowcaseRemoveMemberDetails *)showcaseRemoveMemberDetails {
  if (![self isShowcaseRemoveMemberDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails, but was %@.", [self tagName]];
  }
  return _showcaseRemoveMemberDetails;
}

- (DBTEAMLOGShowcaseRenamedDetails *)showcaseRenamedDetails {
  if (![self isShowcaseRenamedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRenamedDetails, but was %@.", [self tagName]];
  }
  return _showcaseRenamedDetails;
}

- (DBTEAMLOGShowcaseRequestAccessDetails *)showcaseRequestAccessDetails {
  if (![self isShowcaseRequestAccessDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRequestAccessDetails, but was %@.", [self tagName]];
  }
  return _showcaseRequestAccessDetails;
}

- (DBTEAMLOGShowcaseResolveCommentDetails *)showcaseResolveCommentDetails {
  if (![self isShowcaseResolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseResolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseResolveCommentDetails;
}

- (DBTEAMLOGShowcaseRestoredDetails *)showcaseRestoredDetails {
  if (![self isShowcaseRestoredDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseRestoredDetails, but was %@.", [self tagName]];
  }
  return _showcaseRestoredDetails;
}

- (DBTEAMLOGShowcaseTrashedDetails *)showcaseTrashedDetails {
  if (![self isShowcaseTrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseTrashedDetails, but was %@.", [self tagName]];
  }
  return _showcaseTrashedDetails;
}

- (DBTEAMLOGShowcaseTrashedDeprecatedDetails *)showcaseTrashedDeprecatedDetails {
  if (![self isShowcaseTrashedDeprecatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseTrashedDeprecatedDetails;
}

- (DBTEAMLOGShowcaseUnresolveCommentDetails *)showcaseUnresolveCommentDetails {
  if (![self isShowcaseUnresolveCommentDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseUnresolveCommentDetails;
}

- (DBTEAMLOGShowcaseUntrashedDetails *)showcaseUntrashedDetails {
  if (![self isShowcaseUntrashedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUntrashedDetails, but was %@.", [self tagName]];
  }
  return _showcaseUntrashedDetails;
}

- (DBTEAMLOGShowcaseUntrashedDeprecatedDetails *)showcaseUntrashedDeprecatedDetails {
  if (![self isShowcaseUntrashedDeprecatedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseUntrashedDeprecatedDetails;
}

- (DBTEAMLOGShowcaseViewDetails *)showcaseViewDetails {
  if (![self isShowcaseViewDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseViewDetails, but was %@.", [self tagName]];
  }
  return _showcaseViewDetails;
}

- (DBTEAMLOGSsoAddCertDetails *)ssoAddCertDetails {
  if (![self isSsoAddCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddCertDetails, but was %@.", [self tagName]];
  }
  return _ssoAddCertDetails;
}

- (DBTEAMLOGSsoAddLoginUrlDetails *)ssoAddLoginUrlDetails {
  if (![self isSsoAddLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoAddLoginUrlDetails;
}

- (DBTEAMLOGSsoAddLogoutUrlDetails *)ssoAddLogoutUrlDetails {
  if (![self isSsoAddLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoAddLogoutUrlDetails;
}

- (DBTEAMLOGSsoChangeCertDetails *)ssoChangeCertDetails {
  if (![self isSsoChangeCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeCertDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeCertDetails;
}

- (DBTEAMLOGSsoChangeLoginUrlDetails *)ssoChangeLoginUrlDetails {
  if (![self isSsoChangeLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLoginUrlDetails;
}

- (DBTEAMLOGSsoChangeLogoutUrlDetails *)ssoChangeLogoutUrlDetails {
  if (![self isSsoChangeLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoChangeLogoutUrlDetails;
}

- (DBTEAMLOGSsoChangeSamlIdentityModeDetails *)ssoChangeSamlIdentityModeDetails {
  if (![self isSsoChangeSamlIdentityModeDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails, but was %@.",
                       [self tagName]];
  }
  return _ssoChangeSamlIdentityModeDetails;
}

- (DBTEAMLOGSsoRemoveCertDetails *)ssoRemoveCertDetails {
  if (![self isSsoRemoveCertDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveCertDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveCertDetails;
}

- (DBTEAMLOGSsoRemoveLoginUrlDetails *)ssoRemoveLoginUrlDetails {
  if (![self isSsoRemoveLoginUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveLoginUrlDetails;
}

- (DBTEAMLOGSsoRemoveLogoutUrlDetails *)ssoRemoveLogoutUrlDetails {
  if (![self isSsoRemoveLogoutUrlDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails, but was %@.", [self tagName]];
  }
  return _ssoRemoveLogoutUrlDetails;
}

- (DBTEAMLOGTeamFolderChangeStatusDetails *)teamFolderChangeStatusDetails {
  if (![self isTeamFolderChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderChangeStatusDetails;
}

- (DBTEAMLOGTeamFolderCreateDetails *)teamFolderCreateDetails {
  if (![self isTeamFolderCreateDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderCreateDetails, but was %@.", [self tagName]];
  }
  return _teamFolderCreateDetails;
}

- (DBTEAMLOGTeamFolderDowngradeDetails *)teamFolderDowngradeDetails {
  if (![self isTeamFolderDowngradeDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderDowngradeDetails, but was %@.", [self tagName]];
  }
  return _teamFolderDowngradeDetails;
}

- (DBTEAMLOGTeamFolderPermanentlyDeleteDetails *)teamFolderPermanentlyDeleteDetails {
  if (![self isTeamFolderPermanentlyDeleteDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails, but was %@.",
                       [self tagName]];
  }
  return _teamFolderPermanentlyDeleteDetails;
}

- (DBTEAMLOGTeamFolderRenameDetails *)teamFolderRenameDetails {
  if (![self isTeamFolderRenameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamFolderRenameDetails, but was %@.", [self tagName]];
  }
  return _teamFolderRenameDetails;
}

- (DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *)teamSelectiveSyncSettingsChangedDetails {
  if (![self isTeamSelectiveSyncSettingsChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails, but was %@.",
               [self tagName]];
  }
  return _teamSelectiveSyncSettingsChangedDetails;
}

- (DBTEAMLOGAccountCaptureChangePolicyDetails *)accountCaptureChangePolicyDetails {
  if (![self isAccountCaptureChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _accountCaptureChangePolicyDetails;
}

- (DBTEAMLOGAdminEmailRemindersChangedDetails *)adminEmailRemindersChangedDetails {
  if (![self isAdminEmailRemindersChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _adminEmailRemindersChangedDetails;
}

- (DBTEAMLOGAllowDownloadDisabledDetails *)allowDownloadDisabledDetails {
  if (![self isAllowDownloadDisabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadDisabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadDisabledDetails;
}

- (DBTEAMLOGAllowDownloadEnabledDetails *)allowDownloadEnabledDetails {
  if (![self isAllowDownloadEnabledDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAllowDownloadEnabledDetails, but was %@.", [self tagName]];
  }
  return _allowDownloadEnabledDetails;
}

- (DBTEAMLOGAppPermissionsChangedDetails *)appPermissionsChangedDetails {
  if (![self isAppPermissionsChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsAppPermissionsChangedDetails, but was %@.", [self tagName]];
  }
  return _appPermissionsChangedDetails;
}

- (DBTEAMLOGCameraUploadsPolicyChangedDetails *)cameraUploadsPolicyChangedDetails {
  if (![self isCameraUploadsPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _cameraUploadsPolicyChangedDetails;
}

- (DBTEAMLOGCaptureTranscriptPolicyChangedDetails *)captureTranscriptPolicyChangedDetails {
  if (![self isCaptureTranscriptPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _captureTranscriptPolicyChangedDetails;
}

- (DBTEAMLOGClassificationChangePolicyDetails *)classificationChangePolicyDetails {
  if (![self isClassificationChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsClassificationChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _classificationChangePolicyDetails;
}

- (DBTEAMLOGComputerBackupPolicyChangedDetails *)computerBackupPolicyChangedDetails {
  if (![self isComputerBackupPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _computerBackupPolicyChangedDetails;
}

- (DBTEAMLOGContentAdministrationPolicyChangedDetails *)contentAdministrationPolicyChangedDetails {
  if (![self isContentAdministrationPolicyChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails, but was %@.",
               [self tagName]];
  }
  return _contentAdministrationPolicyChangedDetails;
}

- (DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *)dataPlacementRestrictionChangePolicyDetails {
  if (![self isDataPlacementRestrictionChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionChangePolicyDetails;
}

- (DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *)dataPlacementRestrictionSatisfyPolicyDetails {
  if (![self isDataPlacementRestrictionSatisfyPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _dataPlacementRestrictionSatisfyPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsAddExceptionDetails *)deviceApprovalsAddExceptionDetails {
  if (![self isDeviceApprovalsAddExceptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsAddExceptionDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *)deviceApprovalsChangeDesktopPolicyDetails {
  if (![self isDeviceApprovalsChangeDesktopPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeDesktopPolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *)deviceApprovalsChangeMobilePolicyDetails {
  if (![self isDeviceApprovalsChangeMobilePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeMobilePolicyDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *)deviceApprovalsChangeOverageActionDetails {
  if (![self isDeviceApprovalsChangeOverageActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeOverageActionDetails;
}

- (DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *)deviceApprovalsChangeUnlinkActionDetails {
  if (![self isDeviceApprovalsChangeUnlinkActionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails, but was %@.",
               [self tagName]];
  }
  return _deviceApprovalsChangeUnlinkActionDetails;
}

- (DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *)deviceApprovalsRemoveExceptionDetails {
  if (![self isDeviceApprovalsRemoveExceptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails, but was %@.",
                       [self tagName]];
  }
  return _deviceApprovalsRemoveExceptionDetails;
}

- (DBTEAMLOGDirectoryRestrictionsAddMembersDetails *)directoryRestrictionsAddMembersDetails {
  if (![self isDirectoryRestrictionsAddMembersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails, but was %@.",
               [self tagName]];
  }
  return _directoryRestrictionsAddMembersDetails;
}

- (DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *)directoryRestrictionsRemoveMembersDetails {
  if (![self isDirectoryRestrictionsRemoveMembersDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails, but was %@.",
               [self tagName]];
  }
  return _directoryRestrictionsRemoveMembersDetails;
}

- (DBTEAMLOGDropboxPasswordsPolicyChangedDetails *)dropboxPasswordsPolicyChangedDetails {
  if (![self isDropboxPasswordsPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _dropboxPasswordsPolicyChangedDetails;
}

- (DBTEAMLOGEmailIngestPolicyChangedDetails *)emailIngestPolicyChangedDetails {
  if (![self isEmailIngestPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _emailIngestPolicyChangedDetails;
}

- (DBTEAMLOGEmmAddExceptionDetails *)emmAddExceptionDetails {
  if (![self isEmmAddExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmAddExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmAddExceptionDetails;
}

- (DBTEAMLOGEmmChangePolicyDetails *)emmChangePolicyDetails {
  if (![self isEmmChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _emmChangePolicyDetails;
}

- (DBTEAMLOGEmmRemoveExceptionDetails *)emmRemoveExceptionDetails {
  if (![self isEmmRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEmmRemoveExceptionDetails, but was %@.", [self tagName]];
  }
  return _emmRemoveExceptionDetails;
}

- (DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *)extendedVersionHistoryChangePolicyDetails {
  if (![self isExtendedVersionHistoryChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _extendedVersionHistoryChangePolicyDetails;
}

- (DBTEAMLOGExternalDriveBackupPolicyChangedDetails *)externalDriveBackupPolicyChangedDetails {
  if (![self isExternalDriveBackupPolicyChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails, but was %@.",
               [self tagName]];
  }
  return _externalDriveBackupPolicyChangedDetails;
}

- (DBTEAMLOGFileCommentsChangePolicyDetails *)fileCommentsChangePolicyDetails {
  if (![self isFileCommentsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileCommentsChangePolicyDetails;
}

- (DBTEAMLOGFileLockingPolicyChangedDetails *)fileLockingPolicyChangedDetails {
  if (![self isFileLockingPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _fileLockingPolicyChangedDetails;
}

- (DBTEAMLOGFileRequestsChangePolicyDetails *)fileRequestsChangePolicyDetails {
  if (![self isFileRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsChangePolicyDetails;
}

- (DBTEAMLOGFileRequestsEmailsEnabledDetails *)fileRequestsEmailsEnabledDetails {
  if (![self isFileRequestsEmailsEnabledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails, but was %@.",
                       [self tagName]];
  }
  return _fileRequestsEmailsEnabledDetails;
}

- (DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *)fileRequestsEmailsRestrictedToTeamOnlyDetails {
  if (![self isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails, but was %@.",
               [self tagName]];
  }
  return _fileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (DBTEAMLOGFileTransfersPolicyChangedDetails *)fileTransfersPolicyChangedDetails {
  if (![self isFileTransfersPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _fileTransfersPolicyChangedDetails;
}

- (DBTEAMLOGGoogleSsoChangePolicyDetails *)googleSsoChangePolicyDetails {
  if (![self isGoogleSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _googleSsoChangePolicyDetails;
}

- (DBTEAMLOGGroupUserManagementChangePolicyDetails *)groupUserManagementChangePolicyDetails {
  if (![self isGroupUserManagementChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _groupUserManagementChangePolicyDetails;
}

- (DBTEAMLOGIntegrationPolicyChangedDetails *)integrationPolicyChangedDetails {
  if (![self isIntegrationPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _integrationPolicyChangedDetails;
}

- (DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails *)inviteAcceptanceEmailPolicyChangedDetails {
  if (![self isInviteAcceptanceEmailPolicyChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails, but was %@.",
               [self tagName]];
  }
  return _inviteAcceptanceEmailPolicyChangedDetails;
}

- (DBTEAMLOGMemberRequestsChangePolicyDetails *)memberRequestsChangePolicyDetails {
  if (![self isMemberRequestsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberRequestsChangePolicyDetails;
}

- (DBTEAMLOGMemberSendInvitePolicyChangedDetails *)memberSendInvitePolicyChangedDetails {
  if (![self isMemberSendInvitePolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSendInvitePolicyChangedDetails;
}

- (DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *)memberSpaceLimitsAddExceptionDetails {
  if (![self isMemberSpaceLimitsAddExceptionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsAddExceptionDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *)memberSpaceLimitsChangeCapsTypePolicyDetails {
  if (![self isMemberSpaceLimitsChangeCapsTypePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsChangeCapsTypePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *)memberSpaceLimitsChangePolicyDetails {
  if (![self isMemberSpaceLimitsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSpaceLimitsChangePolicyDetails;
}

- (DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *)memberSpaceLimitsRemoveExceptionDetails {
  if (![self isMemberSpaceLimitsRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails, but was %@.",
               [self tagName]];
  }
  return _memberSpaceLimitsRemoveExceptionDetails;
}

- (DBTEAMLOGMemberSuggestionsChangePolicyDetails *)memberSuggestionsChangePolicyDetails {
  if (![self isMemberSuggestionsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _memberSuggestionsChangePolicyDetails;
}

- (DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *)microsoftOfficeAddinChangePolicyDetails {
  if (![self isMicrosoftOfficeAddinChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails, but was %@.",
               [self tagName]];
  }
  return _microsoftOfficeAddinChangePolicyDetails;
}

- (DBTEAMLOGNetworkControlChangePolicyDetails *)networkControlChangePolicyDetails {
  if (![self isNetworkControlChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _networkControlChangePolicyDetails;
}

- (DBTEAMLOGPaperChangeDeploymentPolicyDetails *)paperChangeDeploymentPolicyDetails {
  if (![self isPaperChangeDeploymentPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeDeploymentPolicyDetails;
}

- (DBTEAMLOGPaperChangeMemberLinkPolicyDetails *)paperChangeMemberLinkPolicyDetails {
  if (![self isPaperChangeMemberLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeMemberLinkPolicyDetails;
}

- (DBTEAMLOGPaperChangeMemberPolicyDetails *)paperChangeMemberPolicyDetails {
  if (![self isPaperChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _paperChangeMemberPolicyDetails;
}

- (DBTEAMLOGPaperChangePolicyDetails *)paperChangePolicyDetails {
  if (![self isPaperChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _paperChangePolicyDetails;
}

- (DBTEAMLOGPaperDefaultFolderPolicyChangedDetails *)paperDefaultFolderPolicyChangedDetails {
  if (![self isPaperDefaultFolderPolicyChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails, but was %@.",
               [self tagName]];
  }
  return _paperDefaultFolderPolicyChangedDetails;
}

- (DBTEAMLOGPaperDesktopPolicyChangedDetails *)paperDesktopPolicyChangedDetails {
  if (![self isPaperDesktopPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _paperDesktopPolicyChangedDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *)paperEnabledUsersGroupAdditionDetails {
  if (![self isPaperEnabledUsersGroupAdditionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupAdditionDetails;
}

- (DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *)paperEnabledUsersGroupRemovalDetails {
  if (![self isPaperEnabledUsersGroupRemovalDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails, but was %@.",
                       [self tagName]];
  }
  return _paperEnabledUsersGroupRemovalDetails;
}

- (DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails *)passwordStrengthRequirementsChangePolicyDetails {
  if (![self isPasswordStrengthRequirementsChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _passwordStrengthRequirementsChangePolicyDetails;
}

- (DBTEAMLOGPermanentDeleteChangePolicyDetails *)permanentDeleteChangePolicyDetails {
  if (![self isPermanentDeleteChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _permanentDeleteChangePolicyDetails;
}

- (DBTEAMLOGResellerSupportChangePolicyDetails *)resellerSupportChangePolicyDetails {
  if (![self isResellerSupportChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _resellerSupportChangePolicyDetails;
}

- (DBTEAMLOGRewindPolicyChangedDetails *)rewindPolicyChangedDetails {
  if (![self isRewindPolicyChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsRewindPolicyChangedDetails, but was %@.", [self tagName]];
  }
  return _rewindPolicyChangedDetails;
}

- (DBTEAMLOGSendForSignaturePolicyChangedDetails *)sendForSignaturePolicyChangedDetails {
  if (![self isSendForSignaturePolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _sendForSignaturePolicyChangedDetails;
}

- (DBTEAMLOGSharingChangeFolderJoinPolicyDetails *)sharingChangeFolderJoinPolicyDetails {
  if (![self isSharingChangeFolderJoinPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeFolderJoinPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails *)sharingChangeLinkAllowChangeExpirationPolicyDetails {
  if (![self isSharingChangeLinkAllowChangeExpirationPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeLinkAllowChangeExpirationPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails *)sharingChangeLinkDefaultExpirationPolicyDetails {
  if (![self isSharingChangeLinkDefaultExpirationPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _sharingChangeLinkDefaultExpirationPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails *)sharingChangeLinkEnforcePasswordPolicyDetails {
  if (![self isSharingChangeLinkEnforcePasswordPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _sharingChangeLinkEnforcePasswordPolicyDetails;
}

- (DBTEAMLOGSharingChangeLinkPolicyDetails *)sharingChangeLinkPolicyDetails {
  if (![self isSharingChangeLinkPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeLinkPolicyDetails;
}

- (DBTEAMLOGSharingChangeMemberPolicyDetails *)sharingChangeMemberPolicyDetails {
  if (![self isSharingChangeMemberPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _sharingChangeMemberPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeDownloadPolicyDetails *)showcaseChangeDownloadPolicyDetails {
  if (![self isShowcaseChangeDownloadPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseChangeDownloadPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeEnabledPolicyDetails *)showcaseChangeEnabledPolicyDetails {
  if (![self isShowcaseChangeEnabledPolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _showcaseChangeEnabledPolicyDetails;
}

- (DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *)showcaseChangeExternalSharingPolicyDetails {
  if (![self isShowcaseChangeExternalSharingPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _showcaseChangeExternalSharingPolicyDetails;
}

- (DBTEAMLOGSmarterSmartSyncPolicyChangedDetails *)smarterSmartSyncPolicyChangedDetails {
  if (![self isSmarterSmartSyncPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _smarterSmartSyncPolicyChangedDetails;
}

- (DBTEAMLOGSmartSyncChangePolicyDetails *)smartSyncChangePolicyDetails {
  if (![self isSmartSyncChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _smartSyncChangePolicyDetails;
}

- (DBTEAMLOGSmartSyncNotOptOutDetails *)smartSyncNotOptOutDetails {
  if (![self isSmartSyncNotOptOutDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails, but was %@.", [self tagName]];
  }
  return _smartSyncNotOptOutDetails;
}

- (DBTEAMLOGSmartSyncOptOutDetails *)smartSyncOptOutDetails {
  if (![self isSmartSyncOptOutDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSmartSyncOptOutDetails, but was %@.", [self tagName]];
  }
  return _smartSyncOptOutDetails;
}

- (DBTEAMLOGSsoChangePolicyDetails *)ssoChangePolicyDetails {
  if (![self isSsoChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsSsoChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _ssoChangePolicyDetails;
}

- (DBTEAMLOGTeamBrandingPolicyChangedDetails *)teamBrandingPolicyChangedDetails {
  if (![self isTeamBrandingPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _teamBrandingPolicyChangedDetails;
}

- (DBTEAMLOGTeamExtensionsPolicyChangedDetails *)teamExtensionsPolicyChangedDetails {
  if (![self isTeamExtensionsPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _teamExtensionsPolicyChangedDetails;
}

- (DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails *)teamSelectiveSyncPolicyChangedDetails {
  if (![self isTeamSelectiveSyncPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _teamSelectiveSyncPolicyChangedDetails;
}

- (DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails *)teamSharingWhitelistSubjectsChangedDetails {
  if (![self isTeamSharingWhitelistSubjectsChangedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails, but was %@.",
               [self tagName]];
  }
  return _teamSharingWhitelistSubjectsChangedDetails;
}

- (DBTEAMLOGTfaAddExceptionDetails *)tfaAddExceptionDetails {
  if (![self isTfaAddExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddExceptionDetails, but was %@.", [self tagName]];
  }
  return _tfaAddExceptionDetails;
}

- (DBTEAMLOGTfaChangePolicyDetails *)tfaChangePolicyDetails {
  if (![self isTfaChangePolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangePolicyDetails, but was %@.", [self tagName]];
  }
  return _tfaChangePolicyDetails;
}

- (DBTEAMLOGTfaRemoveExceptionDetails *)tfaRemoveExceptionDetails {
  if (![self isTfaRemoveExceptionDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveExceptionDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveExceptionDetails;
}

- (DBTEAMLOGTwoAccountChangePolicyDetails *)twoAccountChangePolicyDetails {
  if (![self isTwoAccountChangePolicyDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails, but was %@.",
                       [self tagName]];
  }
  return _twoAccountChangePolicyDetails;
}

- (DBTEAMLOGViewerInfoPolicyChangedDetails *)viewerInfoPolicyChangedDetails {
  if (![self isViewerInfoPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _viewerInfoPolicyChangedDetails;
}

- (DBTEAMLOGWatermarkingPolicyChangedDetails *)watermarkingPolicyChangedDetails {
  if (![self isWatermarkingPolicyChangedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails, but was %@.",
                       [self tagName]];
  }
  return _watermarkingPolicyChangedDetails;
}

- (DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails *)webSessionsChangeActiveSessionLimitDetails {
  if (![self isWebSessionsChangeActiveSessionLimitDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeActiveSessionLimitDetails;
}

- (DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *)webSessionsChangeFixedLengthPolicyDetails {
  if (![self isWebSessionsChangeFixedLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeFixedLengthPolicyDetails;
}

- (DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *)webSessionsChangeIdleLengthPolicyDetails {
  if (![self isWebSessionsChangeIdleLengthPolicyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails, but was %@.",
               [self tagName]];
  }
  return _webSessionsChangeIdleLengthPolicyDetails;
}

- (DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *)dataResidencyMigrationRequestSuccessfulDetails {
  if (![self isDataResidencyMigrationRequestSuccessfulDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _dataResidencyMigrationRequestSuccessfulDetails;
}

- (DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *)dataResidencyMigrationRequestUnsuccessfulDetails {
  if (![self isDataResidencyMigrationRequestUnsuccessfulDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _dataResidencyMigrationRequestUnsuccessfulDetails;
}

- (DBTEAMLOGTeamMergeFromDetails *)teamMergeFromDetails {
  if (![self isTeamMergeFromDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeFromDetails, but was %@.", [self tagName]];
  }
  return _teamMergeFromDetails;
}

- (DBTEAMLOGTeamMergeToDetails *)teamMergeToDetails {
  if (![self isTeamMergeToDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeToDetails, but was %@.", [self tagName]];
  }
  return _teamMergeToDetails;
}

- (DBTEAMLOGTeamProfileAddBackgroundDetails *)teamProfileAddBackgroundDetails {
  if (![self isTeamProfileAddBackgroundDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails, but was %@.",
                       [self tagName]];
  }
  return _teamProfileAddBackgroundDetails;
}

- (DBTEAMLOGTeamProfileAddLogoDetails *)teamProfileAddLogoDetails {
  if (![self isTeamProfileAddLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileAddLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileAddLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeBackgroundDetails *)teamProfileChangeBackgroundDetails {
  if (![self isTeamProfileChangeBackgroundDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails, but was %@.",
                       [self tagName]];
  }
  return _teamProfileChangeBackgroundDetails;
}

- (DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *)teamProfileChangeDefaultLanguageDetails {
  if (![self isTeamProfileChangeDefaultLanguageDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails, but was %@.",
               [self tagName]];
  }
  return _teamProfileChangeDefaultLanguageDetails;
}

- (DBTEAMLOGTeamProfileChangeLogoDetails *)teamProfileChangeLogoDetails {
  if (![self isTeamProfileChangeLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeLogoDetails;
}

- (DBTEAMLOGTeamProfileChangeNameDetails *)teamProfileChangeNameDetails {
  if (![self isTeamProfileChangeNameDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileChangeNameDetails, but was %@.", [self tagName]];
  }
  return _teamProfileChangeNameDetails;
}

- (DBTEAMLOGTeamProfileRemoveBackgroundDetails *)teamProfileRemoveBackgroundDetails {
  if (![self isTeamProfileRemoveBackgroundDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails, but was %@.",
                       [self tagName]];
  }
  return _teamProfileRemoveBackgroundDetails;
}

- (DBTEAMLOGTeamProfileRemoveLogoDetails *)teamProfileRemoveLogoDetails {
  if (![self isTeamProfileRemoveLogoDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails, but was %@.", [self tagName]];
  }
  return _teamProfileRemoveLogoDetails;
}

- (DBTEAMLOGTfaAddBackupPhoneDetails *)tfaAddBackupPhoneDetails {
  if (![self isTfaAddBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaAddBackupPhoneDetails;
}

- (DBTEAMLOGTfaAddSecurityKeyDetails *)tfaAddSecurityKeyDetails {
  if (![self isTfaAddSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaAddSecurityKeyDetails;
}

- (DBTEAMLOGTfaChangeBackupPhoneDetails *)tfaChangeBackupPhoneDetails {
  if (![self isTfaChangeBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeBackupPhoneDetails;
}

- (DBTEAMLOGTfaChangeStatusDetails *)tfaChangeStatusDetails {
  if (![self isTfaChangeStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaChangeStatusDetails, but was %@.", [self tagName]];
  }
  return _tfaChangeStatusDetails;
}

- (DBTEAMLOGTfaRemoveBackupPhoneDetails *)tfaRemoveBackupPhoneDetails {
  if (![self isTfaRemoveBackupPhoneDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveBackupPhoneDetails;
}

- (DBTEAMLOGTfaRemoveSecurityKeyDetails *)tfaRemoveSecurityKeyDetails {
  if (![self isTfaRemoveSecurityKeyDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails, but was %@.", [self tagName]];
  }
  return _tfaRemoveSecurityKeyDetails;
}

- (DBTEAMLOGTfaResetDetails *)tfaResetDetails {
  if (![self isTfaResetDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTfaResetDetails, but was %@.", [self tagName]];
  }
  return _tfaResetDetails;
}

- (DBTEAMLOGChangedEnterpriseAdminRoleDetails *)changedEnterpriseAdminRoleDetails {
  if (![self isChangedEnterpriseAdminRoleDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails, but was %@.",
                       [self tagName]];
  }
  return _changedEnterpriseAdminRoleDetails;
}

- (DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *)changedEnterpriseConnectedTeamStatusDetails {
  if (![self isChangedEnterpriseConnectedTeamStatusDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails, but was %@.",
               [self tagName]];
  }
  return _changedEnterpriseConnectedTeamStatusDetails;
}

- (DBTEAMLOGEndedEnterpriseAdminSessionDetails *)endedEnterpriseAdminSessionDetails {
  if (![self isEndedEnterpriseAdminSessionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails, but was %@.",
                       [self tagName]];
  }
  return _endedEnterpriseAdminSessionDetails;
}

- (DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *)endedEnterpriseAdminSessionDeprecatedDetails {
  if (![self isEndedEnterpriseAdminSessionDeprecatedDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails, but was %@.",
               [self tagName]];
  }
  return _endedEnterpriseAdminSessionDeprecatedDetails;
}

- (DBTEAMLOGEnterpriseSettingsLockingDetails *)enterpriseSettingsLockingDetails {
  if (![self isEnterpriseSettingsLockingDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails, but was %@.",
                       [self tagName]];
  }
  return _enterpriseSettingsLockingDetails;
}

- (DBTEAMLOGGuestAdminChangeStatusDetails *)guestAdminChangeStatusDetails {
  if (![self isGuestAdminChangeStatusDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails, but was %@.",
                       [self tagName]];
  }
  return _guestAdminChangeStatusDetails;
}

- (DBTEAMLOGStartedEnterpriseAdminSessionDetails *)startedEnterpriseAdminSessionDetails {
  if (![self isStartedEnterpriseAdminSessionDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails, but was %@.",
                       [self tagName]];
  }
  return _startedEnterpriseAdminSessionDetails;
}

- (DBTEAMLOGTeamMergeRequestAcceptedDetails *)teamMergeRequestAcceptedDetails {
  if (![self isTeamMergeRequestAcceptedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestAcceptedDetails;
}

- (DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails *)teamMergeRequestAcceptedShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestAcceptedShownToPrimaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestAcceptedShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails *)teamMergeRequestAcceptedShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestAcceptedShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestAcceptedShownToSecondaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestAutoCanceledDetails *)teamMergeRequestAutoCanceledDetails {
  if (![self isTeamMergeRequestAutoCanceledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestAutoCanceledDetails;
}

- (DBTEAMLOGTeamMergeRequestCanceledDetails *)teamMergeRequestCanceledDetails {
  if (![self isTeamMergeRequestCanceledDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestCanceledDetails;
}

- (DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails *)teamMergeRequestCanceledShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestCanceledShownToPrimaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestCanceledShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails *)teamMergeRequestCanceledShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestCanceledShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestCanceledShownToSecondaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestExpiredDetails *)teamMergeRequestExpiredDetails {
  if (![self isTeamMergeRequestExpiredDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestExpiredDetails;
}

- (DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails *)teamMergeRequestExpiredShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestExpiredShownToPrimaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestExpiredShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails *)teamMergeRequestExpiredShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestExpiredShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestExpiredShownToSecondaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails *)teamMergeRequestRejectedShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestRejectedShownToPrimaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestRejectedShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails *)teamMergeRequestRejectedShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestRejectedShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestRejectedShownToSecondaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestReminderDetails *)teamMergeRequestReminderDetails {
  if (![self isTeamMergeRequestReminderDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestReminderDetails;
}

- (DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails *)teamMergeRequestReminderShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestReminderShownToPrimaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestReminderShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails *)teamMergeRequestReminderShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestReminderShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required "
                       @"DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestReminderShownToSecondaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestRevokedDetails *)teamMergeRequestRevokedDetails {
  if (![self isTeamMergeRequestRevokedDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails, but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestRevokedDetails;
}

- (DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails *)teamMergeRequestSentShownToPrimaryTeamDetails {
  if (![self isTeamMergeRequestSentShownToPrimaryTeamDetails]) {
    [NSException
         raise:@"IllegalStateException"
        format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails, but was %@.",
               [self tagName]];
  }
  return _teamMergeRequestSentShownToPrimaryTeamDetails;
}

- (DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails *)teamMergeRequestSentShownToSecondaryTeamDetails {
  if (![self isTeamMergeRequestSentShownToSecondaryTeamDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails, "
                       @"but was %@.",
                       [self tagName]];
  }
  return _teamMergeRequestSentShownToSecondaryTeamDetails;
}

- (DBTEAMLOGMissingDetails *)missingDetails {
  if (![self isMissingDetails]) {
    [NSException raise:@"IllegalStateException"
                format:@"Invalid tag: required DBTEAMLOGEventDetailsMissingDetails, but was %@.", [self tagName]];
  }
  return _missingDetails;
}

#pragma mark - Tag state methods

- (BOOL)isAdminAlertingAlertStateChangedDetails {
  return _tag == DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails;
}

- (BOOL)isAdminAlertingChangedAlertConfigDetails {
  return _tag == DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails;
}

- (BOOL)isAdminAlertingTriggeredAlertDetails {
  return _tag == DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails;
}

- (BOOL)isAppBlockedByPermissionsDetails {
  return _tag == DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails;
}

- (BOOL)isAppLinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkTeamDetails;
}

- (BOOL)isAppLinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppLinkUserDetails;
}

- (BOOL)isAppUnlinkTeamDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkTeamDetails;
}

- (BOOL)isAppUnlinkUserDetails {
  return _tag == DBTEAMLOGEventDetailsAppUnlinkUserDetails;
}

- (BOOL)isIntegrationConnectedDetails {
  return _tag == DBTEAMLOGEventDetailsIntegrationConnectedDetails;
}

- (BOOL)isIntegrationDisconnectedDetails {
  return _tag == DBTEAMLOGEventDetailsIntegrationDisconnectedDetails;
}

- (BOOL)isFileAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddCommentDetails;
}

- (BOOL)isFileChangeCommentSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails;
}

- (BOOL)isFileDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileDeleteCommentDetails;
}

- (BOOL)isFileEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileEditCommentDetails;
}

- (BOOL)isFileLikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileLikeCommentDetails;
}

- (BOOL)isFileResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileResolveCommentDetails;
}

- (BOOL)isFileUnlikeCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileUnlikeCommentDetails;
}

- (BOOL)isFileUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsFileUnresolveCommentDetails;
}

- (BOOL)isGovernancePolicyAddFoldersDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails;
}

- (BOOL)isGovernancePolicyAddFolderFailedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails;
}

- (BOOL)isGovernancePolicyContentDisposedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails;
}

- (BOOL)isGovernancePolicyCreateDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyCreateDetails;
}

- (BOOL)isGovernancePolicyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails;
}

- (BOOL)isGovernancePolicyEditDetailsDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails;
}

- (BOOL)isGovernancePolicyEditDurationDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails;
}

- (BOOL)isGovernancePolicyExportCreatedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails;
}

- (BOOL)isGovernancePolicyExportRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails;
}

- (BOOL)isGovernancePolicyRemoveFoldersDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails;
}

- (BOOL)isGovernancePolicyReportCreatedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails;
}

- (BOOL)isGovernancePolicyZipPartDownloadedDetails {
  return _tag == DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails;
}

- (BOOL)isLegalHoldsActivateAHoldDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails;
}

- (BOOL)isLegalHoldsAddMembersDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails;
}

- (BOOL)isLegalHoldsChangeHoldDetailsDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails;
}

- (BOOL)isLegalHoldsChangeHoldNameDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails;
}

- (BOOL)isLegalHoldsExportAHoldDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails;
}

- (BOOL)isLegalHoldsExportCancelledDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails;
}

- (BOOL)isLegalHoldsExportDownloadedDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails;
}

- (BOOL)isLegalHoldsExportRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails;
}

- (BOOL)isLegalHoldsReleaseAHoldDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails;
}

- (BOOL)isLegalHoldsRemoveMembersDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails;
}

- (BOOL)isLegalHoldsReportAHoldDetails {
  return _tag == DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails;
}

- (BOOL)isDeviceChangeIpDesktopDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails;
}

- (BOOL)isDeviceChangeIpMobileDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails;
}

- (BOOL)isDeviceChangeIpWebDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceChangeIpWebDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails;
}

- (BOOL)isDeviceDeleteOnUnlinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails;
}

- (BOOL)isDeviceLinkFailDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkFailDetails;
}

- (BOOL)isDeviceLinkSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceLinkSuccessDetails;
}

- (BOOL)isDeviceManagementDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementDisabledDetails;
}

- (BOOL)isDeviceManagementEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceManagementEnabledDetails;
}

- (BOOL)isDeviceSyncBackupStatusChangedDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails;
}

- (BOOL)isDeviceUnlinkDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceUnlinkDetails;
}

- (BOOL)isDropboxPasswordsExportedDetails {
  return _tag == DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails;
}

- (BOOL)isDropboxPasswordsNewDeviceEnrolledDetails {
  return _tag == DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails;
}

- (BOOL)isEmmRefreshAuthTokenDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails;
}

- (BOOL)isExternalDriveBackupEligibilityStatusCheckedDetails {
  return _tag == DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails;
}

- (BOOL)isExternalDriveBackupStatusChangedDetails {
  return _tag == DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails;
}

- (BOOL)isAccountCaptureChangeAvailabilityDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails;
}

- (BOOL)isAccountCaptureMigrateAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails;
}

- (BOOL)isAccountCaptureNotificationEmailsSentDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails;
}

- (BOOL)isAccountCaptureRelinquishAccountDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails;
}

- (BOOL)isDisabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsDisabledDomainInvitesDetails;
}

- (BOOL)isDomainInvitesApproveRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesDeclineRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesEmailExistingUsersDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails;
}

- (BOOL)isDomainInvitesRequestToJoinTeamDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToNoDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails;
}

- (BOOL)isDomainInvitesSetInviteNewUserPrefToYesDetails {
  return _tag == DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails;
}

- (BOOL)isDomainVerificationAddDomainFailDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails;
}

- (BOOL)isDomainVerificationAddDomainSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails;
}

- (BOOL)isDomainVerificationRemoveDomainDetails {
  return _tag == DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails;
}

- (BOOL)isEnabledDomainInvitesDetails {
  return _tag == DBTEAMLOGEventDetailsEnabledDomainInvitesDetails;
}

- (BOOL)isApplyNamingConventionDetails {
  return _tag == DBTEAMLOGEventDetailsApplyNamingConventionDetails;
}

- (BOOL)isCreateFolderDetails {
  return _tag == DBTEAMLOGEventDetailsCreateFolderDetails;
}

- (BOOL)isFileAddDetails {
  return _tag == DBTEAMLOGEventDetailsFileAddDetails;
}

- (BOOL)isFileCopyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCopyDetails;
}

- (BOOL)isFileDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFileDeleteDetails;
}

- (BOOL)isFileDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsFileDownloadDetails;
}

- (BOOL)isFileEditDetails {
  return _tag == DBTEAMLOGEventDetailsFileEditDetails;
}

- (BOOL)isFileGetCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileGetCopyReferenceDetails;
}

- (BOOL)isFileLockingLockStatusChangedDetails {
  return _tag == DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails;
}

- (BOOL)isFileMoveDetails {
  return _tag == DBTEAMLOGEventDetailsFileMoveDetails;
}

- (BOOL)isFilePermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails;
}

- (BOOL)isFilePreviewDetails {
  return _tag == DBTEAMLOGEventDetailsFilePreviewDetails;
}

- (BOOL)isFileRenameDetails {
  return _tag == DBTEAMLOGEventDetailsFileRenameDetails;
}

- (BOOL)isFileRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsFileRestoreDetails;
}

- (BOOL)isFileRevertDetails {
  return _tag == DBTEAMLOGEventDetailsFileRevertDetails;
}

- (BOOL)isFileRollbackChangesDetails {
  return _tag == DBTEAMLOGEventDetailsFileRollbackChangesDetails;
}

- (BOOL)isFileSaveCopyReferenceDetails {
  return _tag == DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails;
}

- (BOOL)isFolderOverviewDescriptionChangedDetails {
  return _tag == DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails;
}

- (BOOL)isFolderOverviewItemPinnedDetails {
  return _tag == DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails;
}

- (BOOL)isFolderOverviewItemUnpinnedDetails {
  return _tag == DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails;
}

- (BOOL)isObjectLabelAddedDetails {
  return _tag == DBTEAMLOGEventDetailsObjectLabelAddedDetails;
}

- (BOOL)isObjectLabelRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsObjectLabelRemovedDetails;
}

- (BOOL)isObjectLabelUpdatedValueDetails {
  return _tag == DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails;
}

- (BOOL)isOrganizeFolderWithTidyDetails {
  return _tag == DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails;
}

- (BOOL)isRewindFolderDetails {
  return _tag == DBTEAMLOGEventDetailsRewindFolderDetails;
}

- (BOOL)isUndoNamingConventionDetails {
  return _tag == DBTEAMLOGEventDetailsUndoNamingConventionDetails;
}

- (BOOL)isUndoOrganizeFolderWithTidyDetails {
  return _tag == DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails;
}

- (BOOL)isUserTagsAddedDetails {
  return _tag == DBTEAMLOGEventDetailsUserTagsAddedDetails;
}

- (BOOL)isUserTagsRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsUserTagsRemovedDetails;
}

- (BOOL)isEmailIngestReceiveFileDetails {
  return _tag == DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails;
}

- (BOOL)isFileRequestChangeDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestChangeDetails;
}

- (BOOL)isFileRequestCloseDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCloseDetails;
}

- (BOOL)isFileRequestCreateDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestCreateDetails;
}

- (BOOL)isFileRequestDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestDeleteDetails;
}

- (BOOL)isFileRequestReceiveFileDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestReceiveFileDetails;
}

- (BOOL)isGroupAddExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddExternalIdDetails;
}

- (BOOL)isGroupAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupAddMemberDetails;
}

- (BOOL)isGroupChangeExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeExternalIdDetails;
}

- (BOOL)isGroupChangeManagementTypeDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails;
}

- (BOOL)isGroupChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails;
}

- (BOOL)isGroupCreateDetails {
  return _tag == DBTEAMLOGEventDetailsGroupCreateDetails;
}

- (BOOL)isGroupDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDeleteDetails;
}

- (BOOL)isGroupDescriptionUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails;
}

- (BOOL)isGroupJoinPolicyUpdatedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails;
}

- (BOOL)isGroupMovedDetails {
  return _tag == DBTEAMLOGEventDetailsGroupMovedDetails;
}

- (BOOL)isGroupRemoveExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails;
}

- (BOOL)isGroupRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRemoveMemberDetails;
}

- (BOOL)isGroupRenameDetails {
  return _tag == DBTEAMLOGEventDetailsGroupRenameDetails;
}

- (BOOL)isAccountLockOrUnlockedDetails {
  return _tag == DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails;
}

- (BOOL)isEmmErrorDetails {
  return _tag == DBTEAMLOGEventDetailsEmmErrorDetails;
}

- (BOOL)isGuestAdminSignedInViaTrustedTeamsDetails {
  return _tag == DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails;
}

- (BOOL)isGuestAdminSignedOutViaTrustedTeamsDetails {
  return _tag == DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails;
}

- (BOOL)isLoginFailDetails {
  return _tag == DBTEAMLOGEventDetailsLoginFailDetails;
}

- (BOOL)isLoginSuccessDetails {
  return _tag == DBTEAMLOGEventDetailsLoginSuccessDetails;
}

- (BOOL)isLogoutDetails {
  return _tag == DBTEAMLOGEventDetailsLogoutDetails;
}

- (BOOL)isResellerSupportSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionEndDetails;
}

- (BOOL)isResellerSupportSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportSessionStartDetails;
}

- (BOOL)isSignInAsSessionEndDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionEndDetails;
}

- (BOOL)isSignInAsSessionStartDetails {
  return _tag == DBTEAMLOGEventDetailsSignInAsSessionStartDetails;
}

- (BOOL)isSsoErrorDetails {
  return _tag == DBTEAMLOGEventDetailsSsoErrorDetails;
}

- (BOOL)isCreateTeamInviteLinkDetails {
  return _tag == DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails;
}

- (BOOL)isDeleteTeamInviteLinkDetails {
  return _tag == DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails;
}

- (BOOL)isMemberAddExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsMemberAddExternalIdDetails;
}

- (BOOL)isMemberAddNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberAddNameDetails;
}

- (BOOL)isMemberChangeAdminRoleDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails;
}

- (BOOL)isMemberChangeEmailDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeEmailDetails;
}

- (BOOL)isMemberChangeExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeExternalIdDetails;
}

- (BOOL)isMemberChangeMembershipTypeDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails;
}

- (BOOL)isMemberChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeNameDetails;
}

- (BOOL)isMemberChangeResellerRoleDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails;
}

- (BOOL)isMemberChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsMemberChangeStatusDetails;
}

- (BOOL)isMemberDeleteManualContactsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails;
}

- (BOOL)isMemberDeleteProfilePhotoDetails {
  return _tag == DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails;
}

- (BOOL)isMemberPermanentlyDeleteAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails;
}

- (BOOL)isMemberRemoveExternalIdDetails {
  return _tag == DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails;
}

- (BOOL)isMemberSetProfilePhotoDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails;
}

- (BOOL)isMemberSpaceLimitsAddCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails;
}

- (BOOL)isMemberSpaceLimitsChangeCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails;
}

- (BOOL)isMemberSpaceLimitsChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails;
}

- (BOOL)isMemberSpaceLimitsRemoveCustomQuotaDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails;
}

- (BOOL)isMemberSuggestDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestDetails;
}

- (BOOL)isMemberTransferAccountContentsDetails {
  return _tag == DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails;
}

- (BOOL)isPendingSecondaryEmailAddedDetails {
  return _tag == DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails;
}

- (BOOL)isSecondaryEmailDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails;
}

- (BOOL)isSecondaryEmailVerifiedDetails {
  return _tag == DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails;
}

- (BOOL)isSecondaryMailsPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails;
}

- (BOOL)isBinderAddPageDetails {
  return _tag == DBTEAMLOGEventDetailsBinderAddPageDetails;
}

- (BOOL)isBinderAddSectionDetails {
  return _tag == DBTEAMLOGEventDetailsBinderAddSectionDetails;
}

- (BOOL)isBinderRemovePageDetails {
  return _tag == DBTEAMLOGEventDetailsBinderRemovePageDetails;
}

- (BOOL)isBinderRemoveSectionDetails {
  return _tag == DBTEAMLOGEventDetailsBinderRemoveSectionDetails;
}

- (BOOL)isBinderRenamePageDetails {
  return _tag == DBTEAMLOGEventDetailsBinderRenamePageDetails;
}

- (BOOL)isBinderRenameSectionDetails {
  return _tag == DBTEAMLOGEventDetailsBinderRenameSectionDetails;
}

- (BOOL)isBinderReorderPageDetails {
  return _tag == DBTEAMLOGEventDetailsBinderReorderPageDetails;
}

- (BOOL)isBinderReorderSectionDetails {
  return _tag == DBTEAMLOGEventDetailsBinderReorderSectionDetails;
}

- (BOOL)isPaperContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddMemberDetails;
}

- (BOOL)isPaperContentAddToFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentAddToFolderDetails;
}

- (BOOL)isPaperContentArchiveDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentArchiveDetails;
}

- (BOOL)isPaperContentCreateDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentCreateDetails;
}

- (BOOL)isPaperContentPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails;
}

- (BOOL)isPaperContentRemoveFromFolderDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails;
}

- (BOOL)isPaperContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails;
}

- (BOOL)isPaperContentRenameDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRenameDetails;
}

- (BOOL)isPaperContentRestoreDetails {
  return _tag == DBTEAMLOGEventDetailsPaperContentRestoreDetails;
}

- (BOOL)isPaperDocAddCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocAddCommentDetails;
}

- (BOOL)isPaperDocChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails;
}

- (BOOL)isPaperDocChangeSharingPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails;
}

- (BOOL)isPaperDocChangeSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails;
}

- (BOOL)isPaperDocDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeletedDetails;
}

- (BOOL)isPaperDocDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails;
}

- (BOOL)isPaperDocDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocDownloadDetails;
}

- (BOOL)isPaperDocEditDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditDetails;
}

- (BOOL)isPaperDocEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocEditCommentDetails;
}

- (BOOL)isPaperDocFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocFollowedDetails;
}

- (BOOL)isPaperDocMentionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocMentionDetails;
}

- (BOOL)isPaperDocOwnershipChangedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails;
}

- (BOOL)isPaperDocRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRequestAccessDetails;
}

- (BOOL)isPaperDocResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocResolveCommentDetails;
}

- (BOOL)isPaperDocRevertDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocRevertDetails;
}

- (BOOL)isPaperDocSlackShareDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocSlackShareDetails;
}

- (BOOL)isPaperDocTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocTeamInviteDetails;
}

- (BOOL)isPaperDocTrashedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocTrashedDetails;
}

- (BOOL)isPaperDocUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails;
}

- (BOOL)isPaperDocUntrashedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocUntrashedDetails;
}

- (BOOL)isPaperDocViewDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDocViewDetails;
}

- (BOOL)isPaperExternalViewAllowDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewAllowDetails;
}

- (BOOL)isPaperExternalViewDefaultTeamDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails;
}

- (BOOL)isPaperExternalViewForbidDetails {
  return _tag == DBTEAMLOGEventDetailsPaperExternalViewForbidDetails;
}

- (BOOL)isPaperFolderChangeSubscriptionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails;
}

- (BOOL)isPaperFolderDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderDeletedDetails;
}

- (BOOL)isPaperFolderFollowedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderFollowedDetails;
}

- (BOOL)isPaperFolderTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails;
}

- (BOOL)isPaperPublishedLinkChangePermissionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails;
}

- (BOOL)isPaperPublishedLinkCreateDetails {
  return _tag == DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails;
}

- (BOOL)isPaperPublishedLinkDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails;
}

- (BOOL)isPaperPublishedLinkViewDetails {
  return _tag == DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails;
}

- (BOOL)isPasswordChangeDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordChangeDetails;
}

- (BOOL)isPasswordResetDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetDetails;
}

- (BOOL)isPasswordResetAllDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordResetAllDetails;
}

- (BOOL)isClassificationCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsClassificationCreateReportDetails;
}

- (BOOL)isClassificationCreateReportFailDetails {
  return _tag == DBTEAMLOGEventDetailsClassificationCreateReportFailDetails;
}

- (BOOL)isEmmCreateExceptionsReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails;
}

- (BOOL)isEmmCreateUsageReportDetails {
  return _tag == DBTEAMLOGEventDetailsEmmCreateUsageReportDetails;
}

- (BOOL)isExportMembersReportDetails {
  return _tag == DBTEAMLOGEventDetailsExportMembersReportDetails;
}

- (BOOL)isExportMembersReportFailDetails {
  return _tag == DBTEAMLOGEventDetailsExportMembersReportFailDetails;
}

- (BOOL)isExternalSharingCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsExternalSharingCreateReportDetails;
}

- (BOOL)isExternalSharingReportFailedDetails {
  return _tag == DBTEAMLOGEventDetailsExternalSharingReportFailedDetails;
}

- (BOOL)isNoExpirationLinkGenCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails;
}

- (BOOL)isNoExpirationLinkGenReportFailedDetails {
  return _tag == DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails;
}

- (BOOL)isNoPasswordLinkGenCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails;
}

- (BOOL)isNoPasswordLinkGenReportFailedDetails {
  return _tag == DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails;
}

- (BOOL)isNoPasswordLinkViewCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails;
}

- (BOOL)isNoPasswordLinkViewReportFailedDetails {
  return _tag == DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails;
}

- (BOOL)isOutdatedLinkViewCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails;
}

- (BOOL)isOutdatedLinkViewReportFailedDetails {
  return _tag == DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails;
}

- (BOOL)isPaperAdminExportStartDetails {
  return _tag == DBTEAMLOGEventDetailsPaperAdminExportStartDetails;
}

- (BOOL)isSmartSyncCreateAdminPrivilegeReportDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails;
}

- (BOOL)isTeamActivityCreateReportDetails {
  return _tag == DBTEAMLOGEventDetailsTeamActivityCreateReportDetails;
}

- (BOOL)isTeamActivityCreateReportFailDetails {
  return _tag == DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails;
}

- (BOOL)isCollectionShareDetails {
  return _tag == DBTEAMLOGEventDetailsCollectionShareDetails;
}

- (BOOL)isFileTransfersFileAddDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersFileAddDetails;
}

- (BOOL)isFileTransfersTransferDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails;
}

- (BOOL)isFileTransfersTransferDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails;
}

- (BOOL)isFileTransfersTransferSendDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersTransferSendDetails;
}

- (BOOL)isFileTransfersTransferViewDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersTransferViewDetails;
}

- (BOOL)isNoteAclInviteOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails;
}

- (BOOL)isNoteAclLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclLinkDetails;
}

- (BOOL)isNoteAclTeamLinkDetails {
  return _tag == DBTEAMLOGEventDetailsNoteAclTeamLinkDetails;
}

- (BOOL)isNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsNoteSharedDetails;
}

- (BOOL)isNoteShareReceiveDetails {
  return _tag == DBTEAMLOGEventDetailsNoteShareReceiveDetails;
}

- (BOOL)isOpenNoteSharedDetails {
  return _tag == DBTEAMLOGEventDetailsOpenNoteSharedDetails;
}

- (BOOL)isSfAddGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfAddGroupDetails;
}

- (BOOL)isSfAllowNonMembersToViewSharedLinksDetails {
  return _tag == DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails;
}

- (BOOL)isSfExternalInviteWarnDetails {
  return _tag == DBTEAMLOGEventDetailsSfExternalInviteWarnDetails;
}

- (BOOL)isSfFbInviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbInviteDetails;
}

- (BOOL)isSfFbInviteChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails;
}

- (BOOL)isSfFbUninviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfFbUninviteDetails;
}

- (BOOL)isSfInviteGroupDetails {
  return _tag == DBTEAMLOGEventDetailsSfInviteGroupDetails;
}

- (BOOL)isSfTeamGrantAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamGrantAccessDetails;
}

- (BOOL)isSfTeamInviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteDetails;
}

- (BOOL)isSfTeamInviteChangeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails;
}

- (BOOL)isSfTeamJoinDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinDetails;
}

- (BOOL)isSfTeamJoinFromOobLinkDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails;
}

- (BOOL)isSfTeamUninviteDetails {
  return _tag == DBTEAMLOGEventDetailsSfTeamUninviteDetails;
}

- (BOOL)isSharedContentAddInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddInviteesDetails;
}

- (BOOL)isSharedContentAddLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails;
}

- (BOOL)isSharedContentAddLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails;
}

- (BOOL)isSharedContentAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentAddMemberDetails;
}

- (BOOL)isSharedContentChangeDownloadsPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails;
}

- (BOOL)isSharedContentChangeInviteeRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails;
}

- (BOOL)isSharedContentChangeLinkAudienceDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails;
}

- (BOOL)isSharedContentChangeLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails;
}

- (BOOL)isSharedContentChangeLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails;
}

- (BOOL)isSharedContentChangeMemberRoleDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails;
}

- (BOOL)isSharedContentChangeViewerInfoPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails;
}

- (BOOL)isSharedContentClaimInvitationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails;
}

- (BOOL)isSharedContentCopyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentCopyDetails;
}

- (BOOL)isSharedContentDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentDownloadDetails;
}

- (BOOL)isSharedContentRelinquishMembershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails;
}

- (BOOL)isSharedContentRemoveInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails;
}

- (BOOL)isSharedContentRemoveLinkExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails;
}

- (BOOL)isSharedContentRemoveLinkPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails;
}

- (BOOL)isSharedContentRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails;
}

- (BOOL)isSharedContentRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRequestAccessDetails;
}

- (BOOL)isSharedContentRestoreInviteesDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails;
}

- (BOOL)isSharedContentRestoreMemberDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails;
}

- (BOOL)isSharedContentUnshareDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentUnshareDetails;
}

- (BOOL)isSharedContentViewDetails {
  return _tag == DBTEAMLOGEventDetailsSharedContentViewDetails;
}

- (BOOL)isSharedFolderChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersInheritancePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersManagementPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails;
}

- (BOOL)isSharedFolderChangeMembersPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails;
}

- (BOOL)isSharedFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderCreateDetails;
}

- (BOOL)isSharedFolderDeclineInvitationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails;
}

- (BOOL)isSharedFolderMountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderMountDetails;
}

- (BOOL)isSharedFolderNestDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderNestDetails;
}

- (BOOL)isSharedFolderTransferOwnershipDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails;
}

- (BOOL)isSharedFolderUnmountDetails {
  return _tag == DBTEAMLOGEventDetailsSharedFolderUnmountDetails;
}

- (BOOL)isSharedLinkAddExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails;
}

- (BOOL)isSharedLinkChangeExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails;
}

- (BOOL)isSharedLinkChangeVisibilityDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails;
}

- (BOOL)isSharedLinkCopyDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkCopyDetails;
}

- (BOOL)isSharedLinkCreateDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkCreateDetails;
}

- (BOOL)isSharedLinkDisableDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkDisableDetails;
}

- (BOOL)isSharedLinkDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkDownloadDetails;
}

- (BOOL)isSharedLinkRemoveExpiryDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails;
}

- (BOOL)isSharedLinkSettingsAddExpirationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails;
}

- (BOOL)isSharedLinkSettingsAddPasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails;
}

- (BOOL)isSharedLinkSettingsAllowDownloadDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails;
}

- (BOOL)isSharedLinkSettingsAllowDownloadEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails;
}

- (BOOL)isSharedLinkSettingsChangeAudienceDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails;
}

- (BOOL)isSharedLinkSettingsChangeExpirationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails;
}

- (BOOL)isSharedLinkSettingsChangePasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails;
}

- (BOOL)isSharedLinkSettingsRemoveExpirationDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails;
}

- (BOOL)isSharedLinkSettingsRemovePasswordDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails;
}

- (BOOL)isSharedLinkShareDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkShareDetails;
}

- (BOOL)isSharedLinkViewDetails {
  return _tag == DBTEAMLOGEventDetailsSharedLinkViewDetails;
}

- (BOOL)isSharedNoteOpenedDetails {
  return _tag == DBTEAMLOGEventDetailsSharedNoteOpenedDetails;
}

- (BOOL)isShmodelDisableDownloadsDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails;
}

- (BOOL)isShmodelEnableDownloadsDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails;
}

- (BOOL)isShmodelGroupShareDetails {
  return _tag == DBTEAMLOGEventDetailsShmodelGroupShareDetails;
}

- (BOOL)isShowcaseAccessGrantedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails;
}

- (BOOL)isShowcaseAddMemberDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseAddMemberDetails;
}

- (BOOL)isShowcaseArchivedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseArchivedDetails;
}

- (BOOL)isShowcaseCreatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseCreatedDetails;
}

- (BOOL)isShowcaseDeleteCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails;
}

- (BOOL)isShowcaseEditedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseEditedDetails;
}

- (BOOL)isShowcaseEditCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseEditCommentDetails;
}

- (BOOL)isShowcaseFileAddedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileAddedDetails;
}

- (BOOL)isShowcaseFileDownloadDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileDownloadDetails;
}

- (BOOL)isShowcaseFileRemovedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileRemovedDetails;
}

- (BOOL)isShowcaseFileViewDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseFileViewDetails;
}

- (BOOL)isShowcasePermanentlyDeletedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails;
}

- (BOOL)isShowcasePostCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcasePostCommentDetails;
}

- (BOOL)isShowcaseRemoveMemberDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails;
}

- (BOOL)isShowcaseRenamedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRenamedDetails;
}

- (BOOL)isShowcaseRequestAccessDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRequestAccessDetails;
}

- (BOOL)isShowcaseResolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseResolveCommentDetails;
}

- (BOOL)isShowcaseRestoredDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseRestoredDetails;
}

- (BOOL)isShowcaseTrashedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseTrashedDetails;
}

- (BOOL)isShowcaseTrashedDeprecatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails;
}

- (BOOL)isShowcaseUnresolveCommentDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails;
}

- (BOOL)isShowcaseUntrashedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUntrashedDetails;
}

- (BOOL)isShowcaseUntrashedDeprecatedDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails;
}

- (BOOL)isShowcaseViewDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseViewDetails;
}

- (BOOL)isSsoAddCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddCertDetails;
}

- (BOOL)isSsoAddLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddLoginUrlDetails;
}

- (BOOL)isSsoAddLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails;
}

- (BOOL)isSsoChangeCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeCertDetails;
}

- (BOOL)isSsoChangeLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails;
}

- (BOOL)isSsoChangeLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails;
}

- (BOOL)isSsoChangeSamlIdentityModeDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails;
}

- (BOOL)isSsoRemoveCertDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveCertDetails;
}

- (BOOL)isSsoRemoveLoginUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails;
}

- (BOOL)isSsoRemoveLogoutUrlDetails {
  return _tag == DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails;
}

- (BOOL)isTeamFolderChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails;
}

- (BOOL)isTeamFolderCreateDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderCreateDetails;
}

- (BOOL)isTeamFolderDowngradeDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderDowngradeDetails;
}

- (BOOL)isTeamFolderPermanentlyDeleteDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails;
}

- (BOOL)isTeamFolderRenameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamFolderRenameDetails;
}

- (BOOL)isTeamSelectiveSyncSettingsChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails;
}

- (BOOL)isAccountCaptureChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails;
}

- (BOOL)isAdminEmailRemindersChangedDetails {
  return _tag == DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails;
}

- (BOOL)isAllowDownloadDisabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadDisabledDetails;
}

- (BOOL)isAllowDownloadEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsAllowDownloadEnabledDetails;
}

- (BOOL)isAppPermissionsChangedDetails {
  return _tag == DBTEAMLOGEventDetailsAppPermissionsChangedDetails;
}

- (BOOL)isCameraUploadsPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails;
}

- (BOOL)isCaptureTranscriptPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails;
}

- (BOOL)isClassificationChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsClassificationChangePolicyDetails;
}

- (BOOL)isComputerBackupPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails;
}

- (BOOL)isContentAdministrationPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails;
}

- (BOOL)isDataPlacementRestrictionChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails;
}

- (BOOL)isDataPlacementRestrictionSatisfyPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails;
}

- (BOOL)isDeviceApprovalsAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails;
}

- (BOOL)isDeviceApprovalsChangeDesktopPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeMobilePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails;
}

- (BOOL)isDeviceApprovalsChangeOverageActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails;
}

- (BOOL)isDeviceApprovalsChangeUnlinkActionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails;
}

- (BOOL)isDeviceApprovalsRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails;
}

- (BOOL)isDirectoryRestrictionsAddMembersDetails {
  return _tag == DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails;
}

- (BOOL)isDirectoryRestrictionsRemoveMembersDetails {
  return _tag == DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails;
}

- (BOOL)isDropboxPasswordsPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails;
}

- (BOOL)isEmailIngestPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails;
}

- (BOOL)isEmmAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmAddExceptionDetails;
}

- (BOOL)isEmmChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsEmmChangePolicyDetails;
}

- (BOOL)isEmmRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsEmmRemoveExceptionDetails;
}

- (BOOL)isExtendedVersionHistoryChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails;
}

- (BOOL)isExternalDriveBackupPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails;
}

- (BOOL)isFileCommentsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails;
}

- (BOOL)isFileLockingPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails;
}

- (BOOL)isFileRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails;
}

- (BOOL)isFileRequestsEmailsEnabledDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails;
}

- (BOOL)isFileRequestsEmailsRestrictedToTeamOnlyDetails {
  return _tag == DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails;
}

- (BOOL)isFileTransfersPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails;
}

- (BOOL)isGoogleSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails;
}

- (BOOL)isGroupUserManagementChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails;
}

- (BOOL)isIntegrationPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails;
}

- (BOOL)isInviteAcceptanceEmailPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails;
}

- (BOOL)isMemberRequestsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails;
}

- (BOOL)isMemberSendInvitePolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails;
}

- (BOOL)isMemberSpaceLimitsAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails;
}

- (BOOL)isMemberSpaceLimitsChangeCapsTypePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails;
}

- (BOOL)isMemberSpaceLimitsRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails;
}

- (BOOL)isMemberSuggestionsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails;
}

- (BOOL)isMicrosoftOfficeAddinChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails;
}

- (BOOL)isNetworkControlChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails;
}

- (BOOL)isPaperChangeDeploymentPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails;
}

- (BOOL)isPaperChangeMemberLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails;
}

- (BOOL)isPaperChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails;
}

- (BOOL)isPaperChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPaperChangePolicyDetails;
}

- (BOOL)isPaperDefaultFolderPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails;
}

- (BOOL)isPaperDesktopPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails;
}

- (BOOL)isPaperEnabledUsersGroupAdditionDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails;
}

- (BOOL)isPaperEnabledUsersGroupRemovalDetails {
  return _tag == DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails;
}

- (BOOL)isPasswordStrengthRequirementsChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails;
}

- (BOOL)isPermanentDeleteChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails;
}

- (BOOL)isResellerSupportChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails;
}

- (BOOL)isRewindPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsRewindPolicyChangedDetails;
}

- (BOOL)isSendForSignaturePolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails;
}

- (BOOL)isSharingChangeFolderJoinPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails;
}

- (BOOL)isSharingChangeLinkAllowChangeExpirationPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails;
}

- (BOOL)isSharingChangeLinkDefaultExpirationPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails;
}

- (BOOL)isSharingChangeLinkEnforcePasswordPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails;
}

- (BOOL)isSharingChangeLinkPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails;
}

- (BOOL)isSharingChangeMemberPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails;
}

- (BOOL)isShowcaseChangeDownloadPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails;
}

- (BOOL)isShowcaseChangeEnabledPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails;
}

- (BOOL)isShowcaseChangeExternalSharingPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails;
}

- (BOOL)isSmarterSmartSyncPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails;
}

- (BOOL)isSmartSyncChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails;
}

- (BOOL)isSmartSyncNotOptOutDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails;
}

- (BOOL)isSmartSyncOptOutDetails {
  return _tag == DBTEAMLOGEventDetailsSmartSyncOptOutDetails;
}

- (BOOL)isSsoChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsSsoChangePolicyDetails;
}

- (BOOL)isTeamBrandingPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails;
}

- (BOOL)isTeamExtensionsPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails;
}

- (BOOL)isTeamSelectiveSyncPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails;
}

- (BOOL)isTeamSharingWhitelistSubjectsChangedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails;
}

- (BOOL)isTfaAddExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddExceptionDetails;
}

- (BOOL)isTfaChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangePolicyDetails;
}

- (BOOL)isTfaRemoveExceptionDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveExceptionDetails;
}

- (BOOL)isTwoAccountChangePolicyDetails {
  return _tag == DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails;
}

- (BOOL)isViewerInfoPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails;
}

- (BOOL)isWatermarkingPolicyChangedDetails {
  return _tag == DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails;
}

- (BOOL)isWebSessionsChangeActiveSessionLimitDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails;
}

- (BOOL)isWebSessionsChangeFixedLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails;
}

- (BOOL)isWebSessionsChangeIdleLengthPolicyDetails {
  return _tag == DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails;
}

- (BOOL)isDataResidencyMigrationRequestSuccessfulDetails {
  return _tag == DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails;
}

- (BOOL)isDataResidencyMigrationRequestUnsuccessfulDetails {
  return _tag == DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails;
}

- (BOOL)isTeamMergeFromDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeFromDetails;
}

- (BOOL)isTeamMergeToDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeToDetails;
}

- (BOOL)isTeamProfileAddBackgroundDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails;
}

- (BOOL)isTeamProfileAddLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileAddLogoDetails;
}

- (BOOL)isTeamProfileChangeBackgroundDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails;
}

- (BOOL)isTeamProfileChangeDefaultLanguageDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails;
}

- (BOOL)isTeamProfileChangeLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails;
}

- (BOOL)isTeamProfileChangeNameDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileChangeNameDetails;
}

- (BOOL)isTeamProfileRemoveBackgroundDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails;
}

- (BOOL)isTeamProfileRemoveLogoDetails {
  return _tag == DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails;
}

- (BOOL)isTfaAddBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails;
}

- (BOOL)isTfaAddSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails;
}

- (BOOL)isTfaChangeBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails;
}

- (BOOL)isTfaChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsTfaChangeStatusDetails;
}

- (BOOL)isTfaRemoveBackupPhoneDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails;
}

- (BOOL)isTfaRemoveSecurityKeyDetails {
  return _tag == DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails;
}

- (BOOL)isTfaResetDetails {
  return _tag == DBTEAMLOGEventDetailsTfaResetDetails;
}

- (BOOL)isChangedEnterpriseAdminRoleDetails {
  return _tag == DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails;
}

- (BOOL)isChangedEnterpriseConnectedTeamStatusDetails {
  return _tag == DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails;
}

- (BOOL)isEndedEnterpriseAdminSessionDetails {
  return _tag == DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails;
}

- (BOOL)isEndedEnterpriseAdminSessionDeprecatedDetails {
  return _tag == DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails;
}

- (BOOL)isEnterpriseSettingsLockingDetails {
  return _tag == DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails;
}

- (BOOL)isGuestAdminChangeStatusDetails {
  return _tag == DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails;
}

- (BOOL)isStartedEnterpriseAdminSessionDetails {
  return _tag == DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails;
}

- (BOOL)isTeamMergeRequestAcceptedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails;
}

- (BOOL)isTeamMergeRequestAcceptedShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestAcceptedShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails;
}

- (BOOL)isTeamMergeRequestAutoCanceledDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails;
}

- (BOOL)isTeamMergeRequestCanceledDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails;
}

- (BOOL)isTeamMergeRequestCanceledShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestCanceledShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails;
}

- (BOOL)isTeamMergeRequestExpiredDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails;
}

- (BOOL)isTeamMergeRequestExpiredShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestExpiredShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails;
}

- (BOOL)isTeamMergeRequestRejectedShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestRejectedShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails;
}

- (BOOL)isTeamMergeRequestReminderDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails;
}

- (BOOL)isTeamMergeRequestReminderShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestReminderShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails;
}

- (BOOL)isTeamMergeRequestRevokedDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails;
}

- (BOOL)isTeamMergeRequestSentShownToPrimaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails;
}

- (BOOL)isTeamMergeRequestSentShownToSecondaryTeamDetails {
  return _tag == DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails;
}

- (BOOL)isMissingDetails {
  return _tag == DBTEAMLOGEventDetailsMissingDetails;
}

- (BOOL)isOther {
  return _tag == DBTEAMLOGEventDetailsOther;
}

- (NSString *)tagName {
  switch (_tag) {
  case DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails:
    return @"DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails";
  case DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails:
    return @"DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails";
  case DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails:
    return @"DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails";
  case DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails:
    return @"DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails";
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppLinkTeamDetails";
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppLinkUserDetails";
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkTeamDetails";
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return @"DBTEAMLOGEventDetailsAppUnlinkUserDetails";
  case DBTEAMLOGEventDetailsIntegrationConnectedDetails:
    return @"DBTEAMLOGEventDetailsIntegrationConnectedDetails";
  case DBTEAMLOGEventDetailsIntegrationDisconnectedDetails:
    return @"DBTEAMLOGEventDetailsIntegrationDisconnectedDetails";
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return @"DBTEAMLOGEventDetailsFileAddCommentDetails";
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails";
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsFileDeleteCommentDetails";
  case DBTEAMLOGEventDetailsFileEditCommentDetails:
    return @"DBTEAMLOGEventDetailsFileEditCommentDetails";
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileLikeCommentDetails";
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsFileResolveCommentDetails";
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return @"DBTEAMLOGEventDetailsFileUnlikeCommentDetails";
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsFileUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyCreateDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyCreateDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails";
  case DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails:
    return @"DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails";
  case DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails";
  case DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails";
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails";
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails";
  case DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails";
  case DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails";
  case DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails";
  case DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails";
  case DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails";
  case DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails";
  case DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails:
    return @"DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails";
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return @"DBTEAMLOGEventDetailsDeviceChangeIpWebDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkFailDetails";
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return @"DBTEAMLOGEventDetailsDeviceLinkSuccessDetails";
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementDisabledDetails";
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return @"DBTEAMLOGEventDetailsDeviceManagementEnabledDetails";
  case DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails:
    return @"DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails";
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return @"DBTEAMLOGEventDetailsDeviceUnlinkDetails";
  case DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails:
    return @"DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails";
  case DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails:
    return @"DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails";
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return @"DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails";
  case DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails:
    return @"DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails";
  case DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails:
    return @"DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails";
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails";
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails";
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails";
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsDisabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails";
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails";
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return @"DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails";
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails";
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return @"DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails";
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return @"DBTEAMLOGEventDetailsEnabledDomainInvitesDetails";
  case DBTEAMLOGEventDetailsApplyNamingConventionDetails:
    return @"DBTEAMLOGEventDetailsApplyNamingConventionDetails";
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return @"DBTEAMLOGEventDetailsCreateFolderDetails";
  case DBTEAMLOGEventDetailsFileAddDetails:
    return @"DBTEAMLOGEventDetailsFileAddDetails";
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return @"DBTEAMLOGEventDetailsFileCopyDetails";
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return @"DBTEAMLOGEventDetailsFileDeleteDetails";
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return @"DBTEAMLOGEventDetailsFileDownloadDetails";
  case DBTEAMLOGEventDetailsFileEditDetails:
    return @"DBTEAMLOGEventDetailsFileEditDetails";
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileGetCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails:
    return @"DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails";
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return @"DBTEAMLOGEventDetailsFileMoveDetails";
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return @"DBTEAMLOGEventDetailsFilePreviewDetails";
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return @"DBTEAMLOGEventDetailsFileRenameDetails";
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return @"DBTEAMLOGEventDetailsFileRestoreDetails";
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return @"DBTEAMLOGEventDetailsFileRevertDetails";
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return @"DBTEAMLOGEventDetailsFileRollbackChangesDetails";
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return @"DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails";
  case DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails:
    return @"DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails";
  case DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails:
    return @"DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails";
  case DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails:
    return @"DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails";
  case DBTEAMLOGEventDetailsObjectLabelAddedDetails:
    return @"DBTEAMLOGEventDetailsObjectLabelAddedDetails";
  case DBTEAMLOGEventDetailsObjectLabelRemovedDetails:
    return @"DBTEAMLOGEventDetailsObjectLabelRemovedDetails";
  case DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails:
    return @"DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails";
  case DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails:
    return @"DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails";
  case DBTEAMLOGEventDetailsRewindFolderDetails:
    return @"DBTEAMLOGEventDetailsRewindFolderDetails";
  case DBTEAMLOGEventDetailsUndoNamingConventionDetails:
    return @"DBTEAMLOGEventDetailsUndoNamingConventionDetails";
  case DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails:
    return @"DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails";
  case DBTEAMLOGEventDetailsUserTagsAddedDetails:
    return @"DBTEAMLOGEventDetailsUserTagsAddedDetails";
  case DBTEAMLOGEventDetailsUserTagsRemovedDetails:
    return @"DBTEAMLOGEventDetailsUserTagsRemovedDetails";
  case DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails:
    return @"DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails";
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    return @"DBTEAMLOGEventDetailsFileRequestChangeDetails";
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCloseDetails";
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return @"DBTEAMLOGEventDetailsFileRequestCreateDetails";
  case DBTEAMLOGEventDetailsFileRequestDeleteDetails:
    return @"DBTEAMLOGEventDetailsFileRequestDeleteDetails";
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return @"DBTEAMLOGEventDetailsFileRequestReceiveFileDetails";
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupAddExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupAddMemberDetails";
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails";
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return @"DBTEAMLOGEventDetailsGroupCreateDetails";
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return @"DBTEAMLOGEventDetailsGroupDeleteDetails";
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return @"DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails";
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return @"DBTEAMLOGEventDetailsGroupMovedDetails";
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails";
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsGroupRemoveMemberDetails";
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return @"DBTEAMLOGEventDetailsGroupRenameDetails";
  case DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails:
    return @"DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails";
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    return @"DBTEAMLOGEventDetailsEmmErrorDetails";
  case DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails:
    return @"DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails";
  case DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails:
    return @"DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails";
  case DBTEAMLOGEventDetailsLoginFailDetails:
    return @"DBTEAMLOGEventDetailsLoginFailDetails";
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    return @"DBTEAMLOGEventDetailsLoginSuccessDetails";
  case DBTEAMLOGEventDetailsLogoutDetails:
    return @"DBTEAMLOGEventDetailsLogoutDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionEndDetails";
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportSessionStartDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionEndDetails";
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return @"DBTEAMLOGEventDetailsSignInAsSessionStartDetails";
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    return @"DBTEAMLOGEventDetailsSsoErrorDetails";
  case DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails:
    return @"DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails";
  case DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails:
    return @"DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails";
  case DBTEAMLOGEventDetailsMemberAddExternalIdDetails:
    return @"DBTEAMLOGEventDetailsMemberAddExternalIdDetails";
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return @"DBTEAMLOGEventDetailsMemberAddNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails";
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeEmailDetails";
  case DBTEAMLOGEventDetailsMemberChangeExternalIdDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeExternalIdDetails";
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails";
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeNameDetails";
  case DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails";
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsMemberChangeStatusDetails";
  case DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails:
    return @"DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails";
  case DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails:
    return @"DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails";
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails";
  case DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails:
    return @"DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails";
  case DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails:
    return @"DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails";
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestDetails";
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return @"DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails";
  case DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails:
    return @"DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails";
  case DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails:
    return @"DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails";
  case DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails:
    return @"DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails";
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails";
  case DBTEAMLOGEventDetailsBinderAddPageDetails:
    return @"DBTEAMLOGEventDetailsBinderAddPageDetails";
  case DBTEAMLOGEventDetailsBinderAddSectionDetails:
    return @"DBTEAMLOGEventDetailsBinderAddSectionDetails";
  case DBTEAMLOGEventDetailsBinderRemovePageDetails:
    return @"DBTEAMLOGEventDetailsBinderRemovePageDetails";
  case DBTEAMLOGEventDetailsBinderRemoveSectionDetails:
    return @"DBTEAMLOGEventDetailsBinderRemoveSectionDetails";
  case DBTEAMLOGEventDetailsBinderRenamePageDetails:
    return @"DBTEAMLOGEventDetailsBinderRenamePageDetails";
  case DBTEAMLOGEventDetailsBinderRenameSectionDetails:
    return @"DBTEAMLOGEventDetailsBinderRenameSectionDetails";
  case DBTEAMLOGEventDetailsBinderReorderPageDetails:
    return @"DBTEAMLOGEventDetailsBinderReorderPageDetails";
  case DBTEAMLOGEventDetailsBinderReorderSectionDetails:
    return @"DBTEAMLOGEventDetailsBinderReorderSectionDetails";
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentAddToFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return @"DBTEAMLOGEventDetailsPaperContentArchiveDetails";
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return @"DBTEAMLOGEventDetailsPaperContentCreateDetails";
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails";
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRenameDetails";
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return @"DBTEAMLOGEventDetailsPaperContentRestoreDetails";
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocAddCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails";
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails";
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeletedDetails";
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return @"DBTEAMLOGEventDetailsPaperDocDownloadDetails";
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditDetails";
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocEditCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocFollowedDetails";
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return @"DBTEAMLOGEventDetailsPaperDocMentionDetails";
  case DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails";
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRequestAccessDetails";
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocResolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return @"DBTEAMLOGEventDetailsPaperDocRevertDetails";
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return @"DBTEAMLOGEventDetailsPaperDocSlackShareDetails";
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperDocTeamInviteDetails";
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocTrashedDetails";
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    return @"DBTEAMLOGEventDetailsPaperDocUntrashedDetails";
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return @"DBTEAMLOGEventDetailsPaperDocViewDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewAllowDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails";
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return @"DBTEAMLOGEventDetailsPaperExternalViewForbidDetails";
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails";
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderDeletedDetails";
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderFollowedDetails";
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails";
  case DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails:
    return @"DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails";
  case DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails:
    return @"DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails";
  case DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails:
    return @"DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails";
  case DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails:
    return @"DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails";
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return @"DBTEAMLOGEventDetailsPasswordChangeDetails";
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetDetails";
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return @"DBTEAMLOGEventDetailsPasswordResetAllDetails";
  case DBTEAMLOGEventDetailsClassificationCreateReportDetails:
    return @"DBTEAMLOGEventDetailsClassificationCreateReportDetails";
  case DBTEAMLOGEventDetailsClassificationCreateReportFailDetails:
    return @"DBTEAMLOGEventDetailsClassificationCreateReportFailDetails";
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails";
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return @"DBTEAMLOGEventDetailsEmmCreateUsageReportDetails";
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    return @"DBTEAMLOGEventDetailsExportMembersReportDetails";
  case DBTEAMLOGEventDetailsExportMembersReportFailDetails:
    return @"DBTEAMLOGEventDetailsExportMembersReportFailDetails";
  case DBTEAMLOGEventDetailsExternalSharingCreateReportDetails:
    return @"DBTEAMLOGEventDetailsExternalSharingCreateReportDetails";
  case DBTEAMLOGEventDetailsExternalSharingReportFailedDetails:
    return @"DBTEAMLOGEventDetailsExternalSharingReportFailedDetails";
  case DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails:
    return @"DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails";
  case DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails:
    return @"DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails";
  case DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails:
    return @"DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails";
  case DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails:
    return @"DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails";
  case DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails:
    return @"DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails";
  case DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails:
    return @"DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails";
  case DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails:
    return @"DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails";
  case DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails:
    return @"DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails";
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    return @"DBTEAMLOGEventDetailsPaperAdminExportStartDetails";
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails";
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return @"DBTEAMLOGEventDetailsTeamActivityCreateReportDetails";
  case DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails:
    return @"DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails";
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return @"DBTEAMLOGEventDetailsCollectionShareDetails";
  case DBTEAMLOGEventDetailsFileTransfersFileAddDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersFileAddDetails";
  case DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails";
  case DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails";
  case DBTEAMLOGEventDetailsFileTransfersTransferSendDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersTransferSendDetails";
  case DBTEAMLOGEventDetailsFileTransfersTransferViewDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersTransferViewDetails";
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return @"DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails";
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclLinkDetails";
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return @"DBTEAMLOGEventDetailsNoteAclTeamLinkDetails";
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsNoteSharedDetails";
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return @"DBTEAMLOGEventDetailsNoteShareReceiveDetails";
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return @"DBTEAMLOGEventDetailsOpenNoteSharedDetails";
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return @"DBTEAMLOGEventDetailsSfAddGroupDetails";
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return @"DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails";
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return @"DBTEAMLOGEventDetailsSfExternalInviteWarnDetails";
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    return @"DBTEAMLOGEventDetailsSfFbInviteDetails";
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails";
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    return @"DBTEAMLOGEventDetailsSfFbUninviteDetails";
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return @"DBTEAMLOGEventDetailsSfInviteGroupDetails";
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return @"DBTEAMLOGEventDetailsSfTeamGrantAccessDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteDetails";
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return @"DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinDetails";
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return @"DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails";
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return @"DBTEAMLOGEventDetailsSfTeamUninviteDetails";
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentAddMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails";
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails";
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return @"DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails";
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return @"DBTEAMLOGEventDetailsSharedContentCopyDetails";
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return @"DBTEAMLOGEventDetailsSharedContentDownloadDetails";
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails";
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRequestAccessDetails";
  case DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails";
  case DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails:
    return @"DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails";
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return @"DBTEAMLOGEventDetailsSharedContentUnshareDetails";
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return @"DBTEAMLOGEventDetailsSharedContentViewDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails";
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderCreateDetails";
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails";
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderMountDetails";
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderNestDetails";
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails";
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return @"DBTEAMLOGEventDetailsSharedFolderUnmountDetails";
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails";
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkCopyDetails";
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkCreateDetails";
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkDisableDetails";
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkDownloadDetails";
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails";
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails";
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkShareDetails";
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    return @"DBTEAMLOGEventDetailsSharedLinkViewDetails";
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return @"DBTEAMLOGEventDetailsSharedNoteOpenedDetails";
  case DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails:
    return @"DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails";
  case DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails:
    return @"DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails";
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return @"DBTEAMLOGEventDetailsShmodelGroupShareDetails";
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails";
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    return @"DBTEAMLOGEventDetailsShowcaseAddMemberDetails";
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseArchivedDetails";
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseCreatedDetails";
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseEditedDetails";
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseEditCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileAddedDetails";
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileDownloadDetails";
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileRemovedDetails";
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    return @"DBTEAMLOGEventDetailsShowcaseFileViewDetails";
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    return @"DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails";
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcasePostCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails";
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRenamedDetails";
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRequestAccessDetails";
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseResolveCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    return @"DBTEAMLOGEventDetailsShowcaseRestoredDetails";
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseTrashedDetails";
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails";
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails";
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUntrashedDetails";
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    return @"DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails";
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    return @"DBTEAMLOGEventDetailsShowcaseViewDetails";
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    return @"DBTEAMLOGEventDetailsSsoAddCertDetails";
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoAddLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeCertDetails";
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails";
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return @"DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails";
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveCertDetails";
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails";
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    return @"DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails";
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails";
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderCreateDetails";
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderDowngradeDetails";
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails";
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return @"DBTEAMLOGEventDetailsTeamFolderRenameDetails";
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails";
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails";
  case DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails:
    return @"DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails";
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadDisabledDetails";
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return @"DBTEAMLOGEventDetailsAllowDownloadEnabledDetails";
  case DBTEAMLOGEventDetailsAppPermissionsChangedDetails:
    return @"DBTEAMLOGEventDetailsAppPermissionsChangedDetails";
  case DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails";
  case DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails";
  case DBTEAMLOGEventDetailsClassificationChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsClassificationChangePolicyDetails";
  case DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails";
  case DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails";
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return @"DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails";
  case DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    return @"DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails";
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    return @"DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails";
  case DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails";
  case DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails";
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmAddExceptionDetails";
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsEmmChangePolicyDetails";
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsEmmRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails";
  case DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails";
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails";
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails";
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return @"DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails";
  case DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails";
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails";
  case DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails";
  case DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails";
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails";
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails";
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPaperChangePolicyDetails";
  case DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails";
  case DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails";
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return @"DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails";
  case DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails";
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails";
  case DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails";
  case DBTEAMLOGEventDetailsRewindPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsRewindPolicyChangedDetails";
  case DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails";
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails";
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return @"DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails";
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    return @"DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails";
  case DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails";
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails";
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails";
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    return @"DBTEAMLOGEventDetailsSmartSyncOptOutDetails";
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsSsoChangePolicyDetails";
  case DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails";
  case DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails";
  case DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails";
  case DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails:
    return @"DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails";
  case DBTEAMLOGEventDetailsTfaAddExceptionDetails:
    return @"DBTEAMLOGEventDetailsTfaAddExceptionDetails";
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTfaChangePolicyDetails";
  case DBTEAMLOGEventDetailsTfaRemoveExceptionDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveExceptionDetails";
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return @"DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails";
  case DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails";
  case DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails:
    return @"DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails";
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return @"DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails";
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails:
    return @"DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails";
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails:
    return @"DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails";
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeFromDetails";
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeToDetails";
  case DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails";
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileAddLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails";
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileChangeNameDetails";
  case DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails";
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return @"DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails";
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsTfaChangeStatusDetails";
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails";
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return @"DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails";
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return @"DBTEAMLOGEventDetailsTfaResetDetails";
  case DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails:
    return @"DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails";
  case DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails:
    return @"DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails";
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails:
    return @"DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails";
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails:
    return @"DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails";
  case DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails:
    return @"DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails";
  case DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails:
    return @"DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails";
  case DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails:
    return @"DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails";
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails:
    return @"DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails";
  case DBTEAMLOGEventDetailsMissingDetails:
    return @"DBTEAMLOGEventDetailsMissingDetails";
  case DBTEAMLOGEventDetailsOther:
    return @"DBTEAMLOGEventDetailsOther";
  }

  @throw([NSException exceptionWithName:@"InvalidTag" reason:@"Tag has an unknown value." userInfo:nil]);
}

#pragma mark - Serialization methods

+ (nullable NSDictionary<NSString *, id> *)serialize:(id)instance {
  return [DBTEAMLOGEventDetailsSerializer serialize:instance];
}

+ (id)deserialize:(NSDictionary<NSString *, id> *)dict {
  return [DBTEAMLOGEventDetailsSerializer deserialize:dict];
}

#pragma mark - Debug Description method

- (NSString *)debugDescription {
  return [[DBTEAMLOGEventDetailsSerializer serialize:self] description];
}

#pragma mark - Copyable method

- (instancetype)copyWithZone:(NSZone *)zone {
#pragma unused(zone)
  /// object is immutable
  return self;
}

#pragma mark - Hash method

- (NSUInteger)hash {
  NSUInteger prime = 31;
  NSUInteger result = 1;

  switch (_tag) {
  case DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails:
    result = prime * result + [self.adminAlertingAlertStateChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails:
    result = prime * result + [self.adminAlertingChangedAlertConfigDetails hash];
    break;
  case DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails:
    result = prime * result + [self.adminAlertingTriggeredAlertDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails:
    result = prime * result + [self.appBlockedByPermissionsDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    result = prime * result + [self.appLinkTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    result = prime * result + [self.appLinkUserDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    result = prime * result + [self.appUnlinkTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    result = prime * result + [self.appUnlinkUserDetails hash];
    break;
  case DBTEAMLOGEventDetailsIntegrationConnectedDetails:
    result = prime * result + [self.integrationConnectedDetails hash];
    break;
  case DBTEAMLOGEventDetailsIntegrationDisconnectedDetails:
    result = prime * result + [self.integrationDisconnectedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    result = prime * result + [self.fileAddCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    result = prime * result + [self.fileChangeCommentSubscriptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    result = prime * result + [self.fileDeleteCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileEditCommentDetails:
    result = prime * result + [self.fileEditCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    result = prime * result + [self.fileLikeCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    result = prime * result + [self.fileResolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    result = prime * result + [self.fileUnlikeCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    result = prime * result + [self.fileUnresolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails:
    result = prime * result + [self.governancePolicyAddFoldersDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails:
    result = prime * result + [self.governancePolicyAddFolderFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails:
    result = prime * result + [self.governancePolicyContentDisposedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyCreateDetails:
    result = prime * result + [self.governancePolicyCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails:
    result = prime * result + [self.governancePolicyDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails:
    result = prime * result + [self.governancePolicyEditDetailsDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails:
    result = prime * result + [self.governancePolicyEditDurationDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails:
    result = prime * result + [self.governancePolicyExportCreatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails:
    result = prime * result + [self.governancePolicyExportRemovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails:
    result = prime * result + [self.governancePolicyRemoveFoldersDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails:
    result = prime * result + [self.governancePolicyReportCreatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails:
    result = prime * result + [self.governancePolicyZipPartDownloadedDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails:
    result = prime * result + [self.legalHoldsActivateAHoldDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails:
    result = prime * result + [self.legalHoldsAddMembersDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails:
    result = prime * result + [self.legalHoldsChangeHoldDetailsDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails:
    result = prime * result + [self.legalHoldsChangeHoldNameDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails:
    result = prime * result + [self.legalHoldsExportAHoldDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails:
    result = prime * result + [self.legalHoldsExportCancelledDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails:
    result = prime * result + [self.legalHoldsExportDownloadedDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails:
    result = prime * result + [self.legalHoldsExportRemovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails:
    result = prime * result + [self.legalHoldsReleaseAHoldDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails:
    result = prime * result + [self.legalHoldsRemoveMembersDetails hash];
    break;
  case DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails:
    result = prime * result + [self.legalHoldsReportAHoldDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    result = prime * result + [self.deviceChangeIpDesktopDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    result = prime * result + [self.deviceChangeIpMobileDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    result = prime * result + [self.deviceChangeIpWebDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    result = prime * result + [self.deviceDeleteOnUnlinkSuccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    result = prime * result + [self.deviceLinkFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    result = prime * result + [self.deviceLinkSuccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    result = prime * result + [self.deviceManagementDisabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    result = prime * result + [self.deviceManagementEnabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails:
    result = prime * result + [self.deviceSyncBackupStatusChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    result = prime * result + [self.deviceUnlinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails:
    result = prime * result + [self.dropboxPasswordsExportedDetails hash];
    break;
  case DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails:
    result = prime * result + [self.dropboxPasswordsNewDeviceEnrolledDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    result = prime * result + [self.emmRefreshAuthTokenDetails hash];
    break;
  case DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails:
    result = prime * result + [self.externalDriveBackupEligibilityStatusCheckedDetails hash];
    break;
  case DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails:
    result = prime * result + [self.externalDriveBackupStatusChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    result = prime * result + [self.accountCaptureChangeAvailabilityDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    result = prime * result + [self.accountCaptureMigrateAccountDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    result = prime * result + [self.accountCaptureNotificationEmailsSentDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    result = prime * result + [self.accountCaptureRelinquishAccountDetails hash];
    break;
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    result = prime * result + [self.disabledDomainInvitesDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesApproveRequestToJoinTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesDeclineRequestToJoinTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    result = prime * result + [self.domainInvitesEmailExistingUsersDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    result = prime * result + [self.domainInvitesRequestToJoinTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToNoDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    result = prime * result + [self.domainInvitesSetInviteNewUserPrefToYesDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    result = prime * result + [self.domainVerificationAddDomainFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    result = prime * result + [self.domainVerificationAddDomainSuccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    result = prime * result + [self.domainVerificationRemoveDomainDetails hash];
    break;
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    result = prime * result + [self.enabledDomainInvitesDetails hash];
    break;
  case DBTEAMLOGEventDetailsApplyNamingConventionDetails:
    result = prime * result + [self.applyNamingConventionDetails hash];
    break;
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    result = prime * result + [self.createFolderDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileAddDetails:
    result = prime * result + [self.fileAddDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileCopyDetails:
    result = prime * result + [self.fileCopyDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    result = prime * result + [self.fileDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    result = prime * result + [self.fileDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileEditDetails:
    result = prime * result + [self.fileEditDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    result = prime * result + [self.fileGetCopyReferenceDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails:
    result = prime * result + [self.fileLockingLockStatusChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileMoveDetails:
    result = prime * result + [self.fileMoveDetails hash];
    break;
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    result = prime * result + [self.filePermanentlyDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    result = prime * result + [self.filePreviewDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRenameDetails:
    result = prime * result + [self.fileRenameDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    result = prime * result + [self.fileRestoreDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRevertDetails:
    result = prime * result + [self.fileRevertDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    result = prime * result + [self.fileRollbackChangesDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    result = prime * result + [self.fileSaveCopyReferenceDetails hash];
    break;
  case DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails:
    result = prime * result + [self.folderOverviewDescriptionChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails:
    result = prime * result + [self.folderOverviewItemPinnedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails:
    result = prime * result + [self.folderOverviewItemUnpinnedDetails hash];
    break;
  case DBTEAMLOGEventDetailsObjectLabelAddedDetails:
    result = prime * result + [self.objectLabelAddedDetails hash];
    break;
  case DBTEAMLOGEventDetailsObjectLabelRemovedDetails:
    result = prime * result + [self.objectLabelRemovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails:
    result = prime * result + [self.objectLabelUpdatedValueDetails hash];
    break;
  case DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails:
    result = prime * result + [self.organizeFolderWithTidyDetails hash];
    break;
  case DBTEAMLOGEventDetailsRewindFolderDetails:
    result = prime * result + [self.rewindFolderDetails hash];
    break;
  case DBTEAMLOGEventDetailsUndoNamingConventionDetails:
    result = prime * result + [self.undoNamingConventionDetails hash];
    break;
  case DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails:
    result = prime * result + [self.undoOrganizeFolderWithTidyDetails hash];
    break;
  case DBTEAMLOGEventDetailsUserTagsAddedDetails:
    result = prime * result + [self.userTagsAddedDetails hash];
    break;
  case DBTEAMLOGEventDetailsUserTagsRemovedDetails:
    result = prime * result + [self.userTagsRemovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails:
    result = prime * result + [self.emailIngestReceiveFileDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    result = prime * result + [self.fileRequestChangeDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    result = prime * result + [self.fileRequestCloseDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    result = prime * result + [self.fileRequestCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestDeleteDetails:
    result = prime * result + [self.fileRequestDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    result = prime * result + [self.fileRequestReceiveFileDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    result = prime * result + [self.groupAddExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    result = prime * result + [self.groupAddMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    result = prime * result + [self.groupChangeExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    result = prime * result + [self.groupChangeManagementTypeDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    result = prime * result + [self.groupChangeMemberRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    result = prime * result + [self.groupCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    result = prime * result + [self.groupDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    result = prime * result + [self.groupDescriptionUpdatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    result = prime * result + [self.groupJoinPolicyUpdatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    result = prime * result + [self.groupMovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    result = prime * result + [self.groupRemoveExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    result = prime * result + [self.groupRemoveMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    result = prime * result + [self.groupRenameDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails:
    result = prime * result + [self.accountLockOrUnlockedDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    result = prime * result + [self.emmErrorDetails hash];
    break;
  case DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails:
    result = prime * result + [self.guestAdminSignedInViaTrustedTeamsDetails hash];
    break;
  case DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails:
    result = prime * result + [self.guestAdminSignedOutViaTrustedTeamsDetails hash];
    break;
  case DBTEAMLOGEventDetailsLoginFailDetails:
    result = prime * result + [self.loginFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    result = prime * result + [self.loginSuccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsLogoutDetails:
    result = prime * result + [self.logoutDetails hash];
    break;
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    result = prime * result + [self.resellerSupportSessionEndDetails hash];
    break;
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    result = prime * result + [self.resellerSupportSessionStartDetails hash];
    break;
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    result = prime * result + [self.signInAsSessionEndDetails hash];
    break;
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    result = prime * result + [self.signInAsSessionStartDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    result = prime * result + [self.ssoErrorDetails hash];
    break;
  case DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails:
    result = prime * result + [self.createTeamInviteLinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails:
    result = prime * result + [self.deleteTeamInviteLinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberAddExternalIdDetails:
    result = prime * result + [self.memberAddExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    result = prime * result + [self.memberAddNameDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    result = prime * result + [self.memberChangeAdminRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    result = prime * result + [self.memberChangeEmailDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeExternalIdDetails:
    result = prime * result + [self.memberChangeExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    result = prime * result + [self.memberChangeMembershipTypeDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    result = prime * result + [self.memberChangeNameDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails:
    result = prime * result + [self.memberChangeResellerRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    result = prime * result + [self.memberChangeStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails:
    result = prime * result + [self.memberDeleteManualContactsDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails:
    result = prime * result + [self.memberDeleteProfilePhotoDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    result = prime * result + [self.memberPermanentlyDeleteAccountContentsDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails:
    result = prime * result + [self.memberRemoveExternalIdDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails:
    result = prime * result + [self.memberSetProfilePhotoDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsAddCustomQuotaDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsChangeCustomQuotaDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    result = prime * result + [self.memberSpaceLimitsChangeStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    result = prime * result + [self.memberSpaceLimitsRemoveCustomQuotaDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    result = prime * result + [self.memberSuggestDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    result = prime * result + [self.memberTransferAccountContentsDetails hash];
    break;
  case DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails:
    result = prime * result + [self.pendingSecondaryEmailAddedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails:
    result = prime * result + [self.secondaryEmailDeletedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails:
    result = prime * result + [self.secondaryEmailVerifiedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    result = prime * result + [self.secondaryMailsPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderAddPageDetails:
    result = prime * result + [self.binderAddPageDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderAddSectionDetails:
    result = prime * result + [self.binderAddSectionDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderRemovePageDetails:
    result = prime * result + [self.binderRemovePageDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderRemoveSectionDetails:
    result = prime * result + [self.binderRemoveSectionDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderRenamePageDetails:
    result = prime * result + [self.binderRenamePageDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderRenameSectionDetails:
    result = prime * result + [self.binderRenameSectionDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderReorderPageDetails:
    result = prime * result + [self.binderReorderPageDetails hash];
    break;
  case DBTEAMLOGEventDetailsBinderReorderSectionDetails:
    result = prime * result + [self.binderReorderSectionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    result = prime * result + [self.paperContentAddMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    result = prime * result + [self.paperContentAddToFolderDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    result = prime * result + [self.paperContentArchiveDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    result = prime * result + [self.paperContentCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    result = prime * result + [self.paperContentPermanentlyDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    result = prime * result + [self.paperContentRemoveFromFolderDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    result = prime * result + [self.paperContentRemoveMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    result = prime * result + [self.paperContentRenameDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    result = prime * result + [self.paperContentRestoreDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    result = prime * result + [self.paperDocAddCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    result = prime * result + [self.paperDocChangeMemberRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    result = prime * result + [self.paperDocChangeSharingPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    result = prime * result + [self.paperDocChangeSubscriptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    result = prime * result + [self.paperDocDeletedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    result = prime * result + [self.paperDocDeleteCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    result = prime * result + [self.paperDocDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    result = prime * result + [self.paperDocEditDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    result = prime * result + [self.paperDocEditCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    result = prime * result + [self.paperDocFollowedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    result = prime * result + [self.paperDocMentionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails:
    result = prime * result + [self.paperDocOwnershipChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    result = prime * result + [self.paperDocRequestAccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    result = prime * result + [self.paperDocResolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    result = prime * result + [self.paperDocRevertDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    result = prime * result + [self.paperDocSlackShareDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    result = prime * result + [self.paperDocTeamInviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    result = prime * result + [self.paperDocTrashedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    result = prime * result + [self.paperDocUnresolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    result = prime * result + [self.paperDocUntrashedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    result = prime * result + [self.paperDocViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    result = prime * result + [self.paperExternalViewAllowDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    result = prime * result + [self.paperExternalViewDefaultTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    result = prime * result + [self.paperExternalViewForbidDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    result = prime * result + [self.paperFolderChangeSubscriptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    result = prime * result + [self.paperFolderDeletedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    result = prime * result + [self.paperFolderFollowedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    result = prime * result + [self.paperFolderTeamInviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails:
    result = prime * result + [self.paperPublishedLinkChangePermissionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails:
    result = prime * result + [self.paperPublishedLinkCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails:
    result = prime * result + [self.paperPublishedLinkDisabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails:
    result = prime * result + [self.paperPublishedLinkViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    result = prime * result + [self.passwordChangeDetails hash];
    break;
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    result = prime * result + [self.passwordResetDetails hash];
    break;
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    result = prime * result + [self.passwordResetAllDetails hash];
    break;
  case DBTEAMLOGEventDetailsClassificationCreateReportDetails:
    result = prime * result + [self.classificationCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsClassificationCreateReportFailDetails:
    result = prime * result + [self.classificationCreateReportFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    result = prime * result + [self.emmCreateExceptionsReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    result = prime * result + [self.emmCreateUsageReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    result = prime * result + [self.exportMembersReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsExportMembersReportFailDetails:
    result = prime * result + [self.exportMembersReportFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsExternalSharingCreateReportDetails:
    result = prime * result + [self.externalSharingCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsExternalSharingReportFailedDetails:
    result = prime * result + [self.externalSharingReportFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails:
    result = prime * result + [self.noExpirationLinkGenCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails:
    result = prime * result + [self.noExpirationLinkGenReportFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails:
    result = prime * result + [self.noPasswordLinkGenCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails:
    result = prime * result + [self.noPasswordLinkGenReportFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails:
    result = prime * result + [self.noPasswordLinkViewCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails:
    result = prime * result + [self.noPasswordLinkViewReportFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails:
    result = prime * result + [self.outdatedLinkViewCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails:
    result = prime * result + [self.outdatedLinkViewReportFailedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    result = prime * result + [self.paperAdminExportStartDetails hash];
    break;
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    result = prime * result + [self.smartSyncCreateAdminPrivilegeReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    result = prime * result + [self.teamActivityCreateReportDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails:
    result = prime * result + [self.teamActivityCreateReportFailDetails hash];
    break;
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    result = prime * result + [self.collectionShareDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersFileAddDetails:
    result = prime * result + [self.fileTransfersFileAddDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails:
    result = prime * result + [self.fileTransfersTransferDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails:
    result = prime * result + [self.fileTransfersTransferDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersTransferSendDetails:
    result = prime * result + [self.fileTransfersTransferSendDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersTransferViewDetails:
    result = prime * result + [self.fileTransfersTransferViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    result = prime * result + [self.noteAclInviteOnlyDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    result = prime * result + [self.noteAclLinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    result = prime * result + [self.noteAclTeamLinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    result = prime * result + [self.noteSharedDetails hash];
    break;
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    result = prime * result + [self.noteShareReceiveDetails hash];
    break;
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    result = prime * result + [self.openNoteSharedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    result = prime * result + [self.sfAddGroupDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    result = prime * result + [self.sfAllowNonMembersToViewSharedLinksDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    result = prime * result + [self.sfExternalInviteWarnDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    result = prime * result + [self.sfFbInviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    result = prime * result + [self.sfFbInviteChangeRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    result = prime * result + [self.sfFbUninviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    result = prime * result + [self.sfInviteGroupDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    result = prime * result + [self.sfTeamGrantAccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    result = prime * result + [self.sfTeamInviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    result = prime * result + [self.sfTeamInviteChangeRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    result = prime * result + [self.sfTeamJoinDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    result = prime * result + [self.sfTeamJoinFromOobLinkDetails hash];
    break;
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    result = prime * result + [self.sfTeamUninviteDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    result = prime * result + [self.sharedContentAddInviteesDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    result = prime * result + [self.sharedContentAddLinkExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    result = prime * result + [self.sharedContentAddLinkPasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    result = prime * result + [self.sharedContentAddMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    result = prime * result + [self.sharedContentChangeDownloadsPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    result = prime * result + [self.sharedContentChangeInviteeRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    result = prime * result + [self.sharedContentChangeLinkAudienceDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    result = prime * result + [self.sharedContentChangeLinkExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    result = prime * result + [self.sharedContentChangeLinkPasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    result = prime * result + [self.sharedContentChangeMemberRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    result = prime * result + [self.sharedContentChangeViewerInfoPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    result = prime * result + [self.sharedContentClaimInvitationDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    result = prime * result + [self.sharedContentCopyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    result = prime * result + [self.sharedContentDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    result = prime * result + [self.sharedContentRelinquishMembershipDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    result = prime * result + [self.sharedContentRemoveInviteesDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    result = prime * result + [self.sharedContentRemoveLinkExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    result = prime * result + [self.sharedContentRemoveLinkPasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    result = prime * result + [self.sharedContentRemoveMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    result = prime * result + [self.sharedContentRequestAccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails:
    result = prime * result + [self.sharedContentRestoreInviteesDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails:
    result = prime * result + [self.sharedContentRestoreMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    result = prime * result + [self.sharedContentUnshareDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    result = prime * result + [self.sharedContentViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    result = prime * result + [self.sharedFolderChangeLinkPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersInheritancePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersManagementPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    result = prime * result + [self.sharedFolderChangeMembersPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    result = prime * result + [self.sharedFolderCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    result = prime * result + [self.sharedFolderDeclineInvitationDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    result = prime * result + [self.sharedFolderMountDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    result = prime * result + [self.sharedFolderNestDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    result = prime * result + [self.sharedFolderTransferOwnershipDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    result = prime * result + [self.sharedFolderUnmountDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    result = prime * result + [self.sharedLinkAddExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    result = prime * result + [self.sharedLinkChangeExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    result = prime * result + [self.sharedLinkChangeVisibilityDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    result = prime * result + [self.sharedLinkCopyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    result = prime * result + [self.sharedLinkCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    result = prime * result + [self.sharedLinkDisableDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    result = prime * result + [self.sharedLinkDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    result = prime * result + [self.sharedLinkRemoveExpiryDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails:
    result = prime * result + [self.sharedLinkSettingsAddExpirationDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails:
    result = prime * result + [self.sharedLinkSettingsAddPasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails:
    result = prime * result + [self.sharedLinkSettingsAllowDownloadDisabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails:
    result = prime * result + [self.sharedLinkSettingsAllowDownloadEnabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails:
    result = prime * result + [self.sharedLinkSettingsChangeAudienceDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails:
    result = prime * result + [self.sharedLinkSettingsChangeExpirationDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails:
    result = prime * result + [self.sharedLinkSettingsChangePasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails:
    result = prime * result + [self.sharedLinkSettingsRemoveExpirationDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails:
    result = prime * result + [self.sharedLinkSettingsRemovePasswordDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    result = prime * result + [self.sharedLinkShareDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    result = prime * result + [self.sharedLinkViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    result = prime * result + [self.sharedNoteOpenedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails:
    result = prime * result + [self.shmodelDisableDownloadsDetails hash];
    break;
  case DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails:
    result = prime * result + [self.shmodelEnableDownloadsDetails hash];
    break;
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    result = prime * result + [self.shmodelGroupShareDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    result = prime * result + [self.showcaseAccessGrantedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    result = prime * result + [self.showcaseAddMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    result = prime * result + [self.showcaseArchivedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    result = prime * result + [self.showcaseCreatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    result = prime * result + [self.showcaseDeleteCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    result = prime * result + [self.showcaseEditedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    result = prime * result + [self.showcaseEditCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    result = prime * result + [self.showcaseFileAddedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    result = prime * result + [self.showcaseFileDownloadDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    result = prime * result + [self.showcaseFileRemovedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    result = prime * result + [self.showcaseFileViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    result = prime * result + [self.showcasePermanentlyDeletedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    result = prime * result + [self.showcasePostCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    result = prime * result + [self.showcaseRemoveMemberDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    result = prime * result + [self.showcaseRenamedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    result = prime * result + [self.showcaseRequestAccessDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    result = prime * result + [self.showcaseResolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    result = prime * result + [self.showcaseRestoredDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    result = prime * result + [self.showcaseTrashedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    result = prime * result + [self.showcaseTrashedDeprecatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    result = prime * result + [self.showcaseUnresolveCommentDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    result = prime * result + [self.showcaseUntrashedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    result = prime * result + [self.showcaseUntrashedDeprecatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    result = prime * result + [self.showcaseViewDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    result = prime * result + [self.ssoAddCertDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    result = prime * result + [self.ssoAddLoginUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    result = prime * result + [self.ssoAddLogoutUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    result = prime * result + [self.ssoChangeCertDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    result = prime * result + [self.ssoChangeLoginUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    result = prime * result + [self.ssoChangeLogoutUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    result = prime * result + [self.ssoChangeSamlIdentityModeDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    result = prime * result + [self.ssoRemoveCertDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    result = prime * result + [self.ssoRemoveLoginUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    result = prime * result + [self.ssoRemoveLogoutUrlDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    result = prime * result + [self.teamFolderChangeStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    result = prime * result + [self.teamFolderCreateDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    result = prime * result + [self.teamFolderDowngradeDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    result = prime * result + [self.teamFolderPermanentlyDeleteDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    result = prime * result + [self.teamFolderRenameDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    result = prime * result + [self.teamSelectiveSyncSettingsChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    result = prime * result + [self.accountCaptureChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails:
    result = prime * result + [self.adminEmailRemindersChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    result = prime * result + [self.allowDownloadDisabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    result = prime * result + [self.allowDownloadEnabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsAppPermissionsChangedDetails:
    result = prime * result + [self.appPermissionsChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails:
    result = prime * result + [self.cameraUploadsPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails:
    result = prime * result + [self.captureTranscriptPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsClassificationChangePolicyDetails:
    result = prime * result + [self.classificationChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails:
    result = prime * result + [self.computerBackupPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails:
    result = prime * result + [self.contentAdministrationPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    result = prime * result + [self.dataPlacementRestrictionSatisfyPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails:
    result = prime * result + [self.deviceApprovalsAddExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeDesktopPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    result = prime * result + [self.deviceApprovalsChangeMobilePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    result = prime * result + [self.deviceApprovalsChangeOverageActionDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    result = prime * result + [self.deviceApprovalsChangeUnlinkActionDetails hash];
    break;
  case DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails:
    result = prime * result + [self.deviceApprovalsRemoveExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    result = prime * result + [self.directoryRestrictionsAddMembersDetails hash];
    break;
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    result = prime * result + [self.directoryRestrictionsRemoveMembersDetails hash];
    break;
  case DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails:
    result = prime * result + [self.dropboxPasswordsPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails:
    result = prime * result + [self.emailIngestPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    result = prime * result + [self.emmAddExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    result = prime * result + [self.emmChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    result = prime * result + [self.emmRemoveExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    result = prime * result + [self.extendedVersionHistoryChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails:
    result = prime * result + [self.externalDriveBackupPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    result = prime * result + [self.fileCommentsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails:
    result = prime * result + [self.fileLockingPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    result = prime * result + [self.fileRequestsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    result = prime * result + [self.fileRequestsEmailsEnabledDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    result = prime * result + [self.fileRequestsEmailsRestrictedToTeamOnlyDetails hash];
    break;
  case DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails:
    result = prime * result + [self.fileTransfersPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    result = prime * result + [self.googleSsoChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    result = prime * result + [self.groupUserManagementChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails:
    result = prime * result + [self.integrationPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails:
    result = prime * result + [self.inviteAcceptanceEmailPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    result = prime * result + [self.memberRequestsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails:
    result = prime * result + [self.memberSendInvitePolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsAddExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    result = prime * result + [self.memberSpaceLimitsChangeCapsTypePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    result = prime * result + [self.memberSpaceLimitsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    result = prime * result + [self.memberSpaceLimitsRemoveExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    result = prime * result + [self.memberSuggestionsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    result = prime * result + [self.microsoftOfficeAddinChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    result = prime * result + [self.networkControlChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    result = prime * result + [self.paperChangeDeploymentPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    result = prime * result + [self.paperChangeMemberLinkPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    result = prime * result + [self.paperChangeMemberPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    result = prime * result + [self.paperChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails:
    result = prime * result + [self.paperDefaultFolderPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails:
    result = prime * result + [self.paperDesktopPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    result = prime * result + [self.paperEnabledUsersGroupAdditionDetails hash];
    break;
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    result = prime * result + [self.paperEnabledUsersGroupRemovalDetails hash];
    break;
  case DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails:
    result = prime * result + [self.passwordStrengthRequirementsChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    result = prime * result + [self.permanentDeleteChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails:
    result = prime * result + [self.resellerSupportChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsRewindPolicyChangedDetails:
    result = prime * result + [self.rewindPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails:
    result = prime * result + [self.sendForSignaturePolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    result = prime * result + [self.sharingChangeFolderJoinPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails:
    result = prime * result + [self.sharingChangeLinkAllowChangeExpirationPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails:
    result = prime * result + [self.sharingChangeLinkDefaultExpirationPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails:
    result = prime * result + [self.sharingChangeLinkEnforcePasswordPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    result = prime * result + [self.sharingChangeLinkPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    result = prime * result + [self.sharingChangeMemberPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    result = prime * result + [self.showcaseChangeDownloadPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    result = prime * result + [self.showcaseChangeEnabledPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    result = prime * result + [self.showcaseChangeExternalSharingPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails:
    result = prime * result + [self.smarterSmartSyncPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    result = prime * result + [self.smartSyncChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    result = prime * result + [self.smartSyncNotOptOutDetails hash];
    break;
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    result = prime * result + [self.smartSyncOptOutDetails hash];
    break;
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    result = prime * result + [self.ssoChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails:
    result = prime * result + [self.teamBrandingPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails:
    result = prime * result + [self.teamExtensionsPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails:
    result = prime * result + [self.teamSelectiveSyncPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails:
    result = prime * result + [self.teamSharingWhitelistSubjectsChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaAddExceptionDetails:
    result = prime * result + [self.tfaAddExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    result = prime * result + [self.tfaChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaRemoveExceptionDetails:
    result = prime * result + [self.tfaRemoveExceptionDetails hash];
    break;
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    result = prime * result + [self.twoAccountChangePolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails:
    result = prime * result + [self.viewerInfoPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails:
    result = prime * result + [self.watermarkingPolicyChangedDetails hash];
    break;
  case DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails:
    result = prime * result + [self.webSessionsChangeActiveSessionLimitDetails hash];
    break;
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeFixedLengthPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    result = prime * result + [self.webSessionsChangeIdleLengthPolicyDetails hash];
    break;
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails:
    result = prime * result + [self.dataResidencyMigrationRequestSuccessfulDetails hash];
    break;
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails:
    result = prime * result + [self.dataResidencyMigrationRequestUnsuccessfulDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    result = prime * result + [self.teamMergeFromDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    result = prime * result + [self.teamMergeToDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails:
    result = prime * result + [self.teamProfileAddBackgroundDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    result = prime * result + [self.teamProfileAddLogoDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails:
    result = prime * result + [self.teamProfileChangeBackgroundDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    result = prime * result + [self.teamProfileChangeDefaultLanguageDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    result = prime * result + [self.teamProfileChangeLogoDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    result = prime * result + [self.teamProfileChangeNameDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails:
    result = prime * result + [self.teamProfileRemoveBackgroundDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    result = prime * result + [self.teamProfileRemoveLogoDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    result = prime * result + [self.tfaAddBackupPhoneDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    result = prime * result + [self.tfaAddSecurityKeyDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    result = prime * result + [self.tfaChangeBackupPhoneDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    result = prime * result + [self.tfaChangeStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    result = prime * result + [self.tfaRemoveBackupPhoneDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    result = prime * result + [self.tfaRemoveSecurityKeyDetails hash];
    break;
  case DBTEAMLOGEventDetailsTfaResetDetails:
    result = prime * result + [self.tfaResetDetails hash];
    break;
  case DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails:
    result = prime * result + [self.changedEnterpriseAdminRoleDetails hash];
    break;
  case DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails:
    result = prime * result + [self.changedEnterpriseConnectedTeamStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails:
    result = prime * result + [self.endedEnterpriseAdminSessionDetails hash];
    break;
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails:
    result = prime * result + [self.endedEnterpriseAdminSessionDeprecatedDetails hash];
    break;
  case DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails:
    result = prime * result + [self.enterpriseSettingsLockingDetails hash];
    break;
  case DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails:
    result = prime * result + [self.guestAdminChangeStatusDetails hash];
    break;
  case DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails:
    result = prime * result + [self.startedEnterpriseAdminSessionDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails:
    result = prime * result + [self.teamMergeRequestAcceptedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestAcceptedShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestAcceptedShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails:
    result = prime * result + [self.teamMergeRequestAutoCanceledDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails:
    result = prime * result + [self.teamMergeRequestCanceledDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestCanceledShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestCanceledShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails:
    result = prime * result + [self.teamMergeRequestExpiredDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestExpiredShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestExpiredShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestRejectedShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestRejectedShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails:
    result = prime * result + [self.teamMergeRequestReminderDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestReminderShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestReminderShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails:
    result = prime * result + [self.teamMergeRequestRevokedDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails:
    result = prime * result + [self.teamMergeRequestSentShownToPrimaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails:
    result = prime * result + [self.teamMergeRequestSentShownToSecondaryTeamDetails hash];
    break;
  case DBTEAMLOGEventDetailsMissingDetails:
    result = prime * result + [self.missingDetails hash];
    break;
  case DBTEAMLOGEventDetailsOther:
    result = prime * result + [[self tagName] hash];
    break;
  }

  return prime * result;
}

#pragma mark - Equality method

- (BOOL)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!other || ![other isKindOfClass:[self class]]) {
    return NO;
  }
  return [self isEqualToEventDetails:other];
}

- (BOOL)isEqualToEventDetails:(DBTEAMLOGEventDetails *)anEventDetails {
  if (self == anEventDetails) {
    return YES;
  }
  if (self.tag != anEventDetails.tag) {
    return NO;
  }
  switch (_tag) {
  case DBTEAMLOGEventDetailsAdminAlertingAlertStateChangedDetails:
    return [self.adminAlertingAlertStateChangedDetails isEqual:anEventDetails.adminAlertingAlertStateChangedDetails];
  case DBTEAMLOGEventDetailsAdminAlertingChangedAlertConfigDetails:
    return [self.adminAlertingChangedAlertConfigDetails isEqual:anEventDetails.adminAlertingChangedAlertConfigDetails];
  case DBTEAMLOGEventDetailsAdminAlertingTriggeredAlertDetails:
    return [self.adminAlertingTriggeredAlertDetails isEqual:anEventDetails.adminAlertingTriggeredAlertDetails];
  case DBTEAMLOGEventDetailsAppBlockedByPermissionsDetails:
    return [self.appBlockedByPermissionsDetails isEqual:anEventDetails.appBlockedByPermissionsDetails];
  case DBTEAMLOGEventDetailsAppLinkTeamDetails:
    return [self.appLinkTeamDetails isEqual:anEventDetails.appLinkTeamDetails];
  case DBTEAMLOGEventDetailsAppLinkUserDetails:
    return [self.appLinkUserDetails isEqual:anEventDetails.appLinkUserDetails];
  case DBTEAMLOGEventDetailsAppUnlinkTeamDetails:
    return [self.appUnlinkTeamDetails isEqual:anEventDetails.appUnlinkTeamDetails];
  case DBTEAMLOGEventDetailsAppUnlinkUserDetails:
    return [self.appUnlinkUserDetails isEqual:anEventDetails.appUnlinkUserDetails];
  case DBTEAMLOGEventDetailsIntegrationConnectedDetails:
    return [self.integrationConnectedDetails isEqual:anEventDetails.integrationConnectedDetails];
  case DBTEAMLOGEventDetailsIntegrationDisconnectedDetails:
    return [self.integrationDisconnectedDetails isEqual:anEventDetails.integrationDisconnectedDetails];
  case DBTEAMLOGEventDetailsFileAddCommentDetails:
    return [self.fileAddCommentDetails isEqual:anEventDetails.fileAddCommentDetails];
  case DBTEAMLOGEventDetailsFileChangeCommentSubscriptionDetails:
    return [self.fileChangeCommentSubscriptionDetails isEqual:anEventDetails.fileChangeCommentSubscriptionDetails];
  case DBTEAMLOGEventDetailsFileDeleteCommentDetails:
    return [self.fileDeleteCommentDetails isEqual:anEventDetails.fileDeleteCommentDetails];
  case DBTEAMLOGEventDetailsFileEditCommentDetails:
    return [self.fileEditCommentDetails isEqual:anEventDetails.fileEditCommentDetails];
  case DBTEAMLOGEventDetailsFileLikeCommentDetails:
    return [self.fileLikeCommentDetails isEqual:anEventDetails.fileLikeCommentDetails];
  case DBTEAMLOGEventDetailsFileResolveCommentDetails:
    return [self.fileResolveCommentDetails isEqual:anEventDetails.fileResolveCommentDetails];
  case DBTEAMLOGEventDetailsFileUnlikeCommentDetails:
    return [self.fileUnlikeCommentDetails isEqual:anEventDetails.fileUnlikeCommentDetails];
  case DBTEAMLOGEventDetailsFileUnresolveCommentDetails:
    return [self.fileUnresolveCommentDetails isEqual:anEventDetails.fileUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyAddFoldersDetails:
    return [self.governancePolicyAddFoldersDetails isEqual:anEventDetails.governancePolicyAddFoldersDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyAddFolderFailedDetails:
    return [self.governancePolicyAddFolderFailedDetails isEqual:anEventDetails.governancePolicyAddFolderFailedDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyContentDisposedDetails:
    return [self.governancePolicyContentDisposedDetails isEqual:anEventDetails.governancePolicyContentDisposedDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyCreateDetails:
    return [self.governancePolicyCreateDetails isEqual:anEventDetails.governancePolicyCreateDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyDeleteDetails:
    return [self.governancePolicyDeleteDetails isEqual:anEventDetails.governancePolicyDeleteDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyEditDetailsDetails:
    return [self.governancePolicyEditDetailsDetails isEqual:anEventDetails.governancePolicyEditDetailsDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyEditDurationDetails:
    return [self.governancePolicyEditDurationDetails isEqual:anEventDetails.governancePolicyEditDurationDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyExportCreatedDetails:
    return [self.governancePolicyExportCreatedDetails isEqual:anEventDetails.governancePolicyExportCreatedDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyExportRemovedDetails:
    return [self.governancePolicyExportRemovedDetails isEqual:anEventDetails.governancePolicyExportRemovedDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyRemoveFoldersDetails:
    return [self.governancePolicyRemoveFoldersDetails isEqual:anEventDetails.governancePolicyRemoveFoldersDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyReportCreatedDetails:
    return [self.governancePolicyReportCreatedDetails isEqual:anEventDetails.governancePolicyReportCreatedDetails];
  case DBTEAMLOGEventDetailsGovernancePolicyZipPartDownloadedDetails:
    return
        [self.governancePolicyZipPartDownloadedDetails isEqual:anEventDetails.governancePolicyZipPartDownloadedDetails];
  case DBTEAMLOGEventDetailsLegalHoldsActivateAHoldDetails:
    return [self.legalHoldsActivateAHoldDetails isEqual:anEventDetails.legalHoldsActivateAHoldDetails];
  case DBTEAMLOGEventDetailsLegalHoldsAddMembersDetails:
    return [self.legalHoldsAddMembersDetails isEqual:anEventDetails.legalHoldsAddMembersDetails];
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldDetailsDetails:
    return [self.legalHoldsChangeHoldDetailsDetails isEqual:anEventDetails.legalHoldsChangeHoldDetailsDetails];
  case DBTEAMLOGEventDetailsLegalHoldsChangeHoldNameDetails:
    return [self.legalHoldsChangeHoldNameDetails isEqual:anEventDetails.legalHoldsChangeHoldNameDetails];
  case DBTEAMLOGEventDetailsLegalHoldsExportAHoldDetails:
    return [self.legalHoldsExportAHoldDetails isEqual:anEventDetails.legalHoldsExportAHoldDetails];
  case DBTEAMLOGEventDetailsLegalHoldsExportCancelledDetails:
    return [self.legalHoldsExportCancelledDetails isEqual:anEventDetails.legalHoldsExportCancelledDetails];
  case DBTEAMLOGEventDetailsLegalHoldsExportDownloadedDetails:
    return [self.legalHoldsExportDownloadedDetails isEqual:anEventDetails.legalHoldsExportDownloadedDetails];
  case DBTEAMLOGEventDetailsLegalHoldsExportRemovedDetails:
    return [self.legalHoldsExportRemovedDetails isEqual:anEventDetails.legalHoldsExportRemovedDetails];
  case DBTEAMLOGEventDetailsLegalHoldsReleaseAHoldDetails:
    return [self.legalHoldsReleaseAHoldDetails isEqual:anEventDetails.legalHoldsReleaseAHoldDetails];
  case DBTEAMLOGEventDetailsLegalHoldsRemoveMembersDetails:
    return [self.legalHoldsRemoveMembersDetails isEqual:anEventDetails.legalHoldsRemoveMembersDetails];
  case DBTEAMLOGEventDetailsLegalHoldsReportAHoldDetails:
    return [self.legalHoldsReportAHoldDetails isEqual:anEventDetails.legalHoldsReportAHoldDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpDesktopDetails:
    return [self.deviceChangeIpDesktopDetails isEqual:anEventDetails.deviceChangeIpDesktopDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpMobileDetails:
    return [self.deviceChangeIpMobileDetails isEqual:anEventDetails.deviceChangeIpMobileDetails];
  case DBTEAMLOGEventDetailsDeviceChangeIpWebDetails:
    return [self.deviceChangeIpWebDetails isEqual:anEventDetails.deviceChangeIpWebDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkFailDetails:
    return [self.deviceDeleteOnUnlinkFailDetails isEqual:anEventDetails.deviceDeleteOnUnlinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceDeleteOnUnlinkSuccessDetails:
    return [self.deviceDeleteOnUnlinkSuccessDetails isEqual:anEventDetails.deviceDeleteOnUnlinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceLinkFailDetails:
    return [self.deviceLinkFailDetails isEqual:anEventDetails.deviceLinkFailDetails];
  case DBTEAMLOGEventDetailsDeviceLinkSuccessDetails:
    return [self.deviceLinkSuccessDetails isEqual:anEventDetails.deviceLinkSuccessDetails];
  case DBTEAMLOGEventDetailsDeviceManagementDisabledDetails:
    return [self.deviceManagementDisabledDetails isEqual:anEventDetails.deviceManagementDisabledDetails];
  case DBTEAMLOGEventDetailsDeviceManagementEnabledDetails:
    return [self.deviceManagementEnabledDetails isEqual:anEventDetails.deviceManagementEnabledDetails];
  case DBTEAMLOGEventDetailsDeviceSyncBackupStatusChangedDetails:
    return [self.deviceSyncBackupStatusChangedDetails isEqual:anEventDetails.deviceSyncBackupStatusChangedDetails];
  case DBTEAMLOGEventDetailsDeviceUnlinkDetails:
    return [self.deviceUnlinkDetails isEqual:anEventDetails.deviceUnlinkDetails];
  case DBTEAMLOGEventDetailsDropboxPasswordsExportedDetails:
    return [self.dropboxPasswordsExportedDetails isEqual:anEventDetails.dropboxPasswordsExportedDetails];
  case DBTEAMLOGEventDetailsDropboxPasswordsNewDeviceEnrolledDetails:
    return
        [self.dropboxPasswordsNewDeviceEnrolledDetails isEqual:anEventDetails.dropboxPasswordsNewDeviceEnrolledDetails];
  case DBTEAMLOGEventDetailsEmmRefreshAuthTokenDetails:
    return [self.emmRefreshAuthTokenDetails isEqual:anEventDetails.emmRefreshAuthTokenDetails];
  case DBTEAMLOGEventDetailsExternalDriveBackupEligibilityStatusCheckedDetails:
    return [self.externalDriveBackupEligibilityStatusCheckedDetails
        isEqual:anEventDetails.externalDriveBackupEligibilityStatusCheckedDetails];
  case DBTEAMLOGEventDetailsExternalDriveBackupStatusChangedDetails:
    return
        [self.externalDriveBackupStatusChangedDetails isEqual:anEventDetails.externalDriveBackupStatusChangedDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangeAvailabilityDetails:
    return
        [self.accountCaptureChangeAvailabilityDetails isEqual:anEventDetails.accountCaptureChangeAvailabilityDetails];
  case DBTEAMLOGEventDetailsAccountCaptureMigrateAccountDetails:
    return [self.accountCaptureMigrateAccountDetails isEqual:anEventDetails.accountCaptureMigrateAccountDetails];
  case DBTEAMLOGEventDetailsAccountCaptureNotificationEmailsSentDetails:
    return [self.accountCaptureNotificationEmailsSentDetails
        isEqual:anEventDetails.accountCaptureNotificationEmailsSentDetails];
  case DBTEAMLOGEventDetailsAccountCaptureRelinquishAccountDetails:
    return [self.accountCaptureRelinquishAccountDetails isEqual:anEventDetails.accountCaptureRelinquishAccountDetails];
  case DBTEAMLOGEventDetailsDisabledDomainInvitesDetails:
    return [self.disabledDomainInvitesDetails isEqual:anEventDetails.disabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsDomainInvitesApproveRequestToJoinTeamDetails:
    return [self.domainInvitesApproveRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesApproveRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesDeclineRequestToJoinTeamDetails:
    return [self.domainInvitesDeclineRequestToJoinTeamDetails
        isEqual:anEventDetails.domainInvitesDeclineRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesEmailExistingUsersDetails:
    return [self.domainInvitesEmailExistingUsersDetails isEqual:anEventDetails.domainInvitesEmailExistingUsersDetails];
  case DBTEAMLOGEventDetailsDomainInvitesRequestToJoinTeamDetails:
    return [self.domainInvitesRequestToJoinTeamDetails isEqual:anEventDetails.domainInvitesRequestToJoinTeamDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToNoDetails:
    return [self.domainInvitesSetInviteNewUserPrefToNoDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToNoDetails];
  case DBTEAMLOGEventDetailsDomainInvitesSetInviteNewUserPrefToYesDetails:
    return [self.domainInvitesSetInviteNewUserPrefToYesDetails
        isEqual:anEventDetails.domainInvitesSetInviteNewUserPrefToYesDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainFailDetails:
    return [self.domainVerificationAddDomainFailDetails isEqual:anEventDetails.domainVerificationAddDomainFailDetails];
  case DBTEAMLOGEventDetailsDomainVerificationAddDomainSuccessDetails:
    return [self.domainVerificationAddDomainSuccessDetails
        isEqual:anEventDetails.domainVerificationAddDomainSuccessDetails];
  case DBTEAMLOGEventDetailsDomainVerificationRemoveDomainDetails:
    return [self.domainVerificationRemoveDomainDetails isEqual:anEventDetails.domainVerificationRemoveDomainDetails];
  case DBTEAMLOGEventDetailsEnabledDomainInvitesDetails:
    return [self.enabledDomainInvitesDetails isEqual:anEventDetails.enabledDomainInvitesDetails];
  case DBTEAMLOGEventDetailsApplyNamingConventionDetails:
    return [self.applyNamingConventionDetails isEqual:anEventDetails.applyNamingConventionDetails];
  case DBTEAMLOGEventDetailsCreateFolderDetails:
    return [self.createFolderDetails isEqual:anEventDetails.createFolderDetails];
  case DBTEAMLOGEventDetailsFileAddDetails:
    return [self.fileAddDetails isEqual:anEventDetails.fileAddDetails];
  case DBTEAMLOGEventDetailsFileCopyDetails:
    return [self.fileCopyDetails isEqual:anEventDetails.fileCopyDetails];
  case DBTEAMLOGEventDetailsFileDeleteDetails:
    return [self.fileDeleteDetails isEqual:anEventDetails.fileDeleteDetails];
  case DBTEAMLOGEventDetailsFileDownloadDetails:
    return [self.fileDownloadDetails isEqual:anEventDetails.fileDownloadDetails];
  case DBTEAMLOGEventDetailsFileEditDetails:
    return [self.fileEditDetails isEqual:anEventDetails.fileEditDetails];
  case DBTEAMLOGEventDetailsFileGetCopyReferenceDetails:
    return [self.fileGetCopyReferenceDetails isEqual:anEventDetails.fileGetCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFileLockingLockStatusChangedDetails:
    return [self.fileLockingLockStatusChangedDetails isEqual:anEventDetails.fileLockingLockStatusChangedDetails];
  case DBTEAMLOGEventDetailsFileMoveDetails:
    return [self.fileMoveDetails isEqual:anEventDetails.fileMoveDetails];
  case DBTEAMLOGEventDetailsFilePermanentlyDeleteDetails:
    return [self.filePermanentlyDeleteDetails isEqual:anEventDetails.filePermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsFilePreviewDetails:
    return [self.filePreviewDetails isEqual:anEventDetails.filePreviewDetails];
  case DBTEAMLOGEventDetailsFileRenameDetails:
    return [self.fileRenameDetails isEqual:anEventDetails.fileRenameDetails];
  case DBTEAMLOGEventDetailsFileRestoreDetails:
    return [self.fileRestoreDetails isEqual:anEventDetails.fileRestoreDetails];
  case DBTEAMLOGEventDetailsFileRevertDetails:
    return [self.fileRevertDetails isEqual:anEventDetails.fileRevertDetails];
  case DBTEAMLOGEventDetailsFileRollbackChangesDetails:
    return [self.fileRollbackChangesDetails isEqual:anEventDetails.fileRollbackChangesDetails];
  case DBTEAMLOGEventDetailsFileSaveCopyReferenceDetails:
    return [self.fileSaveCopyReferenceDetails isEqual:anEventDetails.fileSaveCopyReferenceDetails];
  case DBTEAMLOGEventDetailsFolderOverviewDescriptionChangedDetails:
    return
        [self.folderOverviewDescriptionChangedDetails isEqual:anEventDetails.folderOverviewDescriptionChangedDetails];
  case DBTEAMLOGEventDetailsFolderOverviewItemPinnedDetails:
    return [self.folderOverviewItemPinnedDetails isEqual:anEventDetails.folderOverviewItemPinnedDetails];
  case DBTEAMLOGEventDetailsFolderOverviewItemUnpinnedDetails:
    return [self.folderOverviewItemUnpinnedDetails isEqual:anEventDetails.folderOverviewItemUnpinnedDetails];
  case DBTEAMLOGEventDetailsObjectLabelAddedDetails:
    return [self.objectLabelAddedDetails isEqual:anEventDetails.objectLabelAddedDetails];
  case DBTEAMLOGEventDetailsObjectLabelRemovedDetails:
    return [self.objectLabelRemovedDetails isEqual:anEventDetails.objectLabelRemovedDetails];
  case DBTEAMLOGEventDetailsObjectLabelUpdatedValueDetails:
    return [self.objectLabelUpdatedValueDetails isEqual:anEventDetails.objectLabelUpdatedValueDetails];
  case DBTEAMLOGEventDetailsOrganizeFolderWithTidyDetails:
    return [self.organizeFolderWithTidyDetails isEqual:anEventDetails.organizeFolderWithTidyDetails];
  case DBTEAMLOGEventDetailsRewindFolderDetails:
    return [self.rewindFolderDetails isEqual:anEventDetails.rewindFolderDetails];
  case DBTEAMLOGEventDetailsUndoNamingConventionDetails:
    return [self.undoNamingConventionDetails isEqual:anEventDetails.undoNamingConventionDetails];
  case DBTEAMLOGEventDetailsUndoOrganizeFolderWithTidyDetails:
    return [self.undoOrganizeFolderWithTidyDetails isEqual:anEventDetails.undoOrganizeFolderWithTidyDetails];
  case DBTEAMLOGEventDetailsUserTagsAddedDetails:
    return [self.userTagsAddedDetails isEqual:anEventDetails.userTagsAddedDetails];
  case DBTEAMLOGEventDetailsUserTagsRemovedDetails:
    return [self.userTagsRemovedDetails isEqual:anEventDetails.userTagsRemovedDetails];
  case DBTEAMLOGEventDetailsEmailIngestReceiveFileDetails:
    return [self.emailIngestReceiveFileDetails isEqual:anEventDetails.emailIngestReceiveFileDetails];
  case DBTEAMLOGEventDetailsFileRequestChangeDetails:
    return [self.fileRequestChangeDetails isEqual:anEventDetails.fileRequestChangeDetails];
  case DBTEAMLOGEventDetailsFileRequestCloseDetails:
    return [self.fileRequestCloseDetails isEqual:anEventDetails.fileRequestCloseDetails];
  case DBTEAMLOGEventDetailsFileRequestCreateDetails:
    return [self.fileRequestCreateDetails isEqual:anEventDetails.fileRequestCreateDetails];
  case DBTEAMLOGEventDetailsFileRequestDeleteDetails:
    return [self.fileRequestDeleteDetails isEqual:anEventDetails.fileRequestDeleteDetails];
  case DBTEAMLOGEventDetailsFileRequestReceiveFileDetails:
    return [self.fileRequestReceiveFileDetails isEqual:anEventDetails.fileRequestReceiveFileDetails];
  case DBTEAMLOGEventDetailsGroupAddExternalIdDetails:
    return [self.groupAddExternalIdDetails isEqual:anEventDetails.groupAddExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupAddMemberDetails:
    return [self.groupAddMemberDetails isEqual:anEventDetails.groupAddMemberDetails];
  case DBTEAMLOGEventDetailsGroupChangeExternalIdDetails:
    return [self.groupChangeExternalIdDetails isEqual:anEventDetails.groupChangeExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupChangeManagementTypeDetails:
    return [self.groupChangeManagementTypeDetails isEqual:anEventDetails.groupChangeManagementTypeDetails];
  case DBTEAMLOGEventDetailsGroupChangeMemberRoleDetails:
    return [self.groupChangeMemberRoleDetails isEqual:anEventDetails.groupChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsGroupCreateDetails:
    return [self.groupCreateDetails isEqual:anEventDetails.groupCreateDetails];
  case DBTEAMLOGEventDetailsGroupDeleteDetails:
    return [self.groupDeleteDetails isEqual:anEventDetails.groupDeleteDetails];
  case DBTEAMLOGEventDetailsGroupDescriptionUpdatedDetails:
    return [self.groupDescriptionUpdatedDetails isEqual:anEventDetails.groupDescriptionUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupJoinPolicyUpdatedDetails:
    return [self.groupJoinPolicyUpdatedDetails isEqual:anEventDetails.groupJoinPolicyUpdatedDetails];
  case DBTEAMLOGEventDetailsGroupMovedDetails:
    return [self.groupMovedDetails isEqual:anEventDetails.groupMovedDetails];
  case DBTEAMLOGEventDetailsGroupRemoveExternalIdDetails:
    return [self.groupRemoveExternalIdDetails isEqual:anEventDetails.groupRemoveExternalIdDetails];
  case DBTEAMLOGEventDetailsGroupRemoveMemberDetails:
    return [self.groupRemoveMemberDetails isEqual:anEventDetails.groupRemoveMemberDetails];
  case DBTEAMLOGEventDetailsGroupRenameDetails:
    return [self.groupRenameDetails isEqual:anEventDetails.groupRenameDetails];
  case DBTEAMLOGEventDetailsAccountLockOrUnlockedDetails:
    return [self.accountLockOrUnlockedDetails isEqual:anEventDetails.accountLockOrUnlockedDetails];
  case DBTEAMLOGEventDetailsEmmErrorDetails:
    return [self.emmErrorDetails isEqual:anEventDetails.emmErrorDetails];
  case DBTEAMLOGEventDetailsGuestAdminSignedInViaTrustedTeamsDetails:
    return
        [self.guestAdminSignedInViaTrustedTeamsDetails isEqual:anEventDetails.guestAdminSignedInViaTrustedTeamsDetails];
  case DBTEAMLOGEventDetailsGuestAdminSignedOutViaTrustedTeamsDetails:
    return [self.guestAdminSignedOutViaTrustedTeamsDetails
        isEqual:anEventDetails.guestAdminSignedOutViaTrustedTeamsDetails];
  case DBTEAMLOGEventDetailsLoginFailDetails:
    return [self.loginFailDetails isEqual:anEventDetails.loginFailDetails];
  case DBTEAMLOGEventDetailsLoginSuccessDetails:
    return [self.loginSuccessDetails isEqual:anEventDetails.loginSuccessDetails];
  case DBTEAMLOGEventDetailsLogoutDetails:
    return [self.logoutDetails isEqual:anEventDetails.logoutDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionEndDetails:
    return [self.resellerSupportSessionEndDetails isEqual:anEventDetails.resellerSupportSessionEndDetails];
  case DBTEAMLOGEventDetailsResellerSupportSessionStartDetails:
    return [self.resellerSupportSessionStartDetails isEqual:anEventDetails.resellerSupportSessionStartDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionEndDetails:
    return [self.signInAsSessionEndDetails isEqual:anEventDetails.signInAsSessionEndDetails];
  case DBTEAMLOGEventDetailsSignInAsSessionStartDetails:
    return [self.signInAsSessionStartDetails isEqual:anEventDetails.signInAsSessionStartDetails];
  case DBTEAMLOGEventDetailsSsoErrorDetails:
    return [self.ssoErrorDetails isEqual:anEventDetails.ssoErrorDetails];
  case DBTEAMLOGEventDetailsCreateTeamInviteLinkDetails:
    return [self.createTeamInviteLinkDetails isEqual:anEventDetails.createTeamInviteLinkDetails];
  case DBTEAMLOGEventDetailsDeleteTeamInviteLinkDetails:
    return [self.deleteTeamInviteLinkDetails isEqual:anEventDetails.deleteTeamInviteLinkDetails];
  case DBTEAMLOGEventDetailsMemberAddExternalIdDetails:
    return [self.memberAddExternalIdDetails isEqual:anEventDetails.memberAddExternalIdDetails];
  case DBTEAMLOGEventDetailsMemberAddNameDetails:
    return [self.memberAddNameDetails isEqual:anEventDetails.memberAddNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeAdminRoleDetails:
    return [self.memberChangeAdminRoleDetails isEqual:anEventDetails.memberChangeAdminRoleDetails];
  case DBTEAMLOGEventDetailsMemberChangeEmailDetails:
    return [self.memberChangeEmailDetails isEqual:anEventDetails.memberChangeEmailDetails];
  case DBTEAMLOGEventDetailsMemberChangeExternalIdDetails:
    return [self.memberChangeExternalIdDetails isEqual:anEventDetails.memberChangeExternalIdDetails];
  case DBTEAMLOGEventDetailsMemberChangeMembershipTypeDetails:
    return [self.memberChangeMembershipTypeDetails isEqual:anEventDetails.memberChangeMembershipTypeDetails];
  case DBTEAMLOGEventDetailsMemberChangeNameDetails:
    return [self.memberChangeNameDetails isEqual:anEventDetails.memberChangeNameDetails];
  case DBTEAMLOGEventDetailsMemberChangeResellerRoleDetails:
    return [self.memberChangeResellerRoleDetails isEqual:anEventDetails.memberChangeResellerRoleDetails];
  case DBTEAMLOGEventDetailsMemberChangeStatusDetails:
    return [self.memberChangeStatusDetails isEqual:anEventDetails.memberChangeStatusDetails];
  case DBTEAMLOGEventDetailsMemberDeleteManualContactsDetails:
    return [self.memberDeleteManualContactsDetails isEqual:anEventDetails.memberDeleteManualContactsDetails];
  case DBTEAMLOGEventDetailsMemberDeleteProfilePhotoDetails:
    return [self.memberDeleteProfilePhotoDetails isEqual:anEventDetails.memberDeleteProfilePhotoDetails];
  case DBTEAMLOGEventDetailsMemberPermanentlyDeleteAccountContentsDetails:
    return [self.memberPermanentlyDeleteAccountContentsDetails
        isEqual:anEventDetails.memberPermanentlyDeleteAccountContentsDetails];
  case DBTEAMLOGEventDetailsMemberRemoveExternalIdDetails:
    return [self.memberRemoveExternalIdDetails isEqual:anEventDetails.memberRemoveExternalIdDetails];
  case DBTEAMLOGEventDetailsMemberSetProfilePhotoDetails:
    return [self.memberSetProfilePhotoDetails isEqual:anEventDetails.memberSetProfilePhotoDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddCustomQuotaDetails:
    return [self.memberSpaceLimitsAddCustomQuotaDetails isEqual:anEventDetails.memberSpaceLimitsAddCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCustomQuotaDetails:
    return [self.memberSpaceLimitsChangeCustomQuotaDetails
        isEqual:anEventDetails.memberSpaceLimitsChangeCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeStatusDetails:
    return [self.memberSpaceLimitsChangeStatusDetails isEqual:anEventDetails.memberSpaceLimitsChangeStatusDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveCustomQuotaDetails:
    return [self.memberSpaceLimitsRemoveCustomQuotaDetails
        isEqual:anEventDetails.memberSpaceLimitsRemoveCustomQuotaDetails];
  case DBTEAMLOGEventDetailsMemberSuggestDetails:
    return [self.memberSuggestDetails isEqual:anEventDetails.memberSuggestDetails];
  case DBTEAMLOGEventDetailsMemberTransferAccountContentsDetails:
    return [self.memberTransferAccountContentsDetails isEqual:anEventDetails.memberTransferAccountContentsDetails];
  case DBTEAMLOGEventDetailsPendingSecondaryEmailAddedDetails:
    return [self.pendingSecondaryEmailAddedDetails isEqual:anEventDetails.pendingSecondaryEmailAddedDetails];
  case DBTEAMLOGEventDetailsSecondaryEmailDeletedDetails:
    return [self.secondaryEmailDeletedDetails isEqual:anEventDetails.secondaryEmailDeletedDetails];
  case DBTEAMLOGEventDetailsSecondaryEmailVerifiedDetails:
    return [self.secondaryEmailVerifiedDetails isEqual:anEventDetails.secondaryEmailVerifiedDetails];
  case DBTEAMLOGEventDetailsSecondaryMailsPolicyChangedDetails:
    return [self.secondaryMailsPolicyChangedDetails isEqual:anEventDetails.secondaryMailsPolicyChangedDetails];
  case DBTEAMLOGEventDetailsBinderAddPageDetails:
    return [self.binderAddPageDetails isEqual:anEventDetails.binderAddPageDetails];
  case DBTEAMLOGEventDetailsBinderAddSectionDetails:
    return [self.binderAddSectionDetails isEqual:anEventDetails.binderAddSectionDetails];
  case DBTEAMLOGEventDetailsBinderRemovePageDetails:
    return [self.binderRemovePageDetails isEqual:anEventDetails.binderRemovePageDetails];
  case DBTEAMLOGEventDetailsBinderRemoveSectionDetails:
    return [self.binderRemoveSectionDetails isEqual:anEventDetails.binderRemoveSectionDetails];
  case DBTEAMLOGEventDetailsBinderRenamePageDetails:
    return [self.binderRenamePageDetails isEqual:anEventDetails.binderRenamePageDetails];
  case DBTEAMLOGEventDetailsBinderRenameSectionDetails:
    return [self.binderRenameSectionDetails isEqual:anEventDetails.binderRenameSectionDetails];
  case DBTEAMLOGEventDetailsBinderReorderPageDetails:
    return [self.binderReorderPageDetails isEqual:anEventDetails.binderReorderPageDetails];
  case DBTEAMLOGEventDetailsBinderReorderSectionDetails:
    return [self.binderReorderSectionDetails isEqual:anEventDetails.binderReorderSectionDetails];
  case DBTEAMLOGEventDetailsPaperContentAddMemberDetails:
    return [self.paperContentAddMemberDetails isEqual:anEventDetails.paperContentAddMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentAddToFolderDetails:
    return [self.paperContentAddToFolderDetails isEqual:anEventDetails.paperContentAddToFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentArchiveDetails:
    return [self.paperContentArchiveDetails isEqual:anEventDetails.paperContentArchiveDetails];
  case DBTEAMLOGEventDetailsPaperContentCreateDetails:
    return [self.paperContentCreateDetails isEqual:anEventDetails.paperContentCreateDetails];
  case DBTEAMLOGEventDetailsPaperContentPermanentlyDeleteDetails:
    return [self.paperContentPermanentlyDeleteDetails isEqual:anEventDetails.paperContentPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveFromFolderDetails:
    return [self.paperContentRemoveFromFolderDetails isEqual:anEventDetails.paperContentRemoveFromFolderDetails];
  case DBTEAMLOGEventDetailsPaperContentRemoveMemberDetails:
    return [self.paperContentRemoveMemberDetails isEqual:anEventDetails.paperContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsPaperContentRenameDetails:
    return [self.paperContentRenameDetails isEqual:anEventDetails.paperContentRenameDetails];
  case DBTEAMLOGEventDetailsPaperContentRestoreDetails:
    return [self.paperContentRestoreDetails isEqual:anEventDetails.paperContentRestoreDetails];
  case DBTEAMLOGEventDetailsPaperDocAddCommentDetails:
    return [self.paperDocAddCommentDetails isEqual:anEventDetails.paperDocAddCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeMemberRoleDetails:
    return [self.paperDocChangeMemberRoleDetails isEqual:anEventDetails.paperDocChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeSharingPolicyDetails:
    return [self.paperDocChangeSharingPolicyDetails isEqual:anEventDetails.paperDocChangeSharingPolicyDetails];
  case DBTEAMLOGEventDetailsPaperDocChangeSubscriptionDetails:
    return [self.paperDocChangeSubscriptionDetails isEqual:anEventDetails.paperDocChangeSubscriptionDetails];
  case DBTEAMLOGEventDetailsPaperDocDeletedDetails:
    return [self.paperDocDeletedDetails isEqual:anEventDetails.paperDocDeletedDetails];
  case DBTEAMLOGEventDetailsPaperDocDeleteCommentDetails:
    return [self.paperDocDeleteCommentDetails isEqual:anEventDetails.paperDocDeleteCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocDownloadDetails:
    return [self.paperDocDownloadDetails isEqual:anEventDetails.paperDocDownloadDetails];
  case DBTEAMLOGEventDetailsPaperDocEditDetails:
    return [self.paperDocEditDetails isEqual:anEventDetails.paperDocEditDetails];
  case DBTEAMLOGEventDetailsPaperDocEditCommentDetails:
    return [self.paperDocEditCommentDetails isEqual:anEventDetails.paperDocEditCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocFollowedDetails:
    return [self.paperDocFollowedDetails isEqual:anEventDetails.paperDocFollowedDetails];
  case DBTEAMLOGEventDetailsPaperDocMentionDetails:
    return [self.paperDocMentionDetails isEqual:anEventDetails.paperDocMentionDetails];
  case DBTEAMLOGEventDetailsPaperDocOwnershipChangedDetails:
    return [self.paperDocOwnershipChangedDetails isEqual:anEventDetails.paperDocOwnershipChangedDetails];
  case DBTEAMLOGEventDetailsPaperDocRequestAccessDetails:
    return [self.paperDocRequestAccessDetails isEqual:anEventDetails.paperDocRequestAccessDetails];
  case DBTEAMLOGEventDetailsPaperDocResolveCommentDetails:
    return [self.paperDocResolveCommentDetails isEqual:anEventDetails.paperDocResolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocRevertDetails:
    return [self.paperDocRevertDetails isEqual:anEventDetails.paperDocRevertDetails];
  case DBTEAMLOGEventDetailsPaperDocSlackShareDetails:
    return [self.paperDocSlackShareDetails isEqual:anEventDetails.paperDocSlackShareDetails];
  case DBTEAMLOGEventDetailsPaperDocTeamInviteDetails:
    return [self.paperDocTeamInviteDetails isEqual:anEventDetails.paperDocTeamInviteDetails];
  case DBTEAMLOGEventDetailsPaperDocTrashedDetails:
    return [self.paperDocTrashedDetails isEqual:anEventDetails.paperDocTrashedDetails];
  case DBTEAMLOGEventDetailsPaperDocUnresolveCommentDetails:
    return [self.paperDocUnresolveCommentDetails isEqual:anEventDetails.paperDocUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsPaperDocUntrashedDetails:
    return [self.paperDocUntrashedDetails isEqual:anEventDetails.paperDocUntrashedDetails];
  case DBTEAMLOGEventDetailsPaperDocViewDetails:
    return [self.paperDocViewDetails isEqual:anEventDetails.paperDocViewDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewAllowDetails:
    return [self.paperExternalViewAllowDetails isEqual:anEventDetails.paperExternalViewAllowDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewDefaultTeamDetails:
    return [self.paperExternalViewDefaultTeamDetails isEqual:anEventDetails.paperExternalViewDefaultTeamDetails];
  case DBTEAMLOGEventDetailsPaperExternalViewForbidDetails:
    return [self.paperExternalViewForbidDetails isEqual:anEventDetails.paperExternalViewForbidDetails];
  case DBTEAMLOGEventDetailsPaperFolderChangeSubscriptionDetails:
    return [self.paperFolderChangeSubscriptionDetails isEqual:anEventDetails.paperFolderChangeSubscriptionDetails];
  case DBTEAMLOGEventDetailsPaperFolderDeletedDetails:
    return [self.paperFolderDeletedDetails isEqual:anEventDetails.paperFolderDeletedDetails];
  case DBTEAMLOGEventDetailsPaperFolderFollowedDetails:
    return [self.paperFolderFollowedDetails isEqual:anEventDetails.paperFolderFollowedDetails];
  case DBTEAMLOGEventDetailsPaperFolderTeamInviteDetails:
    return [self.paperFolderTeamInviteDetails isEqual:anEventDetails.paperFolderTeamInviteDetails];
  case DBTEAMLOGEventDetailsPaperPublishedLinkChangePermissionDetails:
    return [self.paperPublishedLinkChangePermissionDetails
        isEqual:anEventDetails.paperPublishedLinkChangePermissionDetails];
  case DBTEAMLOGEventDetailsPaperPublishedLinkCreateDetails:
    return [self.paperPublishedLinkCreateDetails isEqual:anEventDetails.paperPublishedLinkCreateDetails];
  case DBTEAMLOGEventDetailsPaperPublishedLinkDisabledDetails:
    return [self.paperPublishedLinkDisabledDetails isEqual:anEventDetails.paperPublishedLinkDisabledDetails];
  case DBTEAMLOGEventDetailsPaperPublishedLinkViewDetails:
    return [self.paperPublishedLinkViewDetails isEqual:anEventDetails.paperPublishedLinkViewDetails];
  case DBTEAMLOGEventDetailsPasswordChangeDetails:
    return [self.passwordChangeDetails isEqual:anEventDetails.passwordChangeDetails];
  case DBTEAMLOGEventDetailsPasswordResetDetails:
    return [self.passwordResetDetails isEqual:anEventDetails.passwordResetDetails];
  case DBTEAMLOGEventDetailsPasswordResetAllDetails:
    return [self.passwordResetAllDetails isEqual:anEventDetails.passwordResetAllDetails];
  case DBTEAMLOGEventDetailsClassificationCreateReportDetails:
    return [self.classificationCreateReportDetails isEqual:anEventDetails.classificationCreateReportDetails];
  case DBTEAMLOGEventDetailsClassificationCreateReportFailDetails:
    return [self.classificationCreateReportFailDetails isEqual:anEventDetails.classificationCreateReportFailDetails];
  case DBTEAMLOGEventDetailsEmmCreateExceptionsReportDetails:
    return [self.emmCreateExceptionsReportDetails isEqual:anEventDetails.emmCreateExceptionsReportDetails];
  case DBTEAMLOGEventDetailsEmmCreateUsageReportDetails:
    return [self.emmCreateUsageReportDetails isEqual:anEventDetails.emmCreateUsageReportDetails];
  case DBTEAMLOGEventDetailsExportMembersReportDetails:
    return [self.exportMembersReportDetails isEqual:anEventDetails.exportMembersReportDetails];
  case DBTEAMLOGEventDetailsExportMembersReportFailDetails:
    return [self.exportMembersReportFailDetails isEqual:anEventDetails.exportMembersReportFailDetails];
  case DBTEAMLOGEventDetailsExternalSharingCreateReportDetails:
    return [self.externalSharingCreateReportDetails isEqual:anEventDetails.externalSharingCreateReportDetails];
  case DBTEAMLOGEventDetailsExternalSharingReportFailedDetails:
    return [self.externalSharingReportFailedDetails isEqual:anEventDetails.externalSharingReportFailedDetails];
  case DBTEAMLOGEventDetailsNoExpirationLinkGenCreateReportDetails:
    return [self.noExpirationLinkGenCreateReportDetails isEqual:anEventDetails.noExpirationLinkGenCreateReportDetails];
  case DBTEAMLOGEventDetailsNoExpirationLinkGenReportFailedDetails:
    return [self.noExpirationLinkGenReportFailedDetails isEqual:anEventDetails.noExpirationLinkGenReportFailedDetails];
  case DBTEAMLOGEventDetailsNoPasswordLinkGenCreateReportDetails:
    return [self.noPasswordLinkGenCreateReportDetails isEqual:anEventDetails.noPasswordLinkGenCreateReportDetails];
  case DBTEAMLOGEventDetailsNoPasswordLinkGenReportFailedDetails:
    return [self.noPasswordLinkGenReportFailedDetails isEqual:anEventDetails.noPasswordLinkGenReportFailedDetails];
  case DBTEAMLOGEventDetailsNoPasswordLinkViewCreateReportDetails:
    return [self.noPasswordLinkViewCreateReportDetails isEqual:anEventDetails.noPasswordLinkViewCreateReportDetails];
  case DBTEAMLOGEventDetailsNoPasswordLinkViewReportFailedDetails:
    return [self.noPasswordLinkViewReportFailedDetails isEqual:anEventDetails.noPasswordLinkViewReportFailedDetails];
  case DBTEAMLOGEventDetailsOutdatedLinkViewCreateReportDetails:
    return [self.outdatedLinkViewCreateReportDetails isEqual:anEventDetails.outdatedLinkViewCreateReportDetails];
  case DBTEAMLOGEventDetailsOutdatedLinkViewReportFailedDetails:
    return [self.outdatedLinkViewReportFailedDetails isEqual:anEventDetails.outdatedLinkViewReportFailedDetails];
  case DBTEAMLOGEventDetailsPaperAdminExportStartDetails:
    return [self.paperAdminExportStartDetails isEqual:anEventDetails.paperAdminExportStartDetails];
  case DBTEAMLOGEventDetailsSmartSyncCreateAdminPrivilegeReportDetails:
    return [self.smartSyncCreateAdminPrivilegeReportDetails
        isEqual:anEventDetails.smartSyncCreateAdminPrivilegeReportDetails];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportDetails:
    return [self.teamActivityCreateReportDetails isEqual:anEventDetails.teamActivityCreateReportDetails];
  case DBTEAMLOGEventDetailsTeamActivityCreateReportFailDetails:
    return [self.teamActivityCreateReportFailDetails isEqual:anEventDetails.teamActivityCreateReportFailDetails];
  case DBTEAMLOGEventDetailsCollectionShareDetails:
    return [self.collectionShareDetails isEqual:anEventDetails.collectionShareDetails];
  case DBTEAMLOGEventDetailsFileTransfersFileAddDetails:
    return [self.fileTransfersFileAddDetails isEqual:anEventDetails.fileTransfersFileAddDetails];
  case DBTEAMLOGEventDetailsFileTransfersTransferDeleteDetails:
    return [self.fileTransfersTransferDeleteDetails isEqual:anEventDetails.fileTransfersTransferDeleteDetails];
  case DBTEAMLOGEventDetailsFileTransfersTransferDownloadDetails:
    return [self.fileTransfersTransferDownloadDetails isEqual:anEventDetails.fileTransfersTransferDownloadDetails];
  case DBTEAMLOGEventDetailsFileTransfersTransferSendDetails:
    return [self.fileTransfersTransferSendDetails isEqual:anEventDetails.fileTransfersTransferSendDetails];
  case DBTEAMLOGEventDetailsFileTransfersTransferViewDetails:
    return [self.fileTransfersTransferViewDetails isEqual:anEventDetails.fileTransfersTransferViewDetails];
  case DBTEAMLOGEventDetailsNoteAclInviteOnlyDetails:
    return [self.noteAclInviteOnlyDetails isEqual:anEventDetails.noteAclInviteOnlyDetails];
  case DBTEAMLOGEventDetailsNoteAclLinkDetails:
    return [self.noteAclLinkDetails isEqual:anEventDetails.noteAclLinkDetails];
  case DBTEAMLOGEventDetailsNoteAclTeamLinkDetails:
    return [self.noteAclTeamLinkDetails isEqual:anEventDetails.noteAclTeamLinkDetails];
  case DBTEAMLOGEventDetailsNoteSharedDetails:
    return [self.noteSharedDetails isEqual:anEventDetails.noteSharedDetails];
  case DBTEAMLOGEventDetailsNoteShareReceiveDetails:
    return [self.noteShareReceiveDetails isEqual:anEventDetails.noteShareReceiveDetails];
  case DBTEAMLOGEventDetailsOpenNoteSharedDetails:
    return [self.openNoteSharedDetails isEqual:anEventDetails.openNoteSharedDetails];
  case DBTEAMLOGEventDetailsSfAddGroupDetails:
    return [self.sfAddGroupDetails isEqual:anEventDetails.sfAddGroupDetails];
  case DBTEAMLOGEventDetailsSfAllowNonMembersToViewSharedLinksDetails:
    return [self.sfAllowNonMembersToViewSharedLinksDetails
        isEqual:anEventDetails.sfAllowNonMembersToViewSharedLinksDetails];
  case DBTEAMLOGEventDetailsSfExternalInviteWarnDetails:
    return [self.sfExternalInviteWarnDetails isEqual:anEventDetails.sfExternalInviteWarnDetails];
  case DBTEAMLOGEventDetailsSfFbInviteDetails:
    return [self.sfFbInviteDetails isEqual:anEventDetails.sfFbInviteDetails];
  case DBTEAMLOGEventDetailsSfFbInviteChangeRoleDetails:
    return [self.sfFbInviteChangeRoleDetails isEqual:anEventDetails.sfFbInviteChangeRoleDetails];
  case DBTEAMLOGEventDetailsSfFbUninviteDetails:
    return [self.sfFbUninviteDetails isEqual:anEventDetails.sfFbUninviteDetails];
  case DBTEAMLOGEventDetailsSfInviteGroupDetails:
    return [self.sfInviteGroupDetails isEqual:anEventDetails.sfInviteGroupDetails];
  case DBTEAMLOGEventDetailsSfTeamGrantAccessDetails:
    return [self.sfTeamGrantAccessDetails isEqual:anEventDetails.sfTeamGrantAccessDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteDetails:
    return [self.sfTeamInviteDetails isEqual:anEventDetails.sfTeamInviteDetails];
  case DBTEAMLOGEventDetailsSfTeamInviteChangeRoleDetails:
    return [self.sfTeamInviteChangeRoleDetails isEqual:anEventDetails.sfTeamInviteChangeRoleDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinDetails:
    return [self.sfTeamJoinDetails isEqual:anEventDetails.sfTeamJoinDetails];
  case DBTEAMLOGEventDetailsSfTeamJoinFromOobLinkDetails:
    return [self.sfTeamJoinFromOobLinkDetails isEqual:anEventDetails.sfTeamJoinFromOobLinkDetails];
  case DBTEAMLOGEventDetailsSfTeamUninviteDetails:
    return [self.sfTeamUninviteDetails isEqual:anEventDetails.sfTeamUninviteDetails];
  case DBTEAMLOGEventDetailsSharedContentAddInviteesDetails:
    return [self.sharedContentAddInviteesDetails isEqual:anEventDetails.sharedContentAddInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkExpiryDetails:
    return [self.sharedContentAddLinkExpiryDetails isEqual:anEventDetails.sharedContentAddLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentAddLinkPasswordDetails:
    return [self.sharedContentAddLinkPasswordDetails isEqual:anEventDetails.sharedContentAddLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentAddMemberDetails:
    return [self.sharedContentAddMemberDetails isEqual:anEventDetails.sharedContentAddMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeDownloadsPolicyDetails:
    return [self.sharedContentChangeDownloadsPolicyDetails
        isEqual:anEventDetails.sharedContentChangeDownloadsPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeInviteeRoleDetails:
    return [self.sharedContentChangeInviteeRoleDetails isEqual:anEventDetails.sharedContentChangeInviteeRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkAudienceDetails:
    return [self.sharedContentChangeLinkAudienceDetails isEqual:anEventDetails.sharedContentChangeLinkAudienceDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkExpiryDetails:
    return [self.sharedContentChangeLinkExpiryDetails isEqual:anEventDetails.sharedContentChangeLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeLinkPasswordDetails:
    return [self.sharedContentChangeLinkPasswordDetails isEqual:anEventDetails.sharedContentChangeLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeMemberRoleDetails:
    return [self.sharedContentChangeMemberRoleDetails isEqual:anEventDetails.sharedContentChangeMemberRoleDetails];
  case DBTEAMLOGEventDetailsSharedContentChangeViewerInfoPolicyDetails:
    return [self.sharedContentChangeViewerInfoPolicyDetails
        isEqual:anEventDetails.sharedContentChangeViewerInfoPolicyDetails];
  case DBTEAMLOGEventDetailsSharedContentClaimInvitationDetails:
    return [self.sharedContentClaimInvitationDetails isEqual:anEventDetails.sharedContentClaimInvitationDetails];
  case DBTEAMLOGEventDetailsSharedContentCopyDetails:
    return [self.sharedContentCopyDetails isEqual:anEventDetails.sharedContentCopyDetails];
  case DBTEAMLOGEventDetailsSharedContentDownloadDetails:
    return [self.sharedContentDownloadDetails isEqual:anEventDetails.sharedContentDownloadDetails];
  case DBTEAMLOGEventDetailsSharedContentRelinquishMembershipDetails:
    return
        [self.sharedContentRelinquishMembershipDetails isEqual:anEventDetails.sharedContentRelinquishMembershipDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveInviteesDetails:
    return [self.sharedContentRemoveInviteesDetails isEqual:anEventDetails.sharedContentRemoveInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkExpiryDetails:
    return [self.sharedContentRemoveLinkExpiryDetails isEqual:anEventDetails.sharedContentRemoveLinkExpiryDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveLinkPasswordDetails:
    return [self.sharedContentRemoveLinkPasswordDetails isEqual:anEventDetails.sharedContentRemoveLinkPasswordDetails];
  case DBTEAMLOGEventDetailsSharedContentRemoveMemberDetails:
    return [self.sharedContentRemoveMemberDetails isEqual:anEventDetails.sharedContentRemoveMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentRequestAccessDetails:
    return [self.sharedContentRequestAccessDetails isEqual:anEventDetails.sharedContentRequestAccessDetails];
  case DBTEAMLOGEventDetailsSharedContentRestoreInviteesDetails:
    return [self.sharedContentRestoreInviteesDetails isEqual:anEventDetails.sharedContentRestoreInviteesDetails];
  case DBTEAMLOGEventDetailsSharedContentRestoreMemberDetails:
    return [self.sharedContentRestoreMemberDetails isEqual:anEventDetails.sharedContentRestoreMemberDetails];
  case DBTEAMLOGEventDetailsSharedContentUnshareDetails:
    return [self.sharedContentUnshareDetails isEqual:anEventDetails.sharedContentUnshareDetails];
  case DBTEAMLOGEventDetailsSharedContentViewDetails:
    return [self.sharedContentViewDetails isEqual:anEventDetails.sharedContentViewDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeLinkPolicyDetails:
    return [self.sharedFolderChangeLinkPolicyDetails isEqual:anEventDetails.sharedFolderChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersInheritancePolicyDetails:
    return [self.sharedFolderChangeMembersInheritancePolicyDetails
        isEqual:anEventDetails.sharedFolderChangeMembersInheritancePolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersManagementPolicyDetails:
    return [self.sharedFolderChangeMembersManagementPolicyDetails
        isEqual:anEventDetails.sharedFolderChangeMembersManagementPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderChangeMembersPolicyDetails:
    return [self.sharedFolderChangeMembersPolicyDetails isEqual:anEventDetails.sharedFolderChangeMembersPolicyDetails];
  case DBTEAMLOGEventDetailsSharedFolderCreateDetails:
    return [self.sharedFolderCreateDetails isEqual:anEventDetails.sharedFolderCreateDetails];
  case DBTEAMLOGEventDetailsSharedFolderDeclineInvitationDetails:
    return [self.sharedFolderDeclineInvitationDetails isEqual:anEventDetails.sharedFolderDeclineInvitationDetails];
  case DBTEAMLOGEventDetailsSharedFolderMountDetails:
    return [self.sharedFolderMountDetails isEqual:anEventDetails.sharedFolderMountDetails];
  case DBTEAMLOGEventDetailsSharedFolderNestDetails:
    return [self.sharedFolderNestDetails isEqual:anEventDetails.sharedFolderNestDetails];
  case DBTEAMLOGEventDetailsSharedFolderTransferOwnershipDetails:
    return [self.sharedFolderTransferOwnershipDetails isEqual:anEventDetails.sharedFolderTransferOwnershipDetails];
  case DBTEAMLOGEventDetailsSharedFolderUnmountDetails:
    return [self.sharedFolderUnmountDetails isEqual:anEventDetails.sharedFolderUnmountDetails];
  case DBTEAMLOGEventDetailsSharedLinkAddExpiryDetails:
    return [self.sharedLinkAddExpiryDetails isEqual:anEventDetails.sharedLinkAddExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkChangeExpiryDetails:
    return [self.sharedLinkChangeExpiryDetails isEqual:anEventDetails.sharedLinkChangeExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkChangeVisibilityDetails:
    return [self.sharedLinkChangeVisibilityDetails isEqual:anEventDetails.sharedLinkChangeVisibilityDetails];
  case DBTEAMLOGEventDetailsSharedLinkCopyDetails:
    return [self.sharedLinkCopyDetails isEqual:anEventDetails.sharedLinkCopyDetails];
  case DBTEAMLOGEventDetailsSharedLinkCreateDetails:
    return [self.sharedLinkCreateDetails isEqual:anEventDetails.sharedLinkCreateDetails];
  case DBTEAMLOGEventDetailsSharedLinkDisableDetails:
    return [self.sharedLinkDisableDetails isEqual:anEventDetails.sharedLinkDisableDetails];
  case DBTEAMLOGEventDetailsSharedLinkDownloadDetails:
    return [self.sharedLinkDownloadDetails isEqual:anEventDetails.sharedLinkDownloadDetails];
  case DBTEAMLOGEventDetailsSharedLinkRemoveExpiryDetails:
    return [self.sharedLinkRemoveExpiryDetails isEqual:anEventDetails.sharedLinkRemoveExpiryDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddExpirationDetails:
    return [self.sharedLinkSettingsAddExpirationDetails isEqual:anEventDetails.sharedLinkSettingsAddExpirationDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsAddPasswordDetails:
    return [self.sharedLinkSettingsAddPasswordDetails isEqual:anEventDetails.sharedLinkSettingsAddPasswordDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadDisabledDetails:
    return [self.sharedLinkSettingsAllowDownloadDisabledDetails
        isEqual:anEventDetails.sharedLinkSettingsAllowDownloadDisabledDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsAllowDownloadEnabledDetails:
    return [self.sharedLinkSettingsAllowDownloadEnabledDetails
        isEqual:anEventDetails.sharedLinkSettingsAllowDownloadEnabledDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeAudienceDetails:
    return
        [self.sharedLinkSettingsChangeAudienceDetails isEqual:anEventDetails.sharedLinkSettingsChangeAudienceDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangeExpirationDetails:
    return [self.sharedLinkSettingsChangeExpirationDetails
        isEqual:anEventDetails.sharedLinkSettingsChangeExpirationDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsChangePasswordDetails:
    return
        [self.sharedLinkSettingsChangePasswordDetails isEqual:anEventDetails.sharedLinkSettingsChangePasswordDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemoveExpirationDetails:
    return [self.sharedLinkSettingsRemoveExpirationDetails
        isEqual:anEventDetails.sharedLinkSettingsRemoveExpirationDetails];
  case DBTEAMLOGEventDetailsSharedLinkSettingsRemovePasswordDetails:
    return
        [self.sharedLinkSettingsRemovePasswordDetails isEqual:anEventDetails.sharedLinkSettingsRemovePasswordDetails];
  case DBTEAMLOGEventDetailsSharedLinkShareDetails:
    return [self.sharedLinkShareDetails isEqual:anEventDetails.sharedLinkShareDetails];
  case DBTEAMLOGEventDetailsSharedLinkViewDetails:
    return [self.sharedLinkViewDetails isEqual:anEventDetails.sharedLinkViewDetails];
  case DBTEAMLOGEventDetailsSharedNoteOpenedDetails:
    return [self.sharedNoteOpenedDetails isEqual:anEventDetails.sharedNoteOpenedDetails];
  case DBTEAMLOGEventDetailsShmodelDisableDownloadsDetails:
    return [self.shmodelDisableDownloadsDetails isEqual:anEventDetails.shmodelDisableDownloadsDetails];
  case DBTEAMLOGEventDetailsShmodelEnableDownloadsDetails:
    return [self.shmodelEnableDownloadsDetails isEqual:anEventDetails.shmodelEnableDownloadsDetails];
  case DBTEAMLOGEventDetailsShmodelGroupShareDetails:
    return [self.shmodelGroupShareDetails isEqual:anEventDetails.shmodelGroupShareDetails];
  case DBTEAMLOGEventDetailsShowcaseAccessGrantedDetails:
    return [self.showcaseAccessGrantedDetails isEqual:anEventDetails.showcaseAccessGrantedDetails];
  case DBTEAMLOGEventDetailsShowcaseAddMemberDetails:
    return [self.showcaseAddMemberDetails isEqual:anEventDetails.showcaseAddMemberDetails];
  case DBTEAMLOGEventDetailsShowcaseArchivedDetails:
    return [self.showcaseArchivedDetails isEqual:anEventDetails.showcaseArchivedDetails];
  case DBTEAMLOGEventDetailsShowcaseCreatedDetails:
    return [self.showcaseCreatedDetails isEqual:anEventDetails.showcaseCreatedDetails];
  case DBTEAMLOGEventDetailsShowcaseDeleteCommentDetails:
    return [self.showcaseDeleteCommentDetails isEqual:anEventDetails.showcaseDeleteCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseEditedDetails:
    return [self.showcaseEditedDetails isEqual:anEventDetails.showcaseEditedDetails];
  case DBTEAMLOGEventDetailsShowcaseEditCommentDetails:
    return [self.showcaseEditCommentDetails isEqual:anEventDetails.showcaseEditCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseFileAddedDetails:
    return [self.showcaseFileAddedDetails isEqual:anEventDetails.showcaseFileAddedDetails];
  case DBTEAMLOGEventDetailsShowcaseFileDownloadDetails:
    return [self.showcaseFileDownloadDetails isEqual:anEventDetails.showcaseFileDownloadDetails];
  case DBTEAMLOGEventDetailsShowcaseFileRemovedDetails:
    return [self.showcaseFileRemovedDetails isEqual:anEventDetails.showcaseFileRemovedDetails];
  case DBTEAMLOGEventDetailsShowcaseFileViewDetails:
    return [self.showcaseFileViewDetails isEqual:anEventDetails.showcaseFileViewDetails];
  case DBTEAMLOGEventDetailsShowcasePermanentlyDeletedDetails:
    return [self.showcasePermanentlyDeletedDetails isEqual:anEventDetails.showcasePermanentlyDeletedDetails];
  case DBTEAMLOGEventDetailsShowcasePostCommentDetails:
    return [self.showcasePostCommentDetails isEqual:anEventDetails.showcasePostCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseRemoveMemberDetails:
    return [self.showcaseRemoveMemberDetails isEqual:anEventDetails.showcaseRemoveMemberDetails];
  case DBTEAMLOGEventDetailsShowcaseRenamedDetails:
    return [self.showcaseRenamedDetails isEqual:anEventDetails.showcaseRenamedDetails];
  case DBTEAMLOGEventDetailsShowcaseRequestAccessDetails:
    return [self.showcaseRequestAccessDetails isEqual:anEventDetails.showcaseRequestAccessDetails];
  case DBTEAMLOGEventDetailsShowcaseResolveCommentDetails:
    return [self.showcaseResolveCommentDetails isEqual:anEventDetails.showcaseResolveCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseRestoredDetails:
    return [self.showcaseRestoredDetails isEqual:anEventDetails.showcaseRestoredDetails];
  case DBTEAMLOGEventDetailsShowcaseTrashedDetails:
    return [self.showcaseTrashedDetails isEqual:anEventDetails.showcaseTrashedDetails];
  case DBTEAMLOGEventDetailsShowcaseTrashedDeprecatedDetails:
    return [self.showcaseTrashedDeprecatedDetails isEqual:anEventDetails.showcaseTrashedDeprecatedDetails];
  case DBTEAMLOGEventDetailsShowcaseUnresolveCommentDetails:
    return [self.showcaseUnresolveCommentDetails isEqual:anEventDetails.showcaseUnresolveCommentDetails];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDetails:
    return [self.showcaseUntrashedDetails isEqual:anEventDetails.showcaseUntrashedDetails];
  case DBTEAMLOGEventDetailsShowcaseUntrashedDeprecatedDetails:
    return [self.showcaseUntrashedDeprecatedDetails isEqual:anEventDetails.showcaseUntrashedDeprecatedDetails];
  case DBTEAMLOGEventDetailsShowcaseViewDetails:
    return [self.showcaseViewDetails isEqual:anEventDetails.showcaseViewDetails];
  case DBTEAMLOGEventDetailsSsoAddCertDetails:
    return [self.ssoAddCertDetails isEqual:anEventDetails.ssoAddCertDetails];
  case DBTEAMLOGEventDetailsSsoAddLoginUrlDetails:
    return [self.ssoAddLoginUrlDetails isEqual:anEventDetails.ssoAddLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoAddLogoutUrlDetails:
    return [self.ssoAddLogoutUrlDetails isEqual:anEventDetails.ssoAddLogoutUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeCertDetails:
    return [self.ssoChangeCertDetails isEqual:anEventDetails.ssoChangeCertDetails];
  case DBTEAMLOGEventDetailsSsoChangeLoginUrlDetails:
    return [self.ssoChangeLoginUrlDetails isEqual:anEventDetails.ssoChangeLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeLogoutUrlDetails:
    return [self.ssoChangeLogoutUrlDetails isEqual:anEventDetails.ssoChangeLogoutUrlDetails];
  case DBTEAMLOGEventDetailsSsoChangeSamlIdentityModeDetails:
    return [self.ssoChangeSamlIdentityModeDetails isEqual:anEventDetails.ssoChangeSamlIdentityModeDetails];
  case DBTEAMLOGEventDetailsSsoRemoveCertDetails:
    return [self.ssoRemoveCertDetails isEqual:anEventDetails.ssoRemoveCertDetails];
  case DBTEAMLOGEventDetailsSsoRemoveLoginUrlDetails:
    return [self.ssoRemoveLoginUrlDetails isEqual:anEventDetails.ssoRemoveLoginUrlDetails];
  case DBTEAMLOGEventDetailsSsoRemoveLogoutUrlDetails:
    return [self.ssoRemoveLogoutUrlDetails isEqual:anEventDetails.ssoRemoveLogoutUrlDetails];
  case DBTEAMLOGEventDetailsTeamFolderChangeStatusDetails:
    return [self.teamFolderChangeStatusDetails isEqual:anEventDetails.teamFolderChangeStatusDetails];
  case DBTEAMLOGEventDetailsTeamFolderCreateDetails:
    return [self.teamFolderCreateDetails isEqual:anEventDetails.teamFolderCreateDetails];
  case DBTEAMLOGEventDetailsTeamFolderDowngradeDetails:
    return [self.teamFolderDowngradeDetails isEqual:anEventDetails.teamFolderDowngradeDetails];
  case DBTEAMLOGEventDetailsTeamFolderPermanentlyDeleteDetails:
    return [self.teamFolderPermanentlyDeleteDetails isEqual:anEventDetails.teamFolderPermanentlyDeleteDetails];
  case DBTEAMLOGEventDetailsTeamFolderRenameDetails:
    return [self.teamFolderRenameDetails isEqual:anEventDetails.teamFolderRenameDetails];
  case DBTEAMLOGEventDetailsTeamSelectiveSyncSettingsChangedDetails:
    return
        [self.teamSelectiveSyncSettingsChangedDetails isEqual:anEventDetails.teamSelectiveSyncSettingsChangedDetails];
  case DBTEAMLOGEventDetailsAccountCaptureChangePolicyDetails:
    return [self.accountCaptureChangePolicyDetails isEqual:anEventDetails.accountCaptureChangePolicyDetails];
  case DBTEAMLOGEventDetailsAdminEmailRemindersChangedDetails:
    return [self.adminEmailRemindersChangedDetails isEqual:anEventDetails.adminEmailRemindersChangedDetails];
  case DBTEAMLOGEventDetailsAllowDownloadDisabledDetails:
    return [self.allowDownloadDisabledDetails isEqual:anEventDetails.allowDownloadDisabledDetails];
  case DBTEAMLOGEventDetailsAllowDownloadEnabledDetails:
    return [self.allowDownloadEnabledDetails isEqual:anEventDetails.allowDownloadEnabledDetails];
  case DBTEAMLOGEventDetailsAppPermissionsChangedDetails:
    return [self.appPermissionsChangedDetails isEqual:anEventDetails.appPermissionsChangedDetails];
  case DBTEAMLOGEventDetailsCameraUploadsPolicyChangedDetails:
    return [self.cameraUploadsPolicyChangedDetails isEqual:anEventDetails.cameraUploadsPolicyChangedDetails];
  case DBTEAMLOGEventDetailsCaptureTranscriptPolicyChangedDetails:
    return [self.captureTranscriptPolicyChangedDetails isEqual:anEventDetails.captureTranscriptPolicyChangedDetails];
  case DBTEAMLOGEventDetailsClassificationChangePolicyDetails:
    return [self.classificationChangePolicyDetails isEqual:anEventDetails.classificationChangePolicyDetails];
  case DBTEAMLOGEventDetailsComputerBackupPolicyChangedDetails:
    return [self.computerBackupPolicyChangedDetails isEqual:anEventDetails.computerBackupPolicyChangedDetails];
  case DBTEAMLOGEventDetailsContentAdministrationPolicyChangedDetails:
    return [self.contentAdministrationPolicyChangedDetails
        isEqual:anEventDetails.contentAdministrationPolicyChangedDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionChangePolicyDetails:
    return [self.dataPlacementRestrictionChangePolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionChangePolicyDetails];
  case DBTEAMLOGEventDetailsDataPlacementRestrictionSatisfyPolicyDetails:
    return [self.dataPlacementRestrictionSatisfyPolicyDetails
        isEqual:anEventDetails.dataPlacementRestrictionSatisfyPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsAddExceptionDetails:
    return [self.deviceApprovalsAddExceptionDetails isEqual:anEventDetails.deviceApprovalsAddExceptionDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeDesktopPolicyDetails:
    return [self.deviceApprovalsChangeDesktopPolicyDetails
        isEqual:anEventDetails.deviceApprovalsChangeDesktopPolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeMobilePolicyDetails:
    return
        [self.deviceApprovalsChangeMobilePolicyDetails isEqual:anEventDetails.deviceApprovalsChangeMobilePolicyDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeOverageActionDetails:
    return [self.deviceApprovalsChangeOverageActionDetails
        isEqual:anEventDetails.deviceApprovalsChangeOverageActionDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsChangeUnlinkActionDetails:
    return
        [self.deviceApprovalsChangeUnlinkActionDetails isEqual:anEventDetails.deviceApprovalsChangeUnlinkActionDetails];
  case DBTEAMLOGEventDetailsDeviceApprovalsRemoveExceptionDetails:
    return [self.deviceApprovalsRemoveExceptionDetails isEqual:anEventDetails.deviceApprovalsRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsAddMembersDetails:
    return [self.directoryRestrictionsAddMembersDetails isEqual:anEventDetails.directoryRestrictionsAddMembersDetails];
  case DBTEAMLOGEventDetailsDirectoryRestrictionsRemoveMembersDetails:
    return [self.directoryRestrictionsRemoveMembersDetails
        isEqual:anEventDetails.directoryRestrictionsRemoveMembersDetails];
  case DBTEAMLOGEventDetailsDropboxPasswordsPolicyChangedDetails:
    return [self.dropboxPasswordsPolicyChangedDetails isEqual:anEventDetails.dropboxPasswordsPolicyChangedDetails];
  case DBTEAMLOGEventDetailsEmailIngestPolicyChangedDetails:
    return [self.emailIngestPolicyChangedDetails isEqual:anEventDetails.emailIngestPolicyChangedDetails];
  case DBTEAMLOGEventDetailsEmmAddExceptionDetails:
    return [self.emmAddExceptionDetails isEqual:anEventDetails.emmAddExceptionDetails];
  case DBTEAMLOGEventDetailsEmmChangePolicyDetails:
    return [self.emmChangePolicyDetails isEqual:anEventDetails.emmChangePolicyDetails];
  case DBTEAMLOGEventDetailsEmmRemoveExceptionDetails:
    return [self.emmRemoveExceptionDetails isEqual:anEventDetails.emmRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsExtendedVersionHistoryChangePolicyDetails:
    return [self.extendedVersionHistoryChangePolicyDetails
        isEqual:anEventDetails.extendedVersionHistoryChangePolicyDetails];
  case DBTEAMLOGEventDetailsExternalDriveBackupPolicyChangedDetails:
    return
        [self.externalDriveBackupPolicyChangedDetails isEqual:anEventDetails.externalDriveBackupPolicyChangedDetails];
  case DBTEAMLOGEventDetailsFileCommentsChangePolicyDetails:
    return [self.fileCommentsChangePolicyDetails isEqual:anEventDetails.fileCommentsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileLockingPolicyChangedDetails:
    return [self.fileLockingPolicyChangedDetails isEqual:anEventDetails.fileLockingPolicyChangedDetails];
  case DBTEAMLOGEventDetailsFileRequestsChangePolicyDetails:
    return [self.fileRequestsChangePolicyDetails isEqual:anEventDetails.fileRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsEnabledDetails:
    return [self.fileRequestsEmailsEnabledDetails isEqual:anEventDetails.fileRequestsEmailsEnabledDetails];
  case DBTEAMLOGEventDetailsFileRequestsEmailsRestrictedToTeamOnlyDetails:
    return [self.fileRequestsEmailsRestrictedToTeamOnlyDetails
        isEqual:anEventDetails.fileRequestsEmailsRestrictedToTeamOnlyDetails];
  case DBTEAMLOGEventDetailsFileTransfersPolicyChangedDetails:
    return [self.fileTransfersPolicyChangedDetails isEqual:anEventDetails.fileTransfersPolicyChangedDetails];
  case DBTEAMLOGEventDetailsGoogleSsoChangePolicyDetails:
    return [self.googleSsoChangePolicyDetails isEqual:anEventDetails.googleSsoChangePolicyDetails];
  case DBTEAMLOGEventDetailsGroupUserManagementChangePolicyDetails:
    return [self.groupUserManagementChangePolicyDetails isEqual:anEventDetails.groupUserManagementChangePolicyDetails];
  case DBTEAMLOGEventDetailsIntegrationPolicyChangedDetails:
    return [self.integrationPolicyChangedDetails isEqual:anEventDetails.integrationPolicyChangedDetails];
  case DBTEAMLOGEventDetailsInviteAcceptanceEmailPolicyChangedDetails:
    return [self.inviteAcceptanceEmailPolicyChangedDetails
        isEqual:anEventDetails.inviteAcceptanceEmailPolicyChangedDetails];
  case DBTEAMLOGEventDetailsMemberRequestsChangePolicyDetails:
    return [self.memberRequestsChangePolicyDetails isEqual:anEventDetails.memberRequestsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSendInvitePolicyChangedDetails:
    return [self.memberSendInvitePolicyChangedDetails isEqual:anEventDetails.memberSendInvitePolicyChangedDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsAddExceptionDetails:
    return [self.memberSpaceLimitsAddExceptionDetails isEqual:anEventDetails.memberSpaceLimitsAddExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangeCapsTypePolicyDetails:
    return [self.memberSpaceLimitsChangeCapsTypePolicyDetails
        isEqual:anEventDetails.memberSpaceLimitsChangeCapsTypePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsChangePolicyDetails:
    return [self.memberSpaceLimitsChangePolicyDetails isEqual:anEventDetails.memberSpaceLimitsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMemberSpaceLimitsRemoveExceptionDetails:
    return
        [self.memberSpaceLimitsRemoveExceptionDetails isEqual:anEventDetails.memberSpaceLimitsRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsMemberSuggestionsChangePolicyDetails:
    return [self.memberSuggestionsChangePolicyDetails isEqual:anEventDetails.memberSuggestionsChangePolicyDetails];
  case DBTEAMLOGEventDetailsMicrosoftOfficeAddinChangePolicyDetails:
    return
        [self.microsoftOfficeAddinChangePolicyDetails isEqual:anEventDetails.microsoftOfficeAddinChangePolicyDetails];
  case DBTEAMLOGEventDetailsNetworkControlChangePolicyDetails:
    return [self.networkControlChangePolicyDetails isEqual:anEventDetails.networkControlChangePolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeDeploymentPolicyDetails:
    return [self.paperChangeDeploymentPolicyDetails isEqual:anEventDetails.paperChangeDeploymentPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeMemberLinkPolicyDetails:
    return [self.paperChangeMemberLinkPolicyDetails isEqual:anEventDetails.paperChangeMemberLinkPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangeMemberPolicyDetails:
    return [self.paperChangeMemberPolicyDetails isEqual:anEventDetails.paperChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsPaperChangePolicyDetails:
    return [self.paperChangePolicyDetails isEqual:anEventDetails.paperChangePolicyDetails];
  case DBTEAMLOGEventDetailsPaperDefaultFolderPolicyChangedDetails:
    return [self.paperDefaultFolderPolicyChangedDetails isEqual:anEventDetails.paperDefaultFolderPolicyChangedDetails];
  case DBTEAMLOGEventDetailsPaperDesktopPolicyChangedDetails:
    return [self.paperDesktopPolicyChangedDetails isEqual:anEventDetails.paperDesktopPolicyChangedDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupAdditionDetails:
    return [self.paperEnabledUsersGroupAdditionDetails isEqual:anEventDetails.paperEnabledUsersGroupAdditionDetails];
  case DBTEAMLOGEventDetailsPaperEnabledUsersGroupRemovalDetails:
    return [self.paperEnabledUsersGroupRemovalDetails isEqual:anEventDetails.paperEnabledUsersGroupRemovalDetails];
  case DBTEAMLOGEventDetailsPasswordStrengthRequirementsChangePolicyDetails:
    return [self.passwordStrengthRequirementsChangePolicyDetails
        isEqual:anEventDetails.passwordStrengthRequirementsChangePolicyDetails];
  case DBTEAMLOGEventDetailsPermanentDeleteChangePolicyDetails:
    return [self.permanentDeleteChangePolicyDetails isEqual:anEventDetails.permanentDeleteChangePolicyDetails];
  case DBTEAMLOGEventDetailsResellerSupportChangePolicyDetails:
    return [self.resellerSupportChangePolicyDetails isEqual:anEventDetails.resellerSupportChangePolicyDetails];
  case DBTEAMLOGEventDetailsRewindPolicyChangedDetails:
    return [self.rewindPolicyChangedDetails isEqual:anEventDetails.rewindPolicyChangedDetails];
  case DBTEAMLOGEventDetailsSendForSignaturePolicyChangedDetails:
    return [self.sendForSignaturePolicyChangedDetails isEqual:anEventDetails.sendForSignaturePolicyChangedDetails];
  case DBTEAMLOGEventDetailsSharingChangeFolderJoinPolicyDetails:
    return [self.sharingChangeFolderJoinPolicyDetails isEqual:anEventDetails.sharingChangeFolderJoinPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkAllowChangeExpirationPolicyDetails:
    return [self.sharingChangeLinkAllowChangeExpirationPolicyDetails
        isEqual:anEventDetails.sharingChangeLinkAllowChangeExpirationPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkDefaultExpirationPolicyDetails:
    return [self.sharingChangeLinkDefaultExpirationPolicyDetails
        isEqual:anEventDetails.sharingChangeLinkDefaultExpirationPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkEnforcePasswordPolicyDetails:
    return [self.sharingChangeLinkEnforcePasswordPolicyDetails
        isEqual:anEventDetails.sharingChangeLinkEnforcePasswordPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeLinkPolicyDetails:
    return [self.sharingChangeLinkPolicyDetails isEqual:anEventDetails.sharingChangeLinkPolicyDetails];
  case DBTEAMLOGEventDetailsSharingChangeMemberPolicyDetails:
    return [self.sharingChangeMemberPolicyDetails isEqual:anEventDetails.sharingChangeMemberPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeDownloadPolicyDetails:
    return [self.showcaseChangeDownloadPolicyDetails isEqual:anEventDetails.showcaseChangeDownloadPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeEnabledPolicyDetails:
    return [self.showcaseChangeEnabledPolicyDetails isEqual:anEventDetails.showcaseChangeEnabledPolicyDetails];
  case DBTEAMLOGEventDetailsShowcaseChangeExternalSharingPolicyDetails:
    return [self.showcaseChangeExternalSharingPolicyDetails
        isEqual:anEventDetails.showcaseChangeExternalSharingPolicyDetails];
  case DBTEAMLOGEventDetailsSmarterSmartSyncPolicyChangedDetails:
    return [self.smarterSmartSyncPolicyChangedDetails isEqual:anEventDetails.smarterSmartSyncPolicyChangedDetails];
  case DBTEAMLOGEventDetailsSmartSyncChangePolicyDetails:
    return [self.smartSyncChangePolicyDetails isEqual:anEventDetails.smartSyncChangePolicyDetails];
  case DBTEAMLOGEventDetailsSmartSyncNotOptOutDetails:
    return [self.smartSyncNotOptOutDetails isEqual:anEventDetails.smartSyncNotOptOutDetails];
  case DBTEAMLOGEventDetailsSmartSyncOptOutDetails:
    return [self.smartSyncOptOutDetails isEqual:anEventDetails.smartSyncOptOutDetails];
  case DBTEAMLOGEventDetailsSsoChangePolicyDetails:
    return [self.ssoChangePolicyDetails isEqual:anEventDetails.ssoChangePolicyDetails];
  case DBTEAMLOGEventDetailsTeamBrandingPolicyChangedDetails:
    return [self.teamBrandingPolicyChangedDetails isEqual:anEventDetails.teamBrandingPolicyChangedDetails];
  case DBTEAMLOGEventDetailsTeamExtensionsPolicyChangedDetails:
    return [self.teamExtensionsPolicyChangedDetails isEqual:anEventDetails.teamExtensionsPolicyChangedDetails];
  case DBTEAMLOGEventDetailsTeamSelectiveSyncPolicyChangedDetails:
    return [self.teamSelectiveSyncPolicyChangedDetails isEqual:anEventDetails.teamSelectiveSyncPolicyChangedDetails];
  case DBTEAMLOGEventDetailsTeamSharingWhitelistSubjectsChangedDetails:
    return [self.teamSharingWhitelistSubjectsChangedDetails
        isEqual:anEventDetails.teamSharingWhitelistSubjectsChangedDetails];
  case DBTEAMLOGEventDetailsTfaAddExceptionDetails:
    return [self.tfaAddExceptionDetails isEqual:anEventDetails.tfaAddExceptionDetails];
  case DBTEAMLOGEventDetailsTfaChangePolicyDetails:
    return [self.tfaChangePolicyDetails isEqual:anEventDetails.tfaChangePolicyDetails];
  case DBTEAMLOGEventDetailsTfaRemoveExceptionDetails:
    return [self.tfaRemoveExceptionDetails isEqual:anEventDetails.tfaRemoveExceptionDetails];
  case DBTEAMLOGEventDetailsTwoAccountChangePolicyDetails:
    return [self.twoAccountChangePolicyDetails isEqual:anEventDetails.twoAccountChangePolicyDetails];
  case DBTEAMLOGEventDetailsViewerInfoPolicyChangedDetails:
    return [self.viewerInfoPolicyChangedDetails isEqual:anEventDetails.viewerInfoPolicyChangedDetails];
  case DBTEAMLOGEventDetailsWatermarkingPolicyChangedDetails:
    return [self.watermarkingPolicyChangedDetails isEqual:anEventDetails.watermarkingPolicyChangedDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeActiveSessionLimitDetails:
    return [self.webSessionsChangeActiveSessionLimitDetails
        isEqual:anEventDetails.webSessionsChangeActiveSessionLimitDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeFixedLengthPolicyDetails:
    return [self.webSessionsChangeFixedLengthPolicyDetails
        isEqual:anEventDetails.webSessionsChangeFixedLengthPolicyDetails];
  case DBTEAMLOGEventDetailsWebSessionsChangeIdleLengthPolicyDetails:
    return
        [self.webSessionsChangeIdleLengthPolicyDetails isEqual:anEventDetails.webSessionsChangeIdleLengthPolicyDetails];
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestSuccessfulDetails:
    return [self.dataResidencyMigrationRequestSuccessfulDetails
        isEqual:anEventDetails.dataResidencyMigrationRequestSuccessfulDetails];
  case DBTEAMLOGEventDetailsDataResidencyMigrationRequestUnsuccessfulDetails:
    return [self.dataResidencyMigrationRequestUnsuccessfulDetails
        isEqual:anEventDetails.dataResidencyMigrationRequestUnsuccessfulDetails];
  case DBTEAMLOGEventDetailsTeamMergeFromDetails:
    return [self.teamMergeFromDetails isEqual:anEventDetails.teamMergeFromDetails];
  case DBTEAMLOGEventDetailsTeamMergeToDetails:
    return [self.teamMergeToDetails isEqual:anEventDetails.teamMergeToDetails];
  case DBTEAMLOGEventDetailsTeamProfileAddBackgroundDetails:
    return [self.teamProfileAddBackgroundDetails isEqual:anEventDetails.teamProfileAddBackgroundDetails];
  case DBTEAMLOGEventDetailsTeamProfileAddLogoDetails:
    return [self.teamProfileAddLogoDetails isEqual:anEventDetails.teamProfileAddLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeBackgroundDetails:
    return [self.teamProfileChangeBackgroundDetails isEqual:anEventDetails.teamProfileChangeBackgroundDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeDefaultLanguageDetails:
    return
        [self.teamProfileChangeDefaultLanguageDetails isEqual:anEventDetails.teamProfileChangeDefaultLanguageDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeLogoDetails:
    return [self.teamProfileChangeLogoDetails isEqual:anEventDetails.teamProfileChangeLogoDetails];
  case DBTEAMLOGEventDetailsTeamProfileChangeNameDetails:
    return [self.teamProfileChangeNameDetails isEqual:anEventDetails.teamProfileChangeNameDetails];
  case DBTEAMLOGEventDetailsTeamProfileRemoveBackgroundDetails:
    return [self.teamProfileRemoveBackgroundDetails isEqual:anEventDetails.teamProfileRemoveBackgroundDetails];
  case DBTEAMLOGEventDetailsTeamProfileRemoveLogoDetails:
    return [self.teamProfileRemoveLogoDetails isEqual:anEventDetails.teamProfileRemoveLogoDetails];
  case DBTEAMLOGEventDetailsTfaAddBackupPhoneDetails:
    return [self.tfaAddBackupPhoneDetails isEqual:anEventDetails.tfaAddBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaAddSecurityKeyDetails:
    return [self.tfaAddSecurityKeyDetails isEqual:anEventDetails.tfaAddSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaChangeBackupPhoneDetails:
    return [self.tfaChangeBackupPhoneDetails isEqual:anEventDetails.tfaChangeBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaChangeStatusDetails:
    return [self.tfaChangeStatusDetails isEqual:anEventDetails.tfaChangeStatusDetails];
  case DBTEAMLOGEventDetailsTfaRemoveBackupPhoneDetails:
    return [self.tfaRemoveBackupPhoneDetails isEqual:anEventDetails.tfaRemoveBackupPhoneDetails];
  case DBTEAMLOGEventDetailsTfaRemoveSecurityKeyDetails:
    return [self.tfaRemoveSecurityKeyDetails isEqual:anEventDetails.tfaRemoveSecurityKeyDetails];
  case DBTEAMLOGEventDetailsTfaResetDetails:
    return [self.tfaResetDetails isEqual:anEventDetails.tfaResetDetails];
  case DBTEAMLOGEventDetailsChangedEnterpriseAdminRoleDetails:
    return [self.changedEnterpriseAdminRoleDetails isEqual:anEventDetails.changedEnterpriseAdminRoleDetails];
  case DBTEAMLOGEventDetailsChangedEnterpriseConnectedTeamStatusDetails:
    return [self.changedEnterpriseConnectedTeamStatusDetails
        isEqual:anEventDetails.changedEnterpriseConnectedTeamStatusDetails];
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDetails:
    return [self.endedEnterpriseAdminSessionDetails isEqual:anEventDetails.endedEnterpriseAdminSessionDetails];
  case DBTEAMLOGEventDetailsEndedEnterpriseAdminSessionDeprecatedDetails:
    return [self.endedEnterpriseAdminSessionDeprecatedDetails
        isEqual:anEventDetails.endedEnterpriseAdminSessionDeprecatedDetails];
  case DBTEAMLOGEventDetailsEnterpriseSettingsLockingDetails:
    return [self.enterpriseSettingsLockingDetails isEqual:anEventDetails.enterpriseSettingsLockingDetails];
  case DBTEAMLOGEventDetailsGuestAdminChangeStatusDetails:
    return [self.guestAdminChangeStatusDetails isEqual:anEventDetails.guestAdminChangeStatusDetails];
  case DBTEAMLOGEventDetailsStartedEnterpriseAdminSessionDetails:
    return [self.startedEnterpriseAdminSessionDetails isEqual:anEventDetails.startedEnterpriseAdminSessionDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedDetails:
    return [self.teamMergeRequestAcceptedDetails isEqual:anEventDetails.teamMergeRequestAcceptedDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToPrimaryTeamDetails:
    return [self.teamMergeRequestAcceptedShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestAcceptedShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestAcceptedShownToSecondaryTeamDetails:
    return [self.teamMergeRequestAcceptedShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestAcceptedShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestAutoCanceledDetails:
    return [self.teamMergeRequestAutoCanceledDetails isEqual:anEventDetails.teamMergeRequestAutoCanceledDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledDetails:
    return [self.teamMergeRequestCanceledDetails isEqual:anEventDetails.teamMergeRequestCanceledDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToPrimaryTeamDetails:
    return [self.teamMergeRequestCanceledShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestCanceledShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestCanceledShownToSecondaryTeamDetails:
    return [self.teamMergeRequestCanceledShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestCanceledShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredDetails:
    return [self.teamMergeRequestExpiredDetails isEqual:anEventDetails.teamMergeRequestExpiredDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToPrimaryTeamDetails:
    return [self.teamMergeRequestExpiredShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestExpiredShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestExpiredShownToSecondaryTeamDetails:
    return [self.teamMergeRequestExpiredShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestExpiredShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToPrimaryTeamDetails:
    return [self.teamMergeRequestRejectedShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestRejectedShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestRejectedShownToSecondaryTeamDetails:
    return [self.teamMergeRequestRejectedShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestRejectedShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderDetails:
    return [self.teamMergeRequestReminderDetails isEqual:anEventDetails.teamMergeRequestReminderDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToPrimaryTeamDetails:
    return [self.teamMergeRequestReminderShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestReminderShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestReminderShownToSecondaryTeamDetails:
    return [self.teamMergeRequestReminderShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestReminderShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestRevokedDetails:
    return [self.teamMergeRequestRevokedDetails isEqual:anEventDetails.teamMergeRequestRevokedDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToPrimaryTeamDetails:
    return [self.teamMergeRequestSentShownToPrimaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestSentShownToPrimaryTeamDetails];
  case DBTEAMLOGEventDetailsTeamMergeRequestSentShownToSecondaryTeamDetails:
    return [self.teamMergeRequestSentShownToSecondaryTeamDetails
        isEqual:anEventDetails.teamMergeRequestSentShownToSecondaryTeamDetails];
  case DBTEAMLOGEventDetailsMissingDetails:
    return [self.missingDetails isEqual:anEventDetails.missingDetails];
  case DBTEAMLOGEventDetailsOther:
    return [[self tagName] isEqual:[anEventDetails tagName]];
  }
  return YES;
}

@end

#pragma mark - Serializer Object

@implementation DBTEAMLOGEventDetailsSerializer

+ (NSDictionary<NSString *, id> *)serialize:(DBTEAMLOGEventDetails *)valueObj {
  NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] init];

  if ([valueObj isAdminAlertingAlertStateChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer
                                           serialize:valueObj.adminAlertingAlertStateChangedDetails]];
    jsonDict[@".tag"] = @"admin_alerting_alert_state_changed_details";
  } else if ([valueObj isAdminAlertingChangedAlertConfigDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer
                                           serialize:valueObj.adminAlertingChangedAlertConfigDetails]];
    jsonDict[@".tag"] = @"admin_alerting_changed_alert_config_details";
  } else if ([valueObj isAdminAlertingTriggeredAlertDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer
                                           serialize:valueObj.adminAlertingTriggeredAlertDetails]];
    jsonDict[@".tag"] = @"admin_alerting_triggered_alert_details";
  } else if ([valueObj isAppBlockedByPermissionsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAppBlockedByPermissionsDetailsSerializer
                                           serialize:valueObj.appBlockedByPermissionsDetails]];
    jsonDict[@".tag"] = @"app_blocked_by_permissions_details";
  } else if ([valueObj isAppLinkTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAppLinkTeamDetailsSerializer serialize:valueObj.appLinkTeamDetails]];
    jsonDict[@".tag"] = @"app_link_team_details";
  } else if ([valueObj isAppLinkUserDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAppLinkUserDetailsSerializer serialize:valueObj.appLinkUserDetails]];
    jsonDict[@".tag"] = @"app_link_user_details";
  } else if ([valueObj isAppUnlinkTeamDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGAppUnlinkTeamDetailsSerializer serialize:valueObj.appUnlinkTeamDetails]];
    jsonDict[@".tag"] = @"app_unlink_team_details";
  } else if ([valueObj isAppUnlinkUserDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGAppUnlinkUserDetailsSerializer serialize:valueObj.appUnlinkUserDetails]];
    jsonDict[@".tag"] = @"app_unlink_user_details";
  } else if ([valueObj isIntegrationConnectedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGIntegrationConnectedDetailsSerializer
                                           serialize:valueObj.integrationConnectedDetails]];
    jsonDict[@".tag"] = @"integration_connected_details";
  } else if ([valueObj isIntegrationDisconnectedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGIntegrationDisconnectedDetailsSerializer
                                           serialize:valueObj.integrationDisconnectedDetails]];
    jsonDict[@".tag"] = @"integration_disconnected_details";
  } else if ([valueObj isFileAddCommentDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGFileAddCommentDetailsSerializer serialize:valueObj.fileAddCommentDetails]];
    jsonDict[@".tag"] = @"file_add_comment_details";
  } else if ([valueObj isFileChangeCommentSubscriptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer
                                           serialize:valueObj.fileChangeCommentSubscriptionDetails]];
    jsonDict[@".tag"] = @"file_change_comment_subscription_details";
  } else if ([valueObj isFileDeleteCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileDeleteCommentDetailsSerializer
                                           serialize:valueObj.fileDeleteCommentDetails]];
    jsonDict[@".tag"] = @"file_delete_comment_details";
  } else if ([valueObj isFileEditCommentDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGFileEditCommentDetailsSerializer serialize:valueObj.fileEditCommentDetails]];
    jsonDict[@".tag"] = @"file_edit_comment_details";
  } else if ([valueObj isFileLikeCommentDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGFileLikeCommentDetailsSerializer serialize:valueObj.fileLikeCommentDetails]];
    jsonDict[@".tag"] = @"file_like_comment_details";
  } else if ([valueObj isFileResolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileResolveCommentDetailsSerializer
                                           serialize:valueObj.fileResolveCommentDetails]];
    jsonDict[@".tag"] = @"file_resolve_comment_details";
  } else if ([valueObj isFileUnlikeCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileUnlikeCommentDetailsSerializer
                                           serialize:valueObj.fileUnlikeCommentDetails]];
    jsonDict[@".tag"] = @"file_unlike_comment_details";
  } else if ([valueObj isFileUnresolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileUnresolveCommentDetailsSerializer
                                           serialize:valueObj.fileUnresolveCommentDetails]];
    jsonDict[@".tag"] = @"file_unresolve_comment_details";
  } else if ([valueObj isGovernancePolicyAddFoldersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyAddFoldersDetailsSerializer
                                           serialize:valueObj.governancePolicyAddFoldersDetails]];
    jsonDict[@".tag"] = @"governance_policy_add_folders_details";
  } else if ([valueObj isGovernancePolicyAddFolderFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyAddFolderFailedDetailsSerializer
                                           serialize:valueObj.governancePolicyAddFolderFailedDetails]];
    jsonDict[@".tag"] = @"governance_policy_add_folder_failed_details";
  } else if ([valueObj isGovernancePolicyContentDisposedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyContentDisposedDetailsSerializer
                                           serialize:valueObj.governancePolicyContentDisposedDetails]];
    jsonDict[@".tag"] = @"governance_policy_content_disposed_details";
  } else if ([valueObj isGovernancePolicyCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyCreateDetailsSerializer
                                           serialize:valueObj.governancePolicyCreateDetails]];
    jsonDict[@".tag"] = @"governance_policy_create_details";
  } else if ([valueObj isGovernancePolicyDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyDeleteDetailsSerializer
                                           serialize:valueObj.governancePolicyDeleteDetails]];
    jsonDict[@".tag"] = @"governance_policy_delete_details";
  } else if ([valueObj isGovernancePolicyEditDetailsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyEditDetailsDetailsSerializer
                                           serialize:valueObj.governancePolicyEditDetailsDetails]];
    jsonDict[@".tag"] = @"governance_policy_edit_details_details";
  } else if ([valueObj isGovernancePolicyEditDurationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyEditDurationDetailsSerializer
                                           serialize:valueObj.governancePolicyEditDurationDetails]];
    jsonDict[@".tag"] = @"governance_policy_edit_duration_details";
  } else if ([valueObj isGovernancePolicyExportCreatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyExportCreatedDetailsSerializer
                                           serialize:valueObj.governancePolicyExportCreatedDetails]];
    jsonDict[@".tag"] = @"governance_policy_export_created_details";
  } else if ([valueObj isGovernancePolicyExportRemovedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyExportRemovedDetailsSerializer
                                           serialize:valueObj.governancePolicyExportRemovedDetails]];
    jsonDict[@".tag"] = @"governance_policy_export_removed_details";
  } else if ([valueObj isGovernancePolicyRemoveFoldersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyRemoveFoldersDetailsSerializer
                                           serialize:valueObj.governancePolicyRemoveFoldersDetails]];
    jsonDict[@".tag"] = @"governance_policy_remove_folders_details";
  } else if ([valueObj isGovernancePolicyReportCreatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyReportCreatedDetailsSerializer
                                           serialize:valueObj.governancePolicyReportCreatedDetails]];
    jsonDict[@".tag"] = @"governance_policy_report_created_details";
  } else if ([valueObj isGovernancePolicyZipPartDownloadedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGovernancePolicyZipPartDownloadedDetailsSerializer
                                           serialize:valueObj.governancePolicyZipPartDownloadedDetails]];
    jsonDict[@".tag"] = @"governance_policy_zip_part_downloaded_details";
  } else if ([valueObj isLegalHoldsActivateAHoldDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsActivateAHoldDetailsSerializer
                                           serialize:valueObj.legalHoldsActivateAHoldDetails]];
    jsonDict[@".tag"] = @"legal_holds_activate_a_hold_details";
  } else if ([valueObj isLegalHoldsAddMembersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsAddMembersDetailsSerializer
                                           serialize:valueObj.legalHoldsAddMembersDetails]];
    jsonDict[@".tag"] = @"legal_holds_add_members_details";
  } else if ([valueObj isLegalHoldsChangeHoldDetailsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsChangeHoldDetailsDetailsSerializer
                                           serialize:valueObj.legalHoldsChangeHoldDetailsDetails]];
    jsonDict[@".tag"] = @"legal_holds_change_hold_details_details";
  } else if ([valueObj isLegalHoldsChangeHoldNameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsChangeHoldNameDetailsSerializer
                                           serialize:valueObj.legalHoldsChangeHoldNameDetails]];
    jsonDict[@".tag"] = @"legal_holds_change_hold_name_details";
  } else if ([valueObj isLegalHoldsExportAHoldDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsExportAHoldDetailsSerializer
                                           serialize:valueObj.legalHoldsExportAHoldDetails]];
    jsonDict[@".tag"] = @"legal_holds_export_a_hold_details";
  } else if ([valueObj isLegalHoldsExportCancelledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsExportCancelledDetailsSerializer
                                           serialize:valueObj.legalHoldsExportCancelledDetails]];
    jsonDict[@".tag"] = @"legal_holds_export_cancelled_details";
  } else if ([valueObj isLegalHoldsExportDownloadedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsExportDownloadedDetailsSerializer
                                           serialize:valueObj.legalHoldsExportDownloadedDetails]];
    jsonDict[@".tag"] = @"legal_holds_export_downloaded_details";
  } else if ([valueObj isLegalHoldsExportRemovedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsExportRemovedDetailsSerializer
                                           serialize:valueObj.legalHoldsExportRemovedDetails]];
    jsonDict[@".tag"] = @"legal_holds_export_removed_details";
  } else if ([valueObj isLegalHoldsReleaseAHoldDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsReleaseAHoldDetailsSerializer
                                           serialize:valueObj.legalHoldsReleaseAHoldDetails]];
    jsonDict[@".tag"] = @"legal_holds_release_a_hold_details";
  } else if ([valueObj isLegalHoldsRemoveMembersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsRemoveMembersDetailsSerializer
                                           serialize:valueObj.legalHoldsRemoveMembersDetails]];
    jsonDict[@".tag"] = @"legal_holds_remove_members_details";
  } else if ([valueObj isLegalHoldsReportAHoldDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLegalHoldsReportAHoldDetailsSerializer
                                           serialize:valueObj.legalHoldsReportAHoldDetails]];
    jsonDict[@".tag"] = @"legal_holds_report_a_hold_details";
  } else if ([valueObj isDeviceChangeIpDesktopDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer
                                           serialize:valueObj.deviceChangeIpDesktopDetails]];
    jsonDict[@".tag"] = @"device_change_ip_desktop_details";
  } else if ([valueObj isDeviceChangeIpMobileDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceChangeIpMobileDetailsSerializer
                                           serialize:valueObj.deviceChangeIpMobileDetails]];
    jsonDict[@".tag"] = @"device_change_ip_mobile_details";
  } else if ([valueObj isDeviceChangeIpWebDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceChangeIpWebDetailsSerializer
                                           serialize:valueObj.deviceChangeIpWebDetails]];
    jsonDict[@".tag"] = @"device_change_ip_web_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer
                                           serialize:valueObj.deviceDeleteOnUnlinkFailDetails]];
    jsonDict[@".tag"] = @"device_delete_on_unlink_fail_details";
  } else if ([valueObj isDeviceDeleteOnUnlinkSuccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer
                                           serialize:valueObj.deviceDeleteOnUnlinkSuccessDetails]];
    jsonDict[@".tag"] = @"device_delete_on_unlink_success_details";
  } else if ([valueObj isDeviceLinkFailDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGDeviceLinkFailDetailsSerializer serialize:valueObj.deviceLinkFailDetails]];
    jsonDict[@".tag"] = @"device_link_fail_details";
  } else if ([valueObj isDeviceLinkSuccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceLinkSuccessDetailsSerializer
                                           serialize:valueObj.deviceLinkSuccessDetails]];
    jsonDict[@".tag"] = @"device_link_success_details";
  } else if ([valueObj isDeviceManagementDisabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceManagementDisabledDetailsSerializer
                                           serialize:valueObj.deviceManagementDisabledDetails]];
    jsonDict[@".tag"] = @"device_management_disabled_details";
  } else if ([valueObj isDeviceManagementEnabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceManagementEnabledDetailsSerializer
                                           serialize:valueObj.deviceManagementEnabledDetails]];
    jsonDict[@".tag"] = @"device_management_enabled_details";
  } else if ([valueObj isDeviceSyncBackupStatusChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer
                                           serialize:valueObj.deviceSyncBackupStatusChangedDetails]];
    jsonDict[@".tag"] = @"device_sync_backup_status_changed_details";
  } else if ([valueObj isDeviceUnlinkDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceUnlinkDetailsSerializer serialize:valueObj.deviceUnlinkDetails]];
    jsonDict[@".tag"] = @"device_unlink_details";
  } else if ([valueObj isDropboxPasswordsExportedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDropboxPasswordsExportedDetailsSerializer
                                           serialize:valueObj.dropboxPasswordsExportedDetails]];
    jsonDict[@".tag"] = @"dropbox_passwords_exported_details";
  } else if ([valueObj isDropboxPasswordsNewDeviceEnrolledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer
                                           serialize:valueObj.dropboxPasswordsNewDeviceEnrolledDetails]];
    jsonDict[@".tag"] = @"dropbox_passwords_new_device_enrolled_details";
  } else if ([valueObj isEmmRefreshAuthTokenDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer
                                           serialize:valueObj.emmRefreshAuthTokenDetails]];
    jsonDict[@".tag"] = @"emm_refresh_auth_token_details";
  } else if ([valueObj isExternalDriveBackupEligibilityStatusCheckedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsSerializer
                                           serialize:valueObj.externalDriveBackupEligibilityStatusCheckedDetails]];
    jsonDict[@".tag"] = @"external_drive_backup_eligibility_status_checked_details";
  } else if ([valueObj isExternalDriveBackupStatusChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExternalDriveBackupStatusChangedDetailsSerializer
                                           serialize:valueObj.externalDriveBackupStatusChangedDetails]];
    jsonDict[@".tag"] = @"external_drive_backup_status_changed_details";
  } else if ([valueObj isAccountCaptureChangeAvailabilityDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer
                                           serialize:valueObj.accountCaptureChangeAvailabilityDetails]];
    jsonDict[@".tag"] = @"account_capture_change_availability_details";
  } else if ([valueObj isAccountCaptureMigrateAccountDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer
                                           serialize:valueObj.accountCaptureMigrateAccountDetails]];
    jsonDict[@".tag"] = @"account_capture_migrate_account_details";
  } else if ([valueObj isAccountCaptureNotificationEmailsSentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer
                                           serialize:valueObj.accountCaptureNotificationEmailsSentDetails]];
    jsonDict[@".tag"] = @"account_capture_notification_emails_sent_details";
  } else if ([valueObj isAccountCaptureRelinquishAccountDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer
                                           serialize:valueObj.accountCaptureRelinquishAccountDetails]];
    jsonDict[@".tag"] = @"account_capture_relinquish_account_details";
  } else if ([valueObj isDisabledDomainInvitesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDisabledDomainInvitesDetailsSerializer
                                           serialize:valueObj.disabledDomainInvitesDetails]];
    jsonDict[@".tag"] = @"disabled_domain_invites_details";
  } else if ([valueObj isDomainInvitesApproveRequestToJoinTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer
                                           serialize:valueObj.domainInvitesApproveRequestToJoinTeamDetails]];
    jsonDict[@".tag"] = @"domain_invites_approve_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesDeclineRequestToJoinTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer
                                           serialize:valueObj.domainInvitesDeclineRequestToJoinTeamDetails]];
    jsonDict[@".tag"] = @"domain_invites_decline_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesEmailExistingUsersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer
                                           serialize:valueObj.domainInvitesEmailExistingUsersDetails]];
    jsonDict[@".tag"] = @"domain_invites_email_existing_users_details";
  } else if ([valueObj isDomainInvitesRequestToJoinTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer
                                           serialize:valueObj.domainInvitesRequestToJoinTeamDetails]];
    jsonDict[@".tag"] = @"domain_invites_request_to_join_team_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToNoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer
                                           serialize:valueObj.domainInvitesSetInviteNewUserPrefToNoDetails]];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_no_details";
  } else if ([valueObj isDomainInvitesSetInviteNewUserPrefToYesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer
                                           serialize:valueObj.domainInvitesSetInviteNewUserPrefToYesDetails]];
    jsonDict[@".tag"] = @"domain_invites_set_invite_new_user_pref_to_yes_details";
  } else if ([valueObj isDomainVerificationAddDomainFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer
                                           serialize:valueObj.domainVerificationAddDomainFailDetails]];
    jsonDict[@".tag"] = @"domain_verification_add_domain_fail_details";
  } else if ([valueObj isDomainVerificationAddDomainSuccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer
                                           serialize:valueObj.domainVerificationAddDomainSuccessDetails]];
    jsonDict[@".tag"] = @"domain_verification_add_domain_success_details";
  } else if ([valueObj isDomainVerificationRemoveDomainDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer
                                           serialize:valueObj.domainVerificationRemoveDomainDetails]];
    jsonDict[@".tag"] = @"domain_verification_remove_domain_details";
  } else if ([valueObj isEnabledDomainInvitesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEnabledDomainInvitesDetailsSerializer
                                           serialize:valueObj.enabledDomainInvitesDetails]];
    jsonDict[@".tag"] = @"enabled_domain_invites_details";
  } else if ([valueObj isApplyNamingConventionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGApplyNamingConventionDetailsSerializer
                                           serialize:valueObj.applyNamingConventionDetails]];
    jsonDict[@".tag"] = @"apply_naming_convention_details";
  } else if ([valueObj isCreateFolderDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGCreateFolderDetailsSerializer serialize:valueObj.createFolderDetails]];
    jsonDict[@".tag"] = @"create_folder_details";
  } else if ([valueObj isFileAddDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileAddDetailsSerializer serialize:valueObj.fileAddDetails]];
    jsonDict[@".tag"] = @"file_add_details";
  } else if ([valueObj isFileCopyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileCopyDetailsSerializer serialize:valueObj.fileCopyDetails]];
    jsonDict[@".tag"] = @"file_copy_details";
  } else if ([valueObj isFileDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileDeleteDetailsSerializer serialize:valueObj.fileDeleteDetails]];
    jsonDict[@".tag"] = @"file_delete_details";
  } else if ([valueObj isFileDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileDownloadDetailsSerializer serialize:valueObj.fileDownloadDetails]];
    jsonDict[@".tag"] = @"file_download_details";
  } else if ([valueObj isFileEditDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileEditDetailsSerializer serialize:valueObj.fileEditDetails]];
    jsonDict[@".tag"] = @"file_edit_details";
  } else if ([valueObj isFileGetCopyReferenceDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileGetCopyReferenceDetailsSerializer
                                           serialize:valueObj.fileGetCopyReferenceDetails]];
    jsonDict[@".tag"] = @"file_get_copy_reference_details";
  } else if ([valueObj isFileLockingLockStatusChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileLockingLockStatusChangedDetailsSerializer
                                           serialize:valueObj.fileLockingLockStatusChangedDetails]];
    jsonDict[@".tag"] = @"file_locking_lock_status_changed_details";
  } else if ([valueObj isFileMoveDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileMoveDetailsSerializer serialize:valueObj.fileMoveDetails]];
    jsonDict[@".tag"] = @"file_move_details";
  } else if ([valueObj isFilePermanentlyDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFilePermanentlyDeleteDetailsSerializer
                                           serialize:valueObj.filePermanentlyDeleteDetails]];
    jsonDict[@".tag"] = @"file_permanently_delete_details";
  } else if ([valueObj isFilePreviewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFilePreviewDetailsSerializer serialize:valueObj.filePreviewDetails]];
    jsonDict[@".tag"] = @"file_preview_details";
  } else if ([valueObj isFileRenameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRenameDetailsSerializer serialize:valueObj.fileRenameDetails]];
    jsonDict[@".tag"] = @"file_rename_details";
  } else if ([valueObj isFileRestoreDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRestoreDetailsSerializer serialize:valueObj.fileRestoreDetails]];
    jsonDict[@".tag"] = @"file_restore_details";
  } else if ([valueObj isFileRevertDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRevertDetailsSerializer serialize:valueObj.fileRevertDetails]];
    jsonDict[@".tag"] = @"file_revert_details";
  } else if ([valueObj isFileRollbackChangesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRollbackChangesDetailsSerializer
                                           serialize:valueObj.fileRollbackChangesDetails]];
    jsonDict[@".tag"] = @"file_rollback_changes_details";
  } else if ([valueObj isFileSaveCopyReferenceDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileSaveCopyReferenceDetailsSerializer
                                           serialize:valueObj.fileSaveCopyReferenceDetails]];
    jsonDict[@".tag"] = @"file_save_copy_reference_details";
  } else if ([valueObj isFolderOverviewDescriptionChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFolderOverviewDescriptionChangedDetailsSerializer
                                           serialize:valueObj.folderOverviewDescriptionChangedDetails]];
    jsonDict[@".tag"] = @"folder_overview_description_changed_details";
  } else if ([valueObj isFolderOverviewItemPinnedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFolderOverviewItemPinnedDetailsSerializer
                                           serialize:valueObj.folderOverviewItemPinnedDetails]];
    jsonDict[@".tag"] = @"folder_overview_item_pinned_details";
  } else if ([valueObj isFolderOverviewItemUnpinnedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFolderOverviewItemUnpinnedDetailsSerializer
                                           serialize:valueObj.folderOverviewItemUnpinnedDetails]];
    jsonDict[@".tag"] = @"folder_overview_item_unpinned_details";
  } else if ([valueObj isObjectLabelAddedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGObjectLabelAddedDetailsSerializer
                                           serialize:valueObj.objectLabelAddedDetails]];
    jsonDict[@".tag"] = @"object_label_added_details";
  } else if ([valueObj isObjectLabelRemovedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGObjectLabelRemovedDetailsSerializer
                                           serialize:valueObj.objectLabelRemovedDetails]];
    jsonDict[@".tag"] = @"object_label_removed_details";
  } else if ([valueObj isObjectLabelUpdatedValueDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGObjectLabelUpdatedValueDetailsSerializer
                                           serialize:valueObj.objectLabelUpdatedValueDetails]];
    jsonDict[@".tag"] = @"object_label_updated_value_details";
  } else if ([valueObj isOrganizeFolderWithTidyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGOrganizeFolderWithTidyDetailsSerializer
                                           serialize:valueObj.organizeFolderWithTidyDetails]];
    jsonDict[@".tag"] = @"organize_folder_with_tidy_details";
  } else if ([valueObj isRewindFolderDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGRewindFolderDetailsSerializer serialize:valueObj.rewindFolderDetails]];
    jsonDict[@".tag"] = @"rewind_folder_details";
  } else if ([valueObj isUndoNamingConventionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGUndoNamingConventionDetailsSerializer
                                           serialize:valueObj.undoNamingConventionDetails]];
    jsonDict[@".tag"] = @"undo_naming_convention_details";
  } else if ([valueObj isUndoOrganizeFolderWithTidyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGUndoOrganizeFolderWithTidyDetailsSerializer
                                           serialize:valueObj.undoOrganizeFolderWithTidyDetails]];
    jsonDict[@".tag"] = @"undo_organize_folder_with_tidy_details";
  } else if ([valueObj isUserTagsAddedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGUserTagsAddedDetailsSerializer serialize:valueObj.userTagsAddedDetails]];
    jsonDict[@".tag"] = @"user_tags_added_details";
  } else if ([valueObj isUserTagsRemovedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGUserTagsRemovedDetailsSerializer serialize:valueObj.userTagsRemovedDetails]];
    jsonDict[@".tag"] = @"user_tags_removed_details";
  } else if ([valueObj isEmailIngestReceiveFileDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmailIngestReceiveFileDetailsSerializer
                                           serialize:valueObj.emailIngestReceiveFileDetails]];
    jsonDict[@".tag"] = @"email_ingest_receive_file_details";
  } else if ([valueObj isFileRequestChangeDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestChangeDetailsSerializer
                                           serialize:valueObj.fileRequestChangeDetails]];
    jsonDict[@".tag"] = @"file_request_change_details";
  } else if ([valueObj isFileRequestCloseDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestCloseDetailsSerializer
                                           serialize:valueObj.fileRequestCloseDetails]];
    jsonDict[@".tag"] = @"file_request_close_details";
  } else if ([valueObj isFileRequestCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestCreateDetailsSerializer
                                           serialize:valueObj.fileRequestCreateDetails]];
    jsonDict[@".tag"] = @"file_request_create_details";
  } else if ([valueObj isFileRequestDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestDeleteDetailsSerializer
                                           serialize:valueObj.fileRequestDeleteDetails]];
    jsonDict[@".tag"] = @"file_request_delete_details";
  } else if ([valueObj isFileRequestReceiveFileDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestReceiveFileDetailsSerializer
                                           serialize:valueObj.fileRequestReceiveFileDetails]];
    jsonDict[@".tag"] = @"file_request_receive_file_details";
  } else if ([valueObj isGroupAddExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupAddExternalIdDetailsSerializer
                                           serialize:valueObj.groupAddExternalIdDetails]];
    jsonDict[@".tag"] = @"group_add_external_id_details";
  } else if ([valueObj isGroupAddMemberDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGGroupAddMemberDetailsSerializer serialize:valueObj.groupAddMemberDetails]];
    jsonDict[@".tag"] = @"group_add_member_details";
  } else if ([valueObj isGroupChangeExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupChangeExternalIdDetailsSerializer
                                           serialize:valueObj.groupChangeExternalIdDetails]];
    jsonDict[@".tag"] = @"group_change_external_id_details";
  } else if ([valueObj isGroupChangeManagementTypeDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupChangeManagementTypeDetailsSerializer
                                           serialize:valueObj.groupChangeManagementTypeDetails]];
    jsonDict[@".tag"] = @"group_change_management_type_details";
  } else if ([valueObj isGroupChangeMemberRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupChangeMemberRoleDetailsSerializer
                                           serialize:valueObj.groupChangeMemberRoleDetails]];
    jsonDict[@".tag"] = @"group_change_member_role_details";
  } else if ([valueObj isGroupCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupCreateDetailsSerializer serialize:valueObj.groupCreateDetails]];
    jsonDict[@".tag"] = @"group_create_details";
  } else if ([valueObj isGroupDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupDeleteDetailsSerializer serialize:valueObj.groupDeleteDetails]];
    jsonDict[@".tag"] = @"group_delete_details";
  } else if ([valueObj isGroupDescriptionUpdatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer
                                           serialize:valueObj.groupDescriptionUpdatedDetails]];
    jsonDict[@".tag"] = @"group_description_updated_details";
  } else if ([valueObj isGroupJoinPolicyUpdatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer
                                           serialize:valueObj.groupJoinPolicyUpdatedDetails]];
    jsonDict[@".tag"] = @"group_join_policy_updated_details";
  } else if ([valueObj isGroupMovedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupMovedDetailsSerializer serialize:valueObj.groupMovedDetails]];
    jsonDict[@".tag"] = @"group_moved_details";
  } else if ([valueObj isGroupRemoveExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupRemoveExternalIdDetailsSerializer
                                           serialize:valueObj.groupRemoveExternalIdDetails]];
    jsonDict[@".tag"] = @"group_remove_external_id_details";
  } else if ([valueObj isGroupRemoveMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupRemoveMemberDetailsSerializer
                                           serialize:valueObj.groupRemoveMemberDetails]];
    jsonDict[@".tag"] = @"group_remove_member_details";
  } else if ([valueObj isGroupRenameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupRenameDetailsSerializer serialize:valueObj.groupRenameDetails]];
    jsonDict[@".tag"] = @"group_rename_details";
  } else if ([valueObj isAccountLockOrUnlockedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountLockOrUnlockedDetailsSerializer
                                           serialize:valueObj.accountLockOrUnlockedDetails]];
    jsonDict[@".tag"] = @"account_lock_or_unlocked_details";
  } else if ([valueObj isEmmErrorDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmmErrorDetailsSerializer serialize:valueObj.emmErrorDetails]];
    jsonDict[@".tag"] = @"emm_error_details";
  } else if ([valueObj isGuestAdminSignedInViaTrustedTeamsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsSerializer
                                           serialize:valueObj.guestAdminSignedInViaTrustedTeamsDetails]];
    jsonDict[@".tag"] = @"guest_admin_signed_in_via_trusted_teams_details";
  } else if ([valueObj isGuestAdminSignedOutViaTrustedTeamsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsSerializer
                                           serialize:valueObj.guestAdminSignedOutViaTrustedTeamsDetails]];
    jsonDict[@".tag"] = @"guest_admin_signed_out_via_trusted_teams_details";
  } else if ([valueObj isLoginFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLoginFailDetailsSerializer serialize:valueObj.loginFailDetails]];
    jsonDict[@".tag"] = @"login_fail_details";
  } else if ([valueObj isLoginSuccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLoginSuccessDetailsSerializer serialize:valueObj.loginSuccessDetails]];
    jsonDict[@".tag"] = @"login_success_details";
  } else if ([valueObj isLogoutDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGLogoutDetailsSerializer serialize:valueObj.logoutDetails]];
    jsonDict[@".tag"] = @"logout_details";
  } else if ([valueObj isResellerSupportSessionEndDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGResellerSupportSessionEndDetailsSerializer
                                           serialize:valueObj.resellerSupportSessionEndDetails]];
    jsonDict[@".tag"] = @"reseller_support_session_end_details";
  } else if ([valueObj isResellerSupportSessionStartDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGResellerSupportSessionStartDetailsSerializer
                                           serialize:valueObj.resellerSupportSessionStartDetails]];
    jsonDict[@".tag"] = @"reseller_support_session_start_details";
  } else if ([valueObj isSignInAsSessionEndDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSignInAsSessionEndDetailsSerializer
                                           serialize:valueObj.signInAsSessionEndDetails]];
    jsonDict[@".tag"] = @"sign_in_as_session_end_details";
  } else if ([valueObj isSignInAsSessionStartDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSignInAsSessionStartDetailsSerializer
                                           serialize:valueObj.signInAsSessionStartDetails]];
    jsonDict[@".tag"] = @"sign_in_as_session_start_details";
  } else if ([valueObj isSsoErrorDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoErrorDetailsSerializer serialize:valueObj.ssoErrorDetails]];
    jsonDict[@".tag"] = @"sso_error_details";
  } else if ([valueObj isCreateTeamInviteLinkDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGCreateTeamInviteLinkDetailsSerializer
                                           serialize:valueObj.createTeamInviteLinkDetails]];
    jsonDict[@".tag"] = @"create_team_invite_link_details";
  } else if ([valueObj isDeleteTeamInviteLinkDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer
                                           serialize:valueObj.deleteTeamInviteLinkDetails]];
    jsonDict[@".tag"] = @"delete_team_invite_link_details";
  } else if ([valueObj isMemberAddExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberAddExternalIdDetailsSerializer
                                           serialize:valueObj.memberAddExternalIdDetails]];
    jsonDict[@".tag"] = @"member_add_external_id_details";
  } else if ([valueObj isMemberAddNameDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGMemberAddNameDetailsSerializer serialize:valueObj.memberAddNameDetails]];
    jsonDict[@".tag"] = @"member_add_name_details";
  } else if ([valueObj isMemberChangeAdminRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeAdminRoleDetailsSerializer
                                           serialize:valueObj.memberChangeAdminRoleDetails]];
    jsonDict[@".tag"] = @"member_change_admin_role_details";
  } else if ([valueObj isMemberChangeEmailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeEmailDetailsSerializer
                                           serialize:valueObj.memberChangeEmailDetails]];
    jsonDict[@".tag"] = @"member_change_email_details";
  } else if ([valueObj isMemberChangeExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeExternalIdDetailsSerializer
                                           serialize:valueObj.memberChangeExternalIdDetails]];
    jsonDict[@".tag"] = @"member_change_external_id_details";
  } else if ([valueObj isMemberChangeMembershipTypeDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer
                                           serialize:valueObj.memberChangeMembershipTypeDetails]];
    jsonDict[@".tag"] = @"member_change_membership_type_details";
  } else if ([valueObj isMemberChangeNameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeNameDetailsSerializer
                                           serialize:valueObj.memberChangeNameDetails]];
    jsonDict[@".tag"] = @"member_change_name_details";
  } else if ([valueObj isMemberChangeResellerRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeResellerRoleDetailsSerializer
                                           serialize:valueObj.memberChangeResellerRoleDetails]];
    jsonDict[@".tag"] = @"member_change_reseller_role_details";
  } else if ([valueObj isMemberChangeStatusDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberChangeStatusDetailsSerializer
                                           serialize:valueObj.memberChangeStatusDetails]];
    jsonDict[@".tag"] = @"member_change_status_details";
  } else if ([valueObj isMemberDeleteManualContactsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberDeleteManualContactsDetailsSerializer
                                           serialize:valueObj.memberDeleteManualContactsDetails]];
    jsonDict[@".tag"] = @"member_delete_manual_contacts_details";
  } else if ([valueObj isMemberDeleteProfilePhotoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberDeleteProfilePhotoDetailsSerializer
                                           serialize:valueObj.memberDeleteProfilePhotoDetails]];
    jsonDict[@".tag"] = @"member_delete_profile_photo_details";
  } else if ([valueObj isMemberPermanentlyDeleteAccountContentsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer
                                           serialize:valueObj.memberPermanentlyDeleteAccountContentsDetails]];
    jsonDict[@".tag"] = @"member_permanently_delete_account_contents_details";
  } else if ([valueObj isMemberRemoveExternalIdDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberRemoveExternalIdDetailsSerializer
                                           serialize:valueObj.memberRemoveExternalIdDetails]];
    jsonDict[@".tag"] = @"member_remove_external_id_details";
  } else if ([valueObj isMemberSetProfilePhotoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSetProfilePhotoDetailsSerializer
                                           serialize:valueObj.memberSetProfilePhotoDetails]];
    jsonDict[@".tag"] = @"member_set_profile_photo_details";
  } else if ([valueObj isMemberSpaceLimitsAddCustomQuotaDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsAddCustomQuotaDetails]];
    jsonDict[@".tag"] = @"member_space_limits_add_custom_quota_details";
  } else if ([valueObj isMemberSpaceLimitsChangeCustomQuotaDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsChangeCustomQuotaDetails]];
    jsonDict[@".tag"] = @"member_space_limits_change_custom_quota_details";
  } else if ([valueObj isMemberSpaceLimitsChangeStatusDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsChangeStatusDetails]];
    jsonDict[@".tag"] = @"member_space_limits_change_status_details";
  } else if ([valueObj isMemberSpaceLimitsRemoveCustomQuotaDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsRemoveCustomQuotaDetails]];
    jsonDict[@".tag"] = @"member_space_limits_remove_custom_quota_details";
  } else if ([valueObj isMemberSuggestDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGMemberSuggestDetailsSerializer serialize:valueObj.memberSuggestDetails]];
    jsonDict[@".tag"] = @"member_suggest_details";
  } else if ([valueObj isMemberTransferAccountContentsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberTransferAccountContentsDetailsSerializer
                                           serialize:valueObj.memberTransferAccountContentsDetails]];
    jsonDict[@".tag"] = @"member_transfer_account_contents_details";
  } else if ([valueObj isPendingSecondaryEmailAddedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPendingSecondaryEmailAddedDetailsSerializer
                                           serialize:valueObj.pendingSecondaryEmailAddedDetails]];
    jsonDict[@".tag"] = @"pending_secondary_email_added_details";
  } else if ([valueObj isSecondaryEmailDeletedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSecondaryEmailDeletedDetailsSerializer
                                           serialize:valueObj.secondaryEmailDeletedDetails]];
    jsonDict[@".tag"] = @"secondary_email_deleted_details";
  } else if ([valueObj isSecondaryEmailVerifiedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSecondaryEmailVerifiedDetailsSerializer
                                           serialize:valueObj.secondaryEmailVerifiedDetails]];
    jsonDict[@".tag"] = @"secondary_email_verified_details";
  } else if ([valueObj isSecondaryMailsPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer
                                           serialize:valueObj.secondaryMailsPolicyChangedDetails]];
    jsonDict[@".tag"] = @"secondary_mails_policy_changed_details";
  } else if ([valueObj isBinderAddPageDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGBinderAddPageDetailsSerializer serialize:valueObj.binderAddPageDetails]];
    jsonDict[@".tag"] = @"binder_add_page_details";
  } else if ([valueObj isBinderAddSectionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderAddSectionDetailsSerializer
                                           serialize:valueObj.binderAddSectionDetails]];
    jsonDict[@".tag"] = @"binder_add_section_details";
  } else if ([valueObj isBinderRemovePageDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderRemovePageDetailsSerializer
                                           serialize:valueObj.binderRemovePageDetails]];
    jsonDict[@".tag"] = @"binder_remove_page_details";
  } else if ([valueObj isBinderRemoveSectionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderRemoveSectionDetailsSerializer
                                           serialize:valueObj.binderRemoveSectionDetails]];
    jsonDict[@".tag"] = @"binder_remove_section_details";
  } else if ([valueObj isBinderRenamePageDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderRenamePageDetailsSerializer
                                           serialize:valueObj.binderRenamePageDetails]];
    jsonDict[@".tag"] = @"binder_rename_page_details";
  } else if ([valueObj isBinderRenameSectionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderRenameSectionDetailsSerializer
                                           serialize:valueObj.binderRenameSectionDetails]];
    jsonDict[@".tag"] = @"binder_rename_section_details";
  } else if ([valueObj isBinderReorderPageDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderReorderPageDetailsSerializer
                                           serialize:valueObj.binderReorderPageDetails]];
    jsonDict[@".tag"] = @"binder_reorder_page_details";
  } else if ([valueObj isBinderReorderSectionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGBinderReorderSectionDetailsSerializer
                                           serialize:valueObj.binderReorderSectionDetails]];
    jsonDict[@".tag"] = @"binder_reorder_section_details";
  } else if ([valueObj isPaperContentAddMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentAddMemberDetailsSerializer
                                           serialize:valueObj.paperContentAddMemberDetails]];
    jsonDict[@".tag"] = @"paper_content_add_member_details";
  } else if ([valueObj isPaperContentAddToFolderDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentAddToFolderDetailsSerializer
                                           serialize:valueObj.paperContentAddToFolderDetails]];
    jsonDict[@".tag"] = @"paper_content_add_to_folder_details";
  } else if ([valueObj isPaperContentArchiveDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentArchiveDetailsSerializer
                                           serialize:valueObj.paperContentArchiveDetails]];
    jsonDict[@".tag"] = @"paper_content_archive_details";
  } else if ([valueObj isPaperContentCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentCreateDetailsSerializer
                                           serialize:valueObj.paperContentCreateDetails]];
    jsonDict[@".tag"] = @"paper_content_create_details";
  } else if ([valueObj isPaperContentPermanentlyDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer
                                           serialize:valueObj.paperContentPermanentlyDeleteDetails]];
    jsonDict[@".tag"] = @"paper_content_permanently_delete_details";
  } else if ([valueObj isPaperContentRemoveFromFolderDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer
                                           serialize:valueObj.paperContentRemoveFromFolderDetails]];
    jsonDict[@".tag"] = @"paper_content_remove_from_folder_details";
  } else if ([valueObj isPaperContentRemoveMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentRemoveMemberDetailsSerializer
                                           serialize:valueObj.paperContentRemoveMemberDetails]];
    jsonDict[@".tag"] = @"paper_content_remove_member_details";
  } else if ([valueObj isPaperContentRenameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentRenameDetailsSerializer
                                           serialize:valueObj.paperContentRenameDetails]];
    jsonDict[@".tag"] = @"paper_content_rename_details";
  } else if ([valueObj isPaperContentRestoreDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperContentRestoreDetailsSerializer
                                           serialize:valueObj.paperContentRestoreDetails]];
    jsonDict[@".tag"] = @"paper_content_restore_details";
  } else if ([valueObj isPaperDocAddCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocAddCommentDetailsSerializer
                                           serialize:valueObj.paperDocAddCommentDetails]];
    jsonDict[@".tag"] = @"paper_doc_add_comment_details";
  } else if ([valueObj isPaperDocChangeMemberRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer
                                           serialize:valueObj.paperDocChangeMemberRoleDetails]];
    jsonDict[@".tag"] = @"paper_doc_change_member_role_details";
  } else if ([valueObj isPaperDocChangeSharingPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer
                                           serialize:valueObj.paperDocChangeSharingPolicyDetails]];
    jsonDict[@".tag"] = @"paper_doc_change_sharing_policy_details";
  } else if ([valueObj isPaperDocChangeSubscriptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer
                                           serialize:valueObj.paperDocChangeSubscriptionDetails]];
    jsonDict[@".tag"] = @"paper_doc_change_subscription_details";
  } else if ([valueObj isPaperDocDeletedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPaperDocDeletedDetailsSerializer serialize:valueObj.paperDocDeletedDetails]];
    jsonDict[@".tag"] = @"paper_doc_deleted_details";
  } else if ([valueObj isPaperDocDeleteCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocDeleteCommentDetailsSerializer
                                           serialize:valueObj.paperDocDeleteCommentDetails]];
    jsonDict[@".tag"] = @"paper_doc_delete_comment_details";
  } else if ([valueObj isPaperDocDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocDownloadDetailsSerializer
                                           serialize:valueObj.paperDocDownloadDetails]];
    jsonDict[@".tag"] = @"paper_doc_download_details";
  } else if ([valueObj isPaperDocEditDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocEditDetailsSerializer serialize:valueObj.paperDocEditDetails]];
    jsonDict[@".tag"] = @"paper_doc_edit_details";
  } else if ([valueObj isPaperDocEditCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocEditCommentDetailsSerializer
                                           serialize:valueObj.paperDocEditCommentDetails]];
    jsonDict[@".tag"] = @"paper_doc_edit_comment_details";
  } else if ([valueObj isPaperDocFollowedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocFollowedDetailsSerializer
                                           serialize:valueObj.paperDocFollowedDetails]];
    jsonDict[@".tag"] = @"paper_doc_followed_details";
  } else if ([valueObj isPaperDocMentionDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPaperDocMentionDetailsSerializer serialize:valueObj.paperDocMentionDetails]];
    jsonDict[@".tag"] = @"paper_doc_mention_details";
  } else if ([valueObj isPaperDocOwnershipChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocOwnershipChangedDetailsSerializer
                                           serialize:valueObj.paperDocOwnershipChangedDetails]];
    jsonDict[@".tag"] = @"paper_doc_ownership_changed_details";
  } else if ([valueObj isPaperDocRequestAccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocRequestAccessDetailsSerializer
                                           serialize:valueObj.paperDocRequestAccessDetails]];
    jsonDict[@".tag"] = @"paper_doc_request_access_details";
  } else if ([valueObj isPaperDocResolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocResolveCommentDetailsSerializer
                                           serialize:valueObj.paperDocResolveCommentDetails]];
    jsonDict[@".tag"] = @"paper_doc_resolve_comment_details";
  } else if ([valueObj isPaperDocRevertDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPaperDocRevertDetailsSerializer serialize:valueObj.paperDocRevertDetails]];
    jsonDict[@".tag"] = @"paper_doc_revert_details";
  } else if ([valueObj isPaperDocSlackShareDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocSlackShareDetailsSerializer
                                           serialize:valueObj.paperDocSlackShareDetails]];
    jsonDict[@".tag"] = @"paper_doc_slack_share_details";
  } else if ([valueObj isPaperDocTeamInviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocTeamInviteDetailsSerializer
                                           serialize:valueObj.paperDocTeamInviteDetails]];
    jsonDict[@".tag"] = @"paper_doc_team_invite_details";
  } else if ([valueObj isPaperDocTrashedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPaperDocTrashedDetailsSerializer serialize:valueObj.paperDocTrashedDetails]];
    jsonDict[@".tag"] = @"paper_doc_trashed_details";
  } else if ([valueObj isPaperDocUnresolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer
                                           serialize:valueObj.paperDocUnresolveCommentDetails]];
    jsonDict[@".tag"] = @"paper_doc_unresolve_comment_details";
  } else if ([valueObj isPaperDocUntrashedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocUntrashedDetailsSerializer
                                           serialize:valueObj.paperDocUntrashedDetails]];
    jsonDict[@".tag"] = @"paper_doc_untrashed_details";
  } else if ([valueObj isPaperDocViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDocViewDetailsSerializer serialize:valueObj.paperDocViewDetails]];
    jsonDict[@".tag"] = @"paper_doc_view_details";
  } else if ([valueObj isPaperExternalViewAllowDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperExternalViewAllowDetailsSerializer
                                           serialize:valueObj.paperExternalViewAllowDetails]];
    jsonDict[@".tag"] = @"paper_external_view_allow_details";
  } else if ([valueObj isPaperExternalViewDefaultTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer
                                           serialize:valueObj.paperExternalViewDefaultTeamDetails]];
    jsonDict[@".tag"] = @"paper_external_view_default_team_details";
  } else if ([valueObj isPaperExternalViewForbidDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperExternalViewForbidDetailsSerializer
                                           serialize:valueObj.paperExternalViewForbidDetails]];
    jsonDict[@".tag"] = @"paper_external_view_forbid_details";
  } else if ([valueObj isPaperFolderChangeSubscriptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer
                                           serialize:valueObj.paperFolderChangeSubscriptionDetails]];
    jsonDict[@".tag"] = @"paper_folder_change_subscription_details";
  } else if ([valueObj isPaperFolderDeletedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperFolderDeletedDetailsSerializer
                                           serialize:valueObj.paperFolderDeletedDetails]];
    jsonDict[@".tag"] = @"paper_folder_deleted_details";
  } else if ([valueObj isPaperFolderFollowedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperFolderFollowedDetailsSerializer
                                           serialize:valueObj.paperFolderFollowedDetails]];
    jsonDict[@".tag"] = @"paper_folder_followed_details";
  } else if ([valueObj isPaperFolderTeamInviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperFolderTeamInviteDetailsSerializer
                                           serialize:valueObj.paperFolderTeamInviteDetails]];
    jsonDict[@".tag"] = @"paper_folder_team_invite_details";
  } else if ([valueObj isPaperPublishedLinkChangePermissionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperPublishedLinkChangePermissionDetailsSerializer
                                           serialize:valueObj.paperPublishedLinkChangePermissionDetails]];
    jsonDict[@".tag"] = @"paper_published_link_change_permission_details";
  } else if ([valueObj isPaperPublishedLinkCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperPublishedLinkCreateDetailsSerializer
                                           serialize:valueObj.paperPublishedLinkCreateDetails]];
    jsonDict[@".tag"] = @"paper_published_link_create_details";
  } else if ([valueObj isPaperPublishedLinkDisabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperPublishedLinkDisabledDetailsSerializer
                                           serialize:valueObj.paperPublishedLinkDisabledDetails]];
    jsonDict[@".tag"] = @"paper_published_link_disabled_details";
  } else if ([valueObj isPaperPublishedLinkViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperPublishedLinkViewDetailsSerializer
                                           serialize:valueObj.paperPublishedLinkViewDetails]];
    jsonDict[@".tag"] = @"paper_published_link_view_details";
  } else if ([valueObj isPasswordChangeDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPasswordChangeDetailsSerializer serialize:valueObj.passwordChangeDetails]];
    jsonDict[@".tag"] = @"password_change_details";
  } else if ([valueObj isPasswordResetDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGPasswordResetDetailsSerializer serialize:valueObj.passwordResetDetails]];
    jsonDict[@".tag"] = @"password_reset_details";
  } else if ([valueObj isPasswordResetAllDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPasswordResetAllDetailsSerializer
                                           serialize:valueObj.passwordResetAllDetails]];
    jsonDict[@".tag"] = @"password_reset_all_details";
  } else if ([valueObj isClassificationCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGClassificationCreateReportDetailsSerializer
                                           serialize:valueObj.classificationCreateReportDetails]];
    jsonDict[@".tag"] = @"classification_create_report_details";
  } else if ([valueObj isClassificationCreateReportFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGClassificationCreateReportFailDetailsSerializer
                                           serialize:valueObj.classificationCreateReportFailDetails]];
    jsonDict[@".tag"] = @"classification_create_report_fail_details";
  } else if ([valueObj isEmmCreateExceptionsReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer
                                           serialize:valueObj.emmCreateExceptionsReportDetails]];
    jsonDict[@".tag"] = @"emm_create_exceptions_report_details";
  } else if ([valueObj isEmmCreateUsageReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmmCreateUsageReportDetailsSerializer
                                           serialize:valueObj.emmCreateUsageReportDetails]];
    jsonDict[@".tag"] = @"emm_create_usage_report_details";
  } else if ([valueObj isExportMembersReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExportMembersReportDetailsSerializer
                                           serialize:valueObj.exportMembersReportDetails]];
    jsonDict[@".tag"] = @"export_members_report_details";
  } else if ([valueObj isExportMembersReportFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExportMembersReportFailDetailsSerializer
                                           serialize:valueObj.exportMembersReportFailDetails]];
    jsonDict[@".tag"] = @"export_members_report_fail_details";
  } else if ([valueObj isExternalSharingCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExternalSharingCreateReportDetailsSerializer
                                           serialize:valueObj.externalSharingCreateReportDetails]];
    jsonDict[@".tag"] = @"external_sharing_create_report_details";
  } else if ([valueObj isExternalSharingReportFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExternalSharingReportFailedDetailsSerializer
                                           serialize:valueObj.externalSharingReportFailedDetails]];
    jsonDict[@".tag"] = @"external_sharing_report_failed_details";
  } else if ([valueObj isNoExpirationLinkGenCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoExpirationLinkGenCreateReportDetailsSerializer
                                           serialize:valueObj.noExpirationLinkGenCreateReportDetails]];
    jsonDict[@".tag"] = @"no_expiration_link_gen_create_report_details";
  } else if ([valueObj isNoExpirationLinkGenReportFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoExpirationLinkGenReportFailedDetailsSerializer
                                           serialize:valueObj.noExpirationLinkGenReportFailedDetails]];
    jsonDict[@".tag"] = @"no_expiration_link_gen_report_failed_details";
  } else if ([valueObj isNoPasswordLinkGenCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoPasswordLinkGenCreateReportDetailsSerializer
                                           serialize:valueObj.noPasswordLinkGenCreateReportDetails]];
    jsonDict[@".tag"] = @"no_password_link_gen_create_report_details";
  } else if ([valueObj isNoPasswordLinkGenReportFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoPasswordLinkGenReportFailedDetailsSerializer
                                           serialize:valueObj.noPasswordLinkGenReportFailedDetails]];
    jsonDict[@".tag"] = @"no_password_link_gen_report_failed_details";
  } else if ([valueObj isNoPasswordLinkViewCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoPasswordLinkViewCreateReportDetailsSerializer
                                           serialize:valueObj.noPasswordLinkViewCreateReportDetails]];
    jsonDict[@".tag"] = @"no_password_link_view_create_report_details";
  } else if ([valueObj isNoPasswordLinkViewReportFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoPasswordLinkViewReportFailedDetailsSerializer
                                           serialize:valueObj.noPasswordLinkViewReportFailedDetails]];
    jsonDict[@".tag"] = @"no_password_link_view_report_failed_details";
  } else if ([valueObj isOutdatedLinkViewCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGOutdatedLinkViewCreateReportDetailsSerializer
                                           serialize:valueObj.outdatedLinkViewCreateReportDetails]];
    jsonDict[@".tag"] = @"outdated_link_view_create_report_details";
  } else if ([valueObj isOutdatedLinkViewReportFailedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGOutdatedLinkViewReportFailedDetailsSerializer
                                           serialize:valueObj.outdatedLinkViewReportFailedDetails]];
    jsonDict[@".tag"] = @"outdated_link_view_report_failed_details";
  } else if ([valueObj isPaperAdminExportStartDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperAdminExportStartDetailsSerializer
                                           serialize:valueObj.paperAdminExportStartDetails]];
    jsonDict[@".tag"] = @"paper_admin_export_start_details";
  } else if ([valueObj isSmartSyncCreateAdminPrivilegeReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer
                                           serialize:valueObj.smartSyncCreateAdminPrivilegeReportDetails]];
    jsonDict[@".tag"] = @"smart_sync_create_admin_privilege_report_details";
  } else if ([valueObj isTeamActivityCreateReportDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamActivityCreateReportDetailsSerializer
                                           serialize:valueObj.teamActivityCreateReportDetails]];
    jsonDict[@".tag"] = @"team_activity_create_report_details";
  } else if ([valueObj isTeamActivityCreateReportFailDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamActivityCreateReportFailDetailsSerializer
                                           serialize:valueObj.teamActivityCreateReportFailDetails]];
    jsonDict[@".tag"] = @"team_activity_create_report_fail_details";
  } else if ([valueObj isCollectionShareDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGCollectionShareDetailsSerializer serialize:valueObj.collectionShareDetails]];
    jsonDict[@".tag"] = @"collection_share_details";
  } else if ([valueObj isFileTransfersFileAddDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersFileAddDetailsSerializer
                                           serialize:valueObj.fileTransfersFileAddDetails]];
    jsonDict[@".tag"] = @"file_transfers_file_add_details";
  } else if ([valueObj isFileTransfersTransferDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersTransferDeleteDetailsSerializer
                                           serialize:valueObj.fileTransfersTransferDeleteDetails]];
    jsonDict[@".tag"] = @"file_transfers_transfer_delete_details";
  } else if ([valueObj isFileTransfersTransferDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersTransferDownloadDetailsSerializer
                                           serialize:valueObj.fileTransfersTransferDownloadDetails]];
    jsonDict[@".tag"] = @"file_transfers_transfer_download_details";
  } else if ([valueObj isFileTransfersTransferSendDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersTransferSendDetailsSerializer
                                           serialize:valueObj.fileTransfersTransferSendDetails]];
    jsonDict[@".tag"] = @"file_transfers_transfer_send_details";
  } else if ([valueObj isFileTransfersTransferViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersTransferViewDetailsSerializer
                                           serialize:valueObj.fileTransfersTransferViewDetails]];
    jsonDict[@".tag"] = @"file_transfers_transfer_view_details";
  } else if ([valueObj isNoteAclInviteOnlyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoteAclInviteOnlyDetailsSerializer
                                           serialize:valueObj.noteAclInviteOnlyDetails]];
    jsonDict[@".tag"] = @"note_acl_invite_only_details";
  } else if ([valueObj isNoteAclLinkDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoteAclLinkDetailsSerializer serialize:valueObj.noteAclLinkDetails]];
    jsonDict[@".tag"] = @"note_acl_link_details";
  } else if ([valueObj isNoteAclTeamLinkDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGNoteAclTeamLinkDetailsSerializer serialize:valueObj.noteAclTeamLinkDetails]];
    jsonDict[@".tag"] = @"note_acl_team_link_details";
  } else if ([valueObj isNoteSharedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoteSharedDetailsSerializer serialize:valueObj.noteSharedDetails]];
    jsonDict[@".tag"] = @"note_shared_details";
  } else if ([valueObj isNoteShareReceiveDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNoteShareReceiveDetailsSerializer
                                           serialize:valueObj.noteShareReceiveDetails]];
    jsonDict[@".tag"] = @"note_share_receive_details";
  } else if ([valueObj isOpenNoteSharedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGOpenNoteSharedDetailsSerializer serialize:valueObj.openNoteSharedDetails]];
    jsonDict[@".tag"] = @"open_note_shared_details";
  } else if ([valueObj isSfAddGroupDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfAddGroupDetailsSerializer serialize:valueObj.sfAddGroupDetails]];
    jsonDict[@".tag"] = @"sf_add_group_details";
  } else if ([valueObj isSfAllowNonMembersToViewSharedLinksDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer
                                           serialize:valueObj.sfAllowNonMembersToViewSharedLinksDetails]];
    jsonDict[@".tag"] = @"sf_allow_non_members_to_view_shared_links_details";
  } else if ([valueObj isSfExternalInviteWarnDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfExternalInviteWarnDetailsSerializer
                                           serialize:valueObj.sfExternalInviteWarnDetails]];
    jsonDict[@".tag"] = @"sf_external_invite_warn_details";
  } else if ([valueObj isSfFbInviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfFbInviteDetailsSerializer serialize:valueObj.sfFbInviteDetails]];
    jsonDict[@".tag"] = @"sf_fb_invite_details";
  } else if ([valueObj isSfFbInviteChangeRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer
                                           serialize:valueObj.sfFbInviteChangeRoleDetails]];
    jsonDict[@".tag"] = @"sf_fb_invite_change_role_details";
  } else if ([valueObj isSfFbUninviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfFbUninviteDetailsSerializer serialize:valueObj.sfFbUninviteDetails]];
    jsonDict[@".tag"] = @"sf_fb_uninvite_details";
  } else if ([valueObj isSfInviteGroupDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSfInviteGroupDetailsSerializer serialize:valueObj.sfInviteGroupDetails]];
    jsonDict[@".tag"] = @"sf_invite_group_details";
  } else if ([valueObj isSfTeamGrantAccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfTeamGrantAccessDetailsSerializer
                                           serialize:valueObj.sfTeamGrantAccessDetails]];
    jsonDict[@".tag"] = @"sf_team_grant_access_details";
  } else if ([valueObj isSfTeamInviteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfTeamInviteDetailsSerializer serialize:valueObj.sfTeamInviteDetails]];
    jsonDict[@".tag"] = @"sf_team_invite_details";
  } else if ([valueObj isSfTeamInviteChangeRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer
                                           serialize:valueObj.sfTeamInviteChangeRoleDetails]];
    jsonDict[@".tag"] = @"sf_team_invite_change_role_details";
  } else if ([valueObj isSfTeamJoinDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfTeamJoinDetailsSerializer serialize:valueObj.sfTeamJoinDetails]];
    jsonDict[@".tag"] = @"sf_team_join_details";
  } else if ([valueObj isSfTeamJoinFromOobLinkDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer
                                           serialize:valueObj.sfTeamJoinFromOobLinkDetails]];
    jsonDict[@".tag"] = @"sf_team_join_from_oob_link_details";
  } else if ([valueObj isSfTeamUninviteDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSfTeamUninviteDetailsSerializer serialize:valueObj.sfTeamUninviteDetails]];
    jsonDict[@".tag"] = @"sf_team_uninvite_details";
  } else if ([valueObj isSharedContentAddInviteesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentAddInviteesDetailsSerializer
                                           serialize:valueObj.sharedContentAddInviteesDetails]];
    jsonDict[@".tag"] = @"shared_content_add_invitees_details";
  } else if ([valueObj isSharedContentAddLinkExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer
                                           serialize:valueObj.sharedContentAddLinkExpiryDetails]];
    jsonDict[@".tag"] = @"shared_content_add_link_expiry_details";
  } else if ([valueObj isSharedContentAddLinkPasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer
                                           serialize:valueObj.sharedContentAddLinkPasswordDetails]];
    jsonDict[@".tag"] = @"shared_content_add_link_password_details";
  } else if ([valueObj isSharedContentAddMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentAddMemberDetailsSerializer
                                           serialize:valueObj.sharedContentAddMemberDetails]];
    jsonDict[@".tag"] = @"shared_content_add_member_details";
  } else if ([valueObj isSharedContentChangeDownloadsPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer
                                           serialize:valueObj.sharedContentChangeDownloadsPolicyDetails]];
    jsonDict[@".tag"] = @"shared_content_change_downloads_policy_details";
  } else if ([valueObj isSharedContentChangeInviteeRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer
                                           serialize:valueObj.sharedContentChangeInviteeRoleDetails]];
    jsonDict[@".tag"] = @"shared_content_change_invitee_role_details";
  } else if ([valueObj isSharedContentChangeLinkAudienceDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer
                                           serialize:valueObj.sharedContentChangeLinkAudienceDetails]];
    jsonDict[@".tag"] = @"shared_content_change_link_audience_details";
  } else if ([valueObj isSharedContentChangeLinkExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer
                                           serialize:valueObj.sharedContentChangeLinkExpiryDetails]];
    jsonDict[@".tag"] = @"shared_content_change_link_expiry_details";
  } else if ([valueObj isSharedContentChangeLinkPasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer
                                           serialize:valueObj.sharedContentChangeLinkPasswordDetails]];
    jsonDict[@".tag"] = @"shared_content_change_link_password_details";
  } else if ([valueObj isSharedContentChangeMemberRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer
                                           serialize:valueObj.sharedContentChangeMemberRoleDetails]];
    jsonDict[@".tag"] = @"shared_content_change_member_role_details";
  } else if ([valueObj isSharedContentChangeViewerInfoPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer
                                           serialize:valueObj.sharedContentChangeViewerInfoPolicyDetails]];
    jsonDict[@".tag"] = @"shared_content_change_viewer_info_policy_details";
  } else if ([valueObj isSharedContentClaimInvitationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentClaimInvitationDetailsSerializer
                                           serialize:valueObj.sharedContentClaimInvitationDetails]];
    jsonDict[@".tag"] = @"shared_content_claim_invitation_details";
  } else if ([valueObj isSharedContentCopyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentCopyDetailsSerializer
                                           serialize:valueObj.sharedContentCopyDetails]];
    jsonDict[@".tag"] = @"shared_content_copy_details";
  } else if ([valueObj isSharedContentDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentDownloadDetailsSerializer
                                           serialize:valueObj.sharedContentDownloadDetails]];
    jsonDict[@".tag"] = @"shared_content_download_details";
  } else if ([valueObj isSharedContentRelinquishMembershipDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer
                                           serialize:valueObj.sharedContentRelinquishMembershipDetails]];
    jsonDict[@".tag"] = @"shared_content_relinquish_membership_details";
  } else if ([valueObj isSharedContentRemoveInviteesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer
                                           serialize:valueObj.sharedContentRemoveInviteesDetails]];
    jsonDict[@".tag"] = @"shared_content_remove_invitees_details";
  } else if ([valueObj isSharedContentRemoveLinkExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer
                                           serialize:valueObj.sharedContentRemoveLinkExpiryDetails]];
    jsonDict[@".tag"] = @"shared_content_remove_link_expiry_details";
  } else if ([valueObj isSharedContentRemoveLinkPasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer
                                           serialize:valueObj.sharedContentRemoveLinkPasswordDetails]];
    jsonDict[@".tag"] = @"shared_content_remove_link_password_details";
  } else if ([valueObj isSharedContentRemoveMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRemoveMemberDetailsSerializer
                                           serialize:valueObj.sharedContentRemoveMemberDetails]];
    jsonDict[@".tag"] = @"shared_content_remove_member_details";
  } else if ([valueObj isSharedContentRequestAccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRequestAccessDetailsSerializer
                                           serialize:valueObj.sharedContentRequestAccessDetails]];
    jsonDict[@".tag"] = @"shared_content_request_access_details";
  } else if ([valueObj isSharedContentRestoreInviteesDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRestoreInviteesDetailsSerializer
                                           serialize:valueObj.sharedContentRestoreInviteesDetails]];
    jsonDict[@".tag"] = @"shared_content_restore_invitees_details";
  } else if ([valueObj isSharedContentRestoreMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentRestoreMemberDetailsSerializer
                                           serialize:valueObj.sharedContentRestoreMemberDetails]];
    jsonDict[@".tag"] = @"shared_content_restore_member_details";
  } else if ([valueObj isSharedContentUnshareDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentUnshareDetailsSerializer
                                           serialize:valueObj.sharedContentUnshareDetails]];
    jsonDict[@".tag"] = @"shared_content_unshare_details";
  } else if ([valueObj isSharedContentViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedContentViewDetailsSerializer
                                           serialize:valueObj.sharedContentViewDetails]];
    jsonDict[@".tag"] = @"shared_content_view_details";
  } else if ([valueObj isSharedFolderChangeLinkPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer
                                           serialize:valueObj.sharedFolderChangeLinkPolicyDetails]];
    jsonDict[@".tag"] = @"shared_folder_change_link_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersInheritancePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer
                                           serialize:valueObj.sharedFolderChangeMembersInheritancePolicyDetails]];
    jsonDict[@".tag"] = @"shared_folder_change_members_inheritance_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersManagementPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer
                                           serialize:valueObj.sharedFolderChangeMembersManagementPolicyDetails]];
    jsonDict[@".tag"] = @"shared_folder_change_members_management_policy_details";
  } else if ([valueObj isSharedFolderChangeMembersPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer
                                           serialize:valueObj.sharedFolderChangeMembersPolicyDetails]];
    jsonDict[@".tag"] = @"shared_folder_change_members_policy_details";
  } else if ([valueObj isSharedFolderCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderCreateDetailsSerializer
                                           serialize:valueObj.sharedFolderCreateDetails]];
    jsonDict[@".tag"] = @"shared_folder_create_details";
  } else if ([valueObj isSharedFolderDeclineInvitationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer
                                           serialize:valueObj.sharedFolderDeclineInvitationDetails]];
    jsonDict[@".tag"] = @"shared_folder_decline_invitation_details";
  } else if ([valueObj isSharedFolderMountDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderMountDetailsSerializer
                                           serialize:valueObj.sharedFolderMountDetails]];
    jsonDict[@".tag"] = @"shared_folder_mount_details";
  } else if ([valueObj isSharedFolderNestDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderNestDetailsSerializer
                                           serialize:valueObj.sharedFolderNestDetails]];
    jsonDict[@".tag"] = @"shared_folder_nest_details";
  } else if ([valueObj isSharedFolderTransferOwnershipDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer
                                           serialize:valueObj.sharedFolderTransferOwnershipDetails]];
    jsonDict[@".tag"] = @"shared_folder_transfer_ownership_details";
  } else if ([valueObj isSharedFolderUnmountDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedFolderUnmountDetailsSerializer
                                           serialize:valueObj.sharedFolderUnmountDetails]];
    jsonDict[@".tag"] = @"shared_folder_unmount_details";
  } else if ([valueObj isSharedLinkAddExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkAddExpiryDetailsSerializer
                                           serialize:valueObj.sharedLinkAddExpiryDetails]];
    jsonDict[@".tag"] = @"shared_link_add_expiry_details";
  } else if ([valueObj isSharedLinkChangeExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer
                                           serialize:valueObj.sharedLinkChangeExpiryDetails]];
    jsonDict[@".tag"] = @"shared_link_change_expiry_details";
  } else if ([valueObj isSharedLinkChangeVisibilityDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer
                                           serialize:valueObj.sharedLinkChangeVisibilityDetails]];
    jsonDict[@".tag"] = @"shared_link_change_visibility_details";
  } else if ([valueObj isSharedLinkCopyDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSharedLinkCopyDetailsSerializer serialize:valueObj.sharedLinkCopyDetails]];
    jsonDict[@".tag"] = @"shared_link_copy_details";
  } else if ([valueObj isSharedLinkCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkCreateDetailsSerializer
                                           serialize:valueObj.sharedLinkCreateDetails]];
    jsonDict[@".tag"] = @"shared_link_create_details";
  } else if ([valueObj isSharedLinkDisableDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkDisableDetailsSerializer
                                           serialize:valueObj.sharedLinkDisableDetails]];
    jsonDict[@".tag"] = @"shared_link_disable_details";
  } else if ([valueObj isSharedLinkDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkDownloadDetailsSerializer
                                           serialize:valueObj.sharedLinkDownloadDetails]];
    jsonDict[@".tag"] = @"shared_link_download_details";
  } else if ([valueObj isSharedLinkRemoveExpiryDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer
                                           serialize:valueObj.sharedLinkRemoveExpiryDetails]];
    jsonDict[@".tag"] = @"shared_link_remove_expiry_details";
  } else if ([valueObj isSharedLinkSettingsAddExpirationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsAddExpirationDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsAddExpirationDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_add_expiration_details";
  } else if ([valueObj isSharedLinkSettingsAddPasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsAddPasswordDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsAddPasswordDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_add_password_details";
  } else if ([valueObj isSharedLinkSettingsAllowDownloadDisabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsAllowDownloadDisabledDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_allow_download_disabled_details";
  } else if ([valueObj isSharedLinkSettingsAllowDownloadEnabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsAllowDownloadEnabledDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_allow_download_enabled_details";
  } else if ([valueObj isSharedLinkSettingsChangeAudienceDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsChangeAudienceDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsChangeAudienceDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_change_audience_details";
  } else if ([valueObj isSharedLinkSettingsChangeExpirationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsChangeExpirationDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsChangeExpirationDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_change_expiration_details";
  } else if ([valueObj isSharedLinkSettingsChangePasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsChangePasswordDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsChangePasswordDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_change_password_details";
  } else if ([valueObj isSharedLinkSettingsRemoveExpirationDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsRemoveExpirationDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_remove_expiration_details";
  } else if ([valueObj isSharedLinkSettingsRemovePasswordDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedLinkSettingsRemovePasswordDetailsSerializer
                                           serialize:valueObj.sharedLinkSettingsRemovePasswordDetails]];
    jsonDict[@".tag"] = @"shared_link_settings_remove_password_details";
  } else if ([valueObj isSharedLinkShareDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSharedLinkShareDetailsSerializer serialize:valueObj.sharedLinkShareDetails]];
    jsonDict[@".tag"] = @"shared_link_share_details";
  } else if ([valueObj isSharedLinkViewDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSharedLinkViewDetailsSerializer serialize:valueObj.sharedLinkViewDetails]];
    jsonDict[@".tag"] = @"shared_link_view_details";
  } else if ([valueObj isSharedNoteOpenedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharedNoteOpenedDetailsSerializer
                                           serialize:valueObj.sharedNoteOpenedDetails]];
    jsonDict[@".tag"] = @"shared_note_opened_details";
  } else if ([valueObj isShmodelDisableDownloadsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShmodelDisableDownloadsDetailsSerializer
                                           serialize:valueObj.shmodelDisableDownloadsDetails]];
    jsonDict[@".tag"] = @"shmodel_disable_downloads_details";
  } else if ([valueObj isShmodelEnableDownloadsDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShmodelEnableDownloadsDetailsSerializer
                                           serialize:valueObj.shmodelEnableDownloadsDetails]];
    jsonDict[@".tag"] = @"shmodel_enable_downloads_details";
  } else if ([valueObj isShmodelGroupShareDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShmodelGroupShareDetailsSerializer
                                           serialize:valueObj.shmodelGroupShareDetails]];
    jsonDict[@".tag"] = @"shmodel_group_share_details";
  } else if ([valueObj isShowcaseAccessGrantedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseAccessGrantedDetailsSerializer
                                           serialize:valueObj.showcaseAccessGrantedDetails]];
    jsonDict[@".tag"] = @"showcase_access_granted_details";
  } else if ([valueObj isShowcaseAddMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseAddMemberDetailsSerializer
                                           serialize:valueObj.showcaseAddMemberDetails]];
    jsonDict[@".tag"] = @"showcase_add_member_details";
  } else if ([valueObj isShowcaseArchivedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseArchivedDetailsSerializer
                                           serialize:valueObj.showcaseArchivedDetails]];
    jsonDict[@".tag"] = @"showcase_archived_details";
  } else if ([valueObj isShowcaseCreatedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGShowcaseCreatedDetailsSerializer serialize:valueObj.showcaseCreatedDetails]];
    jsonDict[@".tag"] = @"showcase_created_details";
  } else if ([valueObj isShowcaseDeleteCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseDeleteCommentDetailsSerializer
                                           serialize:valueObj.showcaseDeleteCommentDetails]];
    jsonDict[@".tag"] = @"showcase_delete_comment_details";
  } else if ([valueObj isShowcaseEditedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGShowcaseEditedDetailsSerializer serialize:valueObj.showcaseEditedDetails]];
    jsonDict[@".tag"] = @"showcase_edited_details";
  } else if ([valueObj isShowcaseEditCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseEditCommentDetailsSerializer
                                           serialize:valueObj.showcaseEditCommentDetails]];
    jsonDict[@".tag"] = @"showcase_edit_comment_details";
  } else if ([valueObj isShowcaseFileAddedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseFileAddedDetailsSerializer
                                           serialize:valueObj.showcaseFileAddedDetails]];
    jsonDict[@".tag"] = @"showcase_file_added_details";
  } else if ([valueObj isShowcaseFileDownloadDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseFileDownloadDetailsSerializer
                                           serialize:valueObj.showcaseFileDownloadDetails]];
    jsonDict[@".tag"] = @"showcase_file_download_details";
  } else if ([valueObj isShowcaseFileRemovedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseFileRemovedDetailsSerializer
                                           serialize:valueObj.showcaseFileRemovedDetails]];
    jsonDict[@".tag"] = @"showcase_file_removed_details";
  } else if ([valueObj isShowcaseFileViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseFileViewDetailsSerializer
                                           serialize:valueObj.showcaseFileViewDetails]];
    jsonDict[@".tag"] = @"showcase_file_view_details";
  } else if ([valueObj isShowcasePermanentlyDeletedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer
                                           serialize:valueObj.showcasePermanentlyDeletedDetails]];
    jsonDict[@".tag"] = @"showcase_permanently_deleted_details";
  } else if ([valueObj isShowcasePostCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcasePostCommentDetailsSerializer
                                           serialize:valueObj.showcasePostCommentDetails]];
    jsonDict[@".tag"] = @"showcase_post_comment_details";
  } else if ([valueObj isShowcaseRemoveMemberDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseRemoveMemberDetailsSerializer
                                           serialize:valueObj.showcaseRemoveMemberDetails]];
    jsonDict[@".tag"] = @"showcase_remove_member_details";
  } else if ([valueObj isShowcaseRenamedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGShowcaseRenamedDetailsSerializer serialize:valueObj.showcaseRenamedDetails]];
    jsonDict[@".tag"] = @"showcase_renamed_details";
  } else if ([valueObj isShowcaseRequestAccessDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseRequestAccessDetailsSerializer
                                           serialize:valueObj.showcaseRequestAccessDetails]];
    jsonDict[@".tag"] = @"showcase_request_access_details";
  } else if ([valueObj isShowcaseResolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseResolveCommentDetailsSerializer
                                           serialize:valueObj.showcaseResolveCommentDetails]];
    jsonDict[@".tag"] = @"showcase_resolve_comment_details";
  } else if ([valueObj isShowcaseRestoredDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseRestoredDetailsSerializer
                                           serialize:valueObj.showcaseRestoredDetails]];
    jsonDict[@".tag"] = @"showcase_restored_details";
  } else if ([valueObj isShowcaseTrashedDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGShowcaseTrashedDetailsSerializer serialize:valueObj.showcaseTrashedDetails]];
    jsonDict[@".tag"] = @"showcase_trashed_details";
  } else if ([valueObj isShowcaseTrashedDeprecatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer
                                           serialize:valueObj.showcaseTrashedDeprecatedDetails]];
    jsonDict[@".tag"] = @"showcase_trashed_deprecated_details";
  } else if ([valueObj isShowcaseUnresolveCommentDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer
                                           serialize:valueObj.showcaseUnresolveCommentDetails]];
    jsonDict[@".tag"] = @"showcase_unresolve_comment_details";
  } else if ([valueObj isShowcaseUntrashedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseUntrashedDetailsSerializer
                                           serialize:valueObj.showcaseUntrashedDetails]];
    jsonDict[@".tag"] = @"showcase_untrashed_details";
  } else if ([valueObj isShowcaseUntrashedDeprecatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer
                                           serialize:valueObj.showcaseUntrashedDeprecatedDetails]];
    jsonDict[@".tag"] = @"showcase_untrashed_deprecated_details";
  } else if ([valueObj isShowcaseViewDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseViewDetailsSerializer serialize:valueObj.showcaseViewDetails]];
    jsonDict[@".tag"] = @"showcase_view_details";
  } else if ([valueObj isSsoAddCertDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoAddCertDetailsSerializer serialize:valueObj.ssoAddCertDetails]];
    jsonDict[@".tag"] = @"sso_add_cert_details";
  } else if ([valueObj isSsoAddLoginUrlDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSsoAddLoginUrlDetailsSerializer serialize:valueObj.ssoAddLoginUrlDetails]];
    jsonDict[@".tag"] = @"sso_add_login_url_details";
  } else if ([valueObj isSsoAddLogoutUrlDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSsoAddLogoutUrlDetailsSerializer serialize:valueObj.ssoAddLogoutUrlDetails]];
    jsonDict[@".tag"] = @"sso_add_logout_url_details";
  } else if ([valueObj isSsoChangeCertDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSsoChangeCertDetailsSerializer serialize:valueObj.ssoChangeCertDetails]];
    jsonDict[@".tag"] = @"sso_change_cert_details";
  } else if ([valueObj isSsoChangeLoginUrlDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoChangeLoginUrlDetailsSerializer
                                           serialize:valueObj.ssoChangeLoginUrlDetails]];
    jsonDict[@".tag"] = @"sso_change_login_url_details";
  } else if ([valueObj isSsoChangeLogoutUrlDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer
                                           serialize:valueObj.ssoChangeLogoutUrlDetails]];
    jsonDict[@".tag"] = @"sso_change_logout_url_details";
  } else if ([valueObj isSsoChangeSamlIdentityModeDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer
                                           serialize:valueObj.ssoChangeSamlIdentityModeDetails]];
    jsonDict[@".tag"] = @"sso_change_saml_identity_mode_details";
  } else if ([valueObj isSsoRemoveCertDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSsoRemoveCertDetailsSerializer serialize:valueObj.ssoRemoveCertDetails]];
    jsonDict[@".tag"] = @"sso_remove_cert_details";
  } else if ([valueObj isSsoRemoveLoginUrlDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer
                                           serialize:valueObj.ssoRemoveLoginUrlDetails]];
    jsonDict[@".tag"] = @"sso_remove_login_url_details";
  } else if ([valueObj isSsoRemoveLogoutUrlDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer
                                           serialize:valueObj.ssoRemoveLogoutUrlDetails]];
    jsonDict[@".tag"] = @"sso_remove_logout_url_details";
  } else if ([valueObj isTeamFolderChangeStatusDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamFolderChangeStatusDetailsSerializer
                                           serialize:valueObj.teamFolderChangeStatusDetails]];
    jsonDict[@".tag"] = @"team_folder_change_status_details";
  } else if ([valueObj isTeamFolderCreateDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamFolderCreateDetailsSerializer
                                           serialize:valueObj.teamFolderCreateDetails]];
    jsonDict[@".tag"] = @"team_folder_create_details";
  } else if ([valueObj isTeamFolderDowngradeDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamFolderDowngradeDetailsSerializer
                                           serialize:valueObj.teamFolderDowngradeDetails]];
    jsonDict[@".tag"] = @"team_folder_downgrade_details";
  } else if ([valueObj isTeamFolderPermanentlyDeleteDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer
                                           serialize:valueObj.teamFolderPermanentlyDeleteDetails]];
    jsonDict[@".tag"] = @"team_folder_permanently_delete_details";
  } else if ([valueObj isTeamFolderRenameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamFolderRenameDetailsSerializer
                                           serialize:valueObj.teamFolderRenameDetails]];
    jsonDict[@".tag"] = @"team_folder_rename_details";
  } else if ([valueObj isTeamSelectiveSyncSettingsChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer
                                           serialize:valueObj.teamSelectiveSyncSettingsChangedDetails]];
    jsonDict[@".tag"] = @"team_selective_sync_settings_changed_details";
  } else if ([valueObj isAccountCaptureChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer
                                           serialize:valueObj.accountCaptureChangePolicyDetails]];
    jsonDict[@".tag"] = @"account_capture_change_policy_details";
  } else if ([valueObj isAdminEmailRemindersChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer
                                           serialize:valueObj.adminEmailRemindersChangedDetails]];
    jsonDict[@".tag"] = @"admin_email_reminders_changed_details";
  } else if ([valueObj isAllowDownloadDisabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAllowDownloadDisabledDetailsSerializer
                                           serialize:valueObj.allowDownloadDisabledDetails]];
    jsonDict[@".tag"] = @"allow_download_disabled_details";
  } else if ([valueObj isAllowDownloadEnabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAllowDownloadEnabledDetailsSerializer
                                           serialize:valueObj.allowDownloadEnabledDetails]];
    jsonDict[@".tag"] = @"allow_download_enabled_details";
  } else if ([valueObj isAppPermissionsChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGAppPermissionsChangedDetailsSerializer
                                           serialize:valueObj.appPermissionsChangedDetails]];
    jsonDict[@".tag"] = @"app_permissions_changed_details";
  } else if ([valueObj isCameraUploadsPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer
                                           serialize:valueObj.cameraUploadsPolicyChangedDetails]];
    jsonDict[@".tag"] = @"camera_uploads_policy_changed_details";
  } else if ([valueObj isCaptureTranscriptPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer
                                           serialize:valueObj.captureTranscriptPolicyChangedDetails]];
    jsonDict[@".tag"] = @"capture_transcript_policy_changed_details";
  } else if ([valueObj isClassificationChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGClassificationChangePolicyDetailsSerializer
                                           serialize:valueObj.classificationChangePolicyDetails]];
    jsonDict[@".tag"] = @"classification_change_policy_details";
  } else if ([valueObj isComputerBackupPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer
                                           serialize:valueObj.computerBackupPolicyChangedDetails]];
    jsonDict[@".tag"] = @"computer_backup_policy_changed_details";
  } else if ([valueObj isContentAdministrationPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer
                                           serialize:valueObj.contentAdministrationPolicyChangedDetails]];
    jsonDict[@".tag"] = @"content_administration_policy_changed_details";
  } else if ([valueObj isDataPlacementRestrictionChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer
                                           serialize:valueObj.dataPlacementRestrictionChangePolicyDetails]];
    jsonDict[@".tag"] = @"data_placement_restriction_change_policy_details";
  } else if ([valueObj isDataPlacementRestrictionSatisfyPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer
                                           serialize:valueObj.dataPlacementRestrictionSatisfyPolicyDetails]];
    jsonDict[@".tag"] = @"data_placement_restriction_satisfy_policy_details";
  } else if ([valueObj isDeviceApprovalsAddExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer
                                           serialize:valueObj.deviceApprovalsAddExceptionDetails]];
    jsonDict[@".tag"] = @"device_approvals_add_exception_details";
  } else if ([valueObj isDeviceApprovalsChangeDesktopPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer
                                           serialize:valueObj.deviceApprovalsChangeDesktopPolicyDetails]];
    jsonDict[@".tag"] = @"device_approvals_change_desktop_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeMobilePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer
                                           serialize:valueObj.deviceApprovalsChangeMobilePolicyDetails]];
    jsonDict[@".tag"] = @"device_approvals_change_mobile_policy_details";
  } else if ([valueObj isDeviceApprovalsChangeOverageActionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer
                                           serialize:valueObj.deviceApprovalsChangeOverageActionDetails]];
    jsonDict[@".tag"] = @"device_approvals_change_overage_action_details";
  } else if ([valueObj isDeviceApprovalsChangeUnlinkActionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer
                                           serialize:valueObj.deviceApprovalsChangeUnlinkActionDetails]];
    jsonDict[@".tag"] = @"device_approvals_change_unlink_action_details";
  } else if ([valueObj isDeviceApprovalsRemoveExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer
                                           serialize:valueObj.deviceApprovalsRemoveExceptionDetails]];
    jsonDict[@".tag"] = @"device_approvals_remove_exception_details";
  } else if ([valueObj isDirectoryRestrictionsAddMembersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer
                                           serialize:valueObj.directoryRestrictionsAddMembersDetails]];
    jsonDict[@".tag"] = @"directory_restrictions_add_members_details";
  } else if ([valueObj isDirectoryRestrictionsRemoveMembersDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer
                                           serialize:valueObj.directoryRestrictionsRemoveMembersDetails]];
    jsonDict[@".tag"] = @"directory_restrictions_remove_members_details";
  } else if ([valueObj isDropboxPasswordsPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer
                                           serialize:valueObj.dropboxPasswordsPolicyChangedDetails]];
    jsonDict[@".tag"] = @"dropbox_passwords_policy_changed_details";
  } else if ([valueObj isEmailIngestPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer
                                           serialize:valueObj.emailIngestPolicyChangedDetails]];
    jsonDict[@".tag"] = @"email_ingest_policy_changed_details";
  } else if ([valueObj isEmmAddExceptionDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGEmmAddExceptionDetailsSerializer serialize:valueObj.emmAddExceptionDetails]];
    jsonDict[@".tag"] = @"emm_add_exception_details";
  } else if ([valueObj isEmmChangePolicyDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGEmmChangePolicyDetailsSerializer serialize:valueObj.emmChangePolicyDetails]];
    jsonDict[@".tag"] = @"emm_change_policy_details";
  } else if ([valueObj isEmmRemoveExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEmmRemoveExceptionDetailsSerializer
                                           serialize:valueObj.emmRemoveExceptionDetails]];
    jsonDict[@".tag"] = @"emm_remove_exception_details";
  } else if ([valueObj isExtendedVersionHistoryChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer
                                           serialize:valueObj.extendedVersionHistoryChangePolicyDetails]];
    jsonDict[@".tag"] = @"extended_version_history_change_policy_details";
  } else if ([valueObj isExternalDriveBackupPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGExternalDriveBackupPolicyChangedDetailsSerializer
                                           serialize:valueObj.externalDriveBackupPolicyChangedDetails]];
    jsonDict[@".tag"] = @"external_drive_backup_policy_changed_details";
  } else if ([valueObj isFileCommentsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileCommentsChangePolicyDetailsSerializer
                                           serialize:valueObj.fileCommentsChangePolicyDetails]];
    jsonDict[@".tag"] = @"file_comments_change_policy_details";
  } else if ([valueObj isFileLockingPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileLockingPolicyChangedDetailsSerializer
                                           serialize:valueObj.fileLockingPolicyChangedDetails]];
    jsonDict[@".tag"] = @"file_locking_policy_changed_details";
  } else if ([valueObj isFileRequestsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestsChangePolicyDetailsSerializer
                                           serialize:valueObj.fileRequestsChangePolicyDetails]];
    jsonDict[@".tag"] = @"file_requests_change_policy_details";
  } else if ([valueObj isFileRequestsEmailsEnabledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer
                                           serialize:valueObj.fileRequestsEmailsEnabledDetails]];
    jsonDict[@".tag"] = @"file_requests_emails_enabled_details";
  } else if ([valueObj isFileRequestsEmailsRestrictedToTeamOnlyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer
                                           serialize:valueObj.fileRequestsEmailsRestrictedToTeamOnlyDetails]];
    jsonDict[@".tag"] = @"file_requests_emails_restricted_to_team_only_details";
  } else if ([valueObj isFileTransfersPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGFileTransfersPolicyChangedDetailsSerializer
                                           serialize:valueObj.fileTransfersPolicyChangedDetails]];
    jsonDict[@".tag"] = @"file_transfers_policy_changed_details";
  } else if ([valueObj isGoogleSsoChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer
                                           serialize:valueObj.googleSsoChangePolicyDetails]];
    jsonDict[@".tag"] = @"google_sso_change_policy_details";
  } else if ([valueObj isGroupUserManagementChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer
                                           serialize:valueObj.groupUserManagementChangePolicyDetails]];
    jsonDict[@".tag"] = @"group_user_management_change_policy_details";
  } else if ([valueObj isIntegrationPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGIntegrationPolicyChangedDetailsSerializer
                                           serialize:valueObj.integrationPolicyChangedDetails]];
    jsonDict[@".tag"] = @"integration_policy_changed_details";
  } else if ([valueObj isInviteAcceptanceEmailPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsSerializer
                                           serialize:valueObj.inviteAcceptanceEmailPolicyChangedDetails]];
    jsonDict[@".tag"] = @"invite_acceptance_email_policy_changed_details";
  } else if ([valueObj isMemberRequestsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer
                                           serialize:valueObj.memberRequestsChangePolicyDetails]];
    jsonDict[@".tag"] = @"member_requests_change_policy_details";
  } else if ([valueObj isMemberSendInvitePolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSendInvitePolicyChangedDetailsSerializer
                                           serialize:valueObj.memberSendInvitePolicyChangedDetails]];
    jsonDict[@".tag"] = @"member_send_invite_policy_changed_details";
  } else if ([valueObj isMemberSpaceLimitsAddExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsAddExceptionDetails]];
    jsonDict[@".tag"] = @"member_space_limits_add_exception_details";
  } else if ([valueObj isMemberSpaceLimitsChangeCapsTypePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsChangeCapsTypePolicyDetails]];
    jsonDict[@".tag"] = @"member_space_limits_change_caps_type_policy_details";
  } else if ([valueObj isMemberSpaceLimitsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsChangePolicyDetails]];
    jsonDict[@".tag"] = @"member_space_limits_change_policy_details";
  } else if ([valueObj isMemberSpaceLimitsRemoveExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer
                                           serialize:valueObj.memberSpaceLimitsRemoveExceptionDetails]];
    jsonDict[@".tag"] = @"member_space_limits_remove_exception_details";
  } else if ([valueObj isMemberSuggestionsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer
                                           serialize:valueObj.memberSuggestionsChangePolicyDetails]];
    jsonDict[@".tag"] = @"member_suggestions_change_policy_details";
  } else if ([valueObj isMicrosoftOfficeAddinChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer
                                           serialize:valueObj.microsoftOfficeAddinChangePolicyDetails]];
    jsonDict[@".tag"] = @"microsoft_office_addin_change_policy_details";
  } else if ([valueObj isNetworkControlChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGNetworkControlChangePolicyDetailsSerializer
                                           serialize:valueObj.networkControlChangePolicyDetails]];
    jsonDict[@".tag"] = @"network_control_change_policy_details";
  } else if ([valueObj isPaperChangeDeploymentPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer
                                           serialize:valueObj.paperChangeDeploymentPolicyDetails]];
    jsonDict[@".tag"] = @"paper_change_deployment_policy_details";
  } else if ([valueObj isPaperChangeMemberLinkPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer
                                           serialize:valueObj.paperChangeMemberLinkPolicyDetails]];
    jsonDict[@".tag"] = @"paper_change_member_link_policy_details";
  } else if ([valueObj isPaperChangeMemberPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer
                                           serialize:valueObj.paperChangeMemberPolicyDetails]];
    jsonDict[@".tag"] = @"paper_change_member_policy_details";
  } else if ([valueObj isPaperChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperChangePolicyDetailsSerializer
                                           serialize:valueObj.paperChangePolicyDetails]];
    jsonDict[@".tag"] = @"paper_change_policy_details";
  } else if ([valueObj isPaperDefaultFolderPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDefaultFolderPolicyChangedDetailsSerializer
                                           serialize:valueObj.paperDefaultFolderPolicyChangedDetails]];
    jsonDict[@".tag"] = @"paper_default_folder_policy_changed_details";
  } else if ([valueObj isPaperDesktopPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperDesktopPolicyChangedDetailsSerializer
                                           serialize:valueObj.paperDesktopPolicyChangedDetails]];
    jsonDict[@".tag"] = @"paper_desktop_policy_changed_details";
  } else if ([valueObj isPaperEnabledUsersGroupAdditionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer
                                           serialize:valueObj.paperEnabledUsersGroupAdditionDetails]];
    jsonDict[@".tag"] = @"paper_enabled_users_group_addition_details";
  } else if ([valueObj isPaperEnabledUsersGroupRemovalDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer
                                           serialize:valueObj.paperEnabledUsersGroupRemovalDetails]];
    jsonDict[@".tag"] = @"paper_enabled_users_group_removal_details";
  } else if ([valueObj isPasswordStrengthRequirementsChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsSerializer
                                           serialize:valueObj.passwordStrengthRequirementsChangePolicyDetails]];
    jsonDict[@".tag"] = @"password_strength_requirements_change_policy_details";
  } else if ([valueObj isPermanentDeleteChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer
                                           serialize:valueObj.permanentDeleteChangePolicyDetails]];
    jsonDict[@".tag"] = @"permanent_delete_change_policy_details";
  } else if ([valueObj isResellerSupportChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGResellerSupportChangePolicyDetailsSerializer
                                           serialize:valueObj.resellerSupportChangePolicyDetails]];
    jsonDict[@".tag"] = @"reseller_support_change_policy_details";
  } else if ([valueObj isRewindPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGRewindPolicyChangedDetailsSerializer
                                           serialize:valueObj.rewindPolicyChangedDetails]];
    jsonDict[@".tag"] = @"rewind_policy_changed_details";
  } else if ([valueObj isSendForSignaturePolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSendForSignaturePolicyChangedDetailsSerializer
                                           serialize:valueObj.sendForSignaturePolicyChangedDetails]];
    jsonDict[@".tag"] = @"send_for_signature_policy_changed_details";
  } else if ([valueObj isSharingChangeFolderJoinPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeFolderJoinPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_folder_join_policy_details";
  } else if ([valueObj isSharingChangeLinkAllowChangeExpirationPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeLinkAllowChangeExpirationPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_link_allow_change_expiration_policy_details";
  } else if ([valueObj isSharingChangeLinkDefaultExpirationPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeLinkDefaultExpirationPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_link_default_expiration_policy_details";
  } else if ([valueObj isSharingChangeLinkEnforcePasswordPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeLinkEnforcePasswordPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_link_enforce_password_policy_details";
  } else if ([valueObj isSharingChangeLinkPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeLinkPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_link_policy_details";
  } else if ([valueObj isSharingChangeMemberPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer
                                           serialize:valueObj.sharingChangeMemberPolicyDetails]];
    jsonDict[@".tag"] = @"sharing_change_member_policy_details";
  } else if ([valueObj isShowcaseChangeDownloadPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer
                                           serialize:valueObj.showcaseChangeDownloadPolicyDetails]];
    jsonDict[@".tag"] = @"showcase_change_download_policy_details";
  } else if ([valueObj isShowcaseChangeEnabledPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer
                                           serialize:valueObj.showcaseChangeEnabledPolicyDetails]];
    jsonDict[@".tag"] = @"showcase_change_enabled_policy_details";
  } else if ([valueObj isShowcaseChangeExternalSharingPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer
                                           serialize:valueObj.showcaseChangeExternalSharingPolicyDetails]];
    jsonDict[@".tag"] = @"showcase_change_external_sharing_policy_details";
  } else if ([valueObj isSmarterSmartSyncPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSmarterSmartSyncPolicyChangedDetailsSerializer
                                           serialize:valueObj.smarterSmartSyncPolicyChangedDetails]];
    jsonDict[@".tag"] = @"smarter_smart_sync_policy_changed_details";
  } else if ([valueObj isSmartSyncChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSmartSyncChangePolicyDetailsSerializer
                                           serialize:valueObj.smartSyncChangePolicyDetails]];
    jsonDict[@".tag"] = @"smart_sync_change_policy_details";
  } else if ([valueObj isSmartSyncNotOptOutDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGSmartSyncNotOptOutDetailsSerializer
                                           serialize:valueObj.smartSyncNotOptOutDetails]];
    jsonDict[@".tag"] = @"smart_sync_not_opt_out_details";
  } else if ([valueObj isSmartSyncOptOutDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSmartSyncOptOutDetailsSerializer serialize:valueObj.smartSyncOptOutDetails]];
    jsonDict[@".tag"] = @"smart_sync_opt_out_details";
  } else if ([valueObj isSsoChangePolicyDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGSsoChangePolicyDetailsSerializer serialize:valueObj.ssoChangePolicyDetails]];
    jsonDict[@".tag"] = @"sso_change_policy_details";
  } else if ([valueObj isTeamBrandingPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamBrandingPolicyChangedDetailsSerializer
                                           serialize:valueObj.teamBrandingPolicyChangedDetails]];
    jsonDict[@".tag"] = @"team_branding_policy_changed_details";
  } else if ([valueObj isTeamExtensionsPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamExtensionsPolicyChangedDetailsSerializer
                                           serialize:valueObj.teamExtensionsPolicyChangedDetails]];
    jsonDict[@".tag"] = @"team_extensions_policy_changed_details";
  } else if ([valueObj isTeamSelectiveSyncPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsSerializer
                                           serialize:valueObj.teamSelectiveSyncPolicyChangedDetails]];
    jsonDict[@".tag"] = @"team_selective_sync_policy_changed_details";
  } else if ([valueObj isTeamSharingWhitelistSubjectsChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsSerializer
                                           serialize:valueObj.teamSharingWhitelistSubjectsChangedDetails]];
    jsonDict[@".tag"] = @"team_sharing_whitelist_subjects_changed_details";
  } else if ([valueObj isTfaAddExceptionDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGTfaAddExceptionDetailsSerializer serialize:valueObj.tfaAddExceptionDetails]];
    jsonDict[@".tag"] = @"tfa_add_exception_details";
  } else if ([valueObj isTfaChangePolicyDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGTfaChangePolicyDetailsSerializer serialize:valueObj.tfaChangePolicyDetails]];
    jsonDict[@".tag"] = @"tfa_change_policy_details";
  } else if ([valueObj isTfaRemoveExceptionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaRemoveExceptionDetailsSerializer
                                           serialize:valueObj.tfaRemoveExceptionDetails]];
    jsonDict[@".tag"] = @"tfa_remove_exception_details";
  } else if ([valueObj isTwoAccountChangePolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTwoAccountChangePolicyDetailsSerializer
                                           serialize:valueObj.twoAccountChangePolicyDetails]];
    jsonDict[@".tag"] = @"two_account_change_policy_details";
  } else if ([valueObj isViewerInfoPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGViewerInfoPolicyChangedDetailsSerializer
                                           serialize:valueObj.viewerInfoPolicyChangedDetails]];
    jsonDict[@".tag"] = @"viewer_info_policy_changed_details";
  } else if ([valueObj isWatermarkingPolicyChangedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWatermarkingPolicyChangedDetailsSerializer
                                           serialize:valueObj.watermarkingPolicyChangedDetails]];
    jsonDict[@".tag"] = @"watermarking_policy_changed_details";
  } else if ([valueObj isWebSessionsChangeActiveSessionLimitDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsSerializer
                                           serialize:valueObj.webSessionsChangeActiveSessionLimitDetails]];
    jsonDict[@".tag"] = @"web_sessions_change_active_session_limit_details";
  } else if ([valueObj isWebSessionsChangeFixedLengthPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer
                                           serialize:valueObj.webSessionsChangeFixedLengthPolicyDetails]];
    jsonDict[@".tag"] = @"web_sessions_change_fixed_length_policy_details";
  } else if ([valueObj isWebSessionsChangeIdleLengthPolicyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer
                                           serialize:valueObj.webSessionsChangeIdleLengthPolicyDetails]];
    jsonDict[@".tag"] = @"web_sessions_change_idle_length_policy_details";
  } else if ([valueObj isDataResidencyMigrationRequestSuccessfulDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer
                                           serialize:valueObj.dataResidencyMigrationRequestSuccessfulDetails]];
    jsonDict[@".tag"] = @"data_residency_migration_request_successful_details";
  } else if ([valueObj isDataResidencyMigrationRequestUnsuccessfulDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer
                                           serialize:valueObj.dataResidencyMigrationRequestUnsuccessfulDetails]];
    jsonDict[@".tag"] = @"data_residency_migration_request_unsuccessful_details";
  } else if ([valueObj isTeamMergeFromDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGTeamMergeFromDetailsSerializer serialize:valueObj.teamMergeFromDetails]];
    jsonDict[@".tag"] = @"team_merge_from_details";
  } else if ([valueObj isTeamMergeToDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeToDetailsSerializer serialize:valueObj.teamMergeToDetails]];
    jsonDict[@".tag"] = @"team_merge_to_details";
  } else if ([valueObj isTeamProfileAddBackgroundDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileAddBackgroundDetailsSerializer
                                           serialize:valueObj.teamProfileAddBackgroundDetails]];
    jsonDict[@".tag"] = @"team_profile_add_background_details";
  } else if ([valueObj isTeamProfileAddLogoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileAddLogoDetailsSerializer
                                           serialize:valueObj.teamProfileAddLogoDetails]];
    jsonDict[@".tag"] = @"team_profile_add_logo_details";
  } else if ([valueObj isTeamProfileChangeBackgroundDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileChangeBackgroundDetailsSerializer
                                           serialize:valueObj.teamProfileChangeBackgroundDetails]];
    jsonDict[@".tag"] = @"team_profile_change_background_details";
  } else if ([valueObj isTeamProfileChangeDefaultLanguageDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer
                                           serialize:valueObj.teamProfileChangeDefaultLanguageDetails]];
    jsonDict[@".tag"] = @"team_profile_change_default_language_details";
  } else if ([valueObj isTeamProfileChangeLogoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileChangeLogoDetailsSerializer
                                           serialize:valueObj.teamProfileChangeLogoDetails]];
    jsonDict[@".tag"] = @"team_profile_change_logo_details";
  } else if ([valueObj isTeamProfileChangeNameDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileChangeNameDetailsSerializer
                                           serialize:valueObj.teamProfileChangeNameDetails]];
    jsonDict[@".tag"] = @"team_profile_change_name_details";
  } else if ([valueObj isTeamProfileRemoveBackgroundDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileRemoveBackgroundDetailsSerializer
                                           serialize:valueObj.teamProfileRemoveBackgroundDetails]];
    jsonDict[@".tag"] = @"team_profile_remove_background_details";
  } else if ([valueObj isTeamProfileRemoveLogoDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer
                                           serialize:valueObj.teamProfileRemoveLogoDetails]];
    jsonDict[@".tag"] = @"team_profile_remove_logo_details";
  } else if ([valueObj isTfaAddBackupPhoneDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaAddBackupPhoneDetailsSerializer
                                           serialize:valueObj.tfaAddBackupPhoneDetails]];
    jsonDict[@".tag"] = @"tfa_add_backup_phone_details";
  } else if ([valueObj isTfaAddSecurityKeyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaAddSecurityKeyDetailsSerializer
                                           serialize:valueObj.tfaAddSecurityKeyDetails]];
    jsonDict[@".tag"] = @"tfa_add_security_key_details";
  } else if ([valueObj isTfaChangeBackupPhoneDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer
                                           serialize:valueObj.tfaChangeBackupPhoneDetails]];
    jsonDict[@".tag"] = @"tfa_change_backup_phone_details";
  } else if ([valueObj isTfaChangeStatusDetails]) {
    [jsonDict
        addEntriesFromDictionary:[DBTEAMLOGTfaChangeStatusDetailsSerializer serialize:valueObj.tfaChangeStatusDetails]];
    jsonDict[@".tag"] = @"tfa_change_status_details";
  } else if ([valueObj isTfaRemoveBackupPhoneDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer
                                           serialize:valueObj.tfaRemoveBackupPhoneDetails]];
    jsonDict[@".tag"] = @"tfa_remove_backup_phone_details";
  } else if ([valueObj isTfaRemoveSecurityKeyDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer
                                           serialize:valueObj.tfaRemoveSecurityKeyDetails]];
    jsonDict[@".tag"] = @"tfa_remove_security_key_details";
  } else if ([valueObj isTfaResetDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTfaResetDetailsSerializer serialize:valueObj.tfaResetDetails]];
    jsonDict[@".tag"] = @"tfa_reset_details";
  } else if ([valueObj isChangedEnterpriseAdminRoleDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer
                                           serialize:valueObj.changedEnterpriseAdminRoleDetails]];
    jsonDict[@".tag"] = @"changed_enterprise_admin_role_details";
  } else if ([valueObj isChangedEnterpriseConnectedTeamStatusDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer
                                           serialize:valueObj.changedEnterpriseConnectedTeamStatusDetails]];
    jsonDict[@".tag"] = @"changed_enterprise_connected_team_status_details";
  } else if ([valueObj isEndedEnterpriseAdminSessionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer
                                           serialize:valueObj.endedEnterpriseAdminSessionDetails]];
    jsonDict[@".tag"] = @"ended_enterprise_admin_session_details";
  } else if ([valueObj isEndedEnterpriseAdminSessionDeprecatedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer
                                           serialize:valueObj.endedEnterpriseAdminSessionDeprecatedDetails]];
    jsonDict[@".tag"] = @"ended_enterprise_admin_session_deprecated_details";
  } else if ([valueObj isEnterpriseSettingsLockingDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer
                                           serialize:valueObj.enterpriseSettingsLockingDetails]];
    jsonDict[@".tag"] = @"enterprise_settings_locking_details";
  } else if ([valueObj isGuestAdminChangeStatusDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGGuestAdminChangeStatusDetailsSerializer
                                           serialize:valueObj.guestAdminChangeStatusDetails]];
    jsonDict[@".tag"] = @"guest_admin_change_status_details";
  } else if ([valueObj isStartedEnterpriseAdminSessionDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGStartedEnterpriseAdminSessionDetailsSerializer
                                           serialize:valueObj.startedEnterpriseAdminSessionDetails]];
    jsonDict[@".tag"] = @"started_enterprise_admin_session_details";
  } else if ([valueObj isTeamMergeRequestAcceptedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestAcceptedDetailsSerializer
                                           serialize:valueObj.teamMergeRequestAcceptedDetails]];
    jsonDict[@".tag"] = @"team_merge_request_accepted_details";
  } else if ([valueObj isTeamMergeRequestAcceptedShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestAcceptedShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_accepted_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestAcceptedShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestAcceptedShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_accepted_shown_to_secondary_team_details";
  } else if ([valueObj isTeamMergeRequestAutoCanceledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestAutoCanceledDetailsSerializer
                                           serialize:valueObj.teamMergeRequestAutoCanceledDetails]];
    jsonDict[@".tag"] = @"team_merge_request_auto_canceled_details";
  } else if ([valueObj isTeamMergeRequestCanceledDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestCanceledDetailsSerializer
                                           serialize:valueObj.teamMergeRequestCanceledDetails]];
    jsonDict[@".tag"] = @"team_merge_request_canceled_details";
  } else if ([valueObj isTeamMergeRequestCanceledShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestCanceledShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_canceled_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestCanceledShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestCanceledShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_canceled_shown_to_secondary_team_details";
  } else if ([valueObj isTeamMergeRequestExpiredDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestExpiredDetailsSerializer
                                           serialize:valueObj.teamMergeRequestExpiredDetails]];
    jsonDict[@".tag"] = @"team_merge_request_expired_details";
  } else if ([valueObj isTeamMergeRequestExpiredShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestExpiredShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_expired_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestExpiredShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestExpiredShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_expired_shown_to_secondary_team_details";
  } else if ([valueObj isTeamMergeRequestRejectedShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestRejectedShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_rejected_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestRejectedShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestRejectedShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_rejected_shown_to_secondary_team_details";
  } else if ([valueObj isTeamMergeRequestReminderDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestReminderDetailsSerializer
                                           serialize:valueObj.teamMergeRequestReminderDetails]];
    jsonDict[@".tag"] = @"team_merge_request_reminder_details";
  } else if ([valueObj isTeamMergeRequestReminderShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestReminderShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_reminder_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestReminderShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestReminderShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_reminder_shown_to_secondary_team_details";
  } else if ([valueObj isTeamMergeRequestRevokedDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestRevokedDetailsSerializer
                                           serialize:valueObj.teamMergeRequestRevokedDetails]];
    jsonDict[@".tag"] = @"team_merge_request_revoked_details";
  } else if ([valueObj isTeamMergeRequestSentShownToPrimaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestSentShownToPrimaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_sent_shown_to_primary_team_details";
  } else if ([valueObj isTeamMergeRequestSentShownToSecondaryTeamDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsSerializer
                                           serialize:valueObj.teamMergeRequestSentShownToSecondaryTeamDetails]];
    jsonDict[@".tag"] = @"team_merge_request_sent_shown_to_secondary_team_details";
  } else if ([valueObj isMissingDetails]) {
    [jsonDict addEntriesFromDictionary:[DBTEAMLOGMissingDetailsSerializer serialize:valueObj.missingDetails]];
    jsonDict[@".tag"] = @"missing_details";
  } else if ([valueObj isOther]) {
    jsonDict[@".tag"] = @"other";
  } else {
    jsonDict[@".tag"] = @"other";
  }

  return [jsonDict count] > 0 ? jsonDict : nil;
}

+ (DBTEAMLOGEventDetails *)deserialize:(NSDictionary<NSString *, id> *)valueDict {
  NSString *tag = valueDict[@".tag"];

  if ([tag isEqualToString:@"admin_alerting_alert_state_changed_details"]) {
    DBTEAMLOGAdminAlertingAlertStateChangedDetails *adminAlertingAlertStateChangedDetails =
        [DBTEAMLOGAdminAlertingAlertStateChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAdminAlertingAlertStateChangedDetails:adminAlertingAlertStateChangedDetails];
  } else if ([tag isEqualToString:@"admin_alerting_changed_alert_config_details"]) {
    DBTEAMLOGAdminAlertingChangedAlertConfigDetails *adminAlertingChangedAlertConfigDetails =
        [DBTEAMLOGAdminAlertingChangedAlertConfigDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAdminAlertingChangedAlertConfigDetails:adminAlertingChangedAlertConfigDetails];
  } else if ([tag isEqualToString:@"admin_alerting_triggered_alert_details"]) {
    DBTEAMLOGAdminAlertingTriggeredAlertDetails *adminAlertingTriggeredAlertDetails =
        [DBTEAMLOGAdminAlertingTriggeredAlertDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithAdminAlertingTriggeredAlertDetails:adminAlertingTriggeredAlertDetails];
  } else if ([tag isEqualToString:@"app_blocked_by_permissions_details"]) {
    DBTEAMLOGAppBlockedByPermissionsDetails *appBlockedByPermissionsDetails =
        [DBTEAMLOGAppBlockedByPermissionsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppBlockedByPermissionsDetails:appBlockedByPermissionsDetails];
  } else if ([tag isEqualToString:@"app_link_team_details"]) {
    DBTEAMLOGAppLinkTeamDetails *appLinkTeamDetails = [DBTEAMLOGAppLinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkTeamDetails:appLinkTeamDetails];
  } else if ([tag isEqualToString:@"app_link_user_details"]) {
    DBTEAMLOGAppLinkUserDetails *appLinkUserDetails = [DBTEAMLOGAppLinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppLinkUserDetails:appLinkUserDetails];
  } else if ([tag isEqualToString:@"app_unlink_team_details"]) {
    DBTEAMLOGAppUnlinkTeamDetails *appUnlinkTeamDetails =
        [DBTEAMLOGAppUnlinkTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkTeamDetails:appUnlinkTeamDetails];
  } else if ([tag isEqualToString:@"app_unlink_user_details"]) {
    DBTEAMLOGAppUnlinkUserDetails *appUnlinkUserDetails =
        [DBTEAMLOGAppUnlinkUserDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppUnlinkUserDetails:appUnlinkUserDetails];
  } else if ([tag isEqualToString:@"integration_connected_details"]) {
    DBTEAMLOGIntegrationConnectedDetails *integrationConnectedDetails =
        [DBTEAMLOGIntegrationConnectedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithIntegrationConnectedDetails:integrationConnectedDetails];
  } else if ([tag isEqualToString:@"integration_disconnected_details"]) {
    DBTEAMLOGIntegrationDisconnectedDetails *integrationDisconnectedDetails =
        [DBTEAMLOGIntegrationDisconnectedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithIntegrationDisconnectedDetails:integrationDisconnectedDetails];
  } else if ([tag isEqualToString:@"file_add_comment_details"]) {
    DBTEAMLOGFileAddCommentDetails *fileAddCommentDetails =
        [DBTEAMLOGFileAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddCommentDetails:fileAddCommentDetails];
  } else if ([tag isEqualToString:@"file_change_comment_subscription_details"]) {
    DBTEAMLOGFileChangeCommentSubscriptionDetails *fileChangeCommentSubscriptionDetails =
        [DBTEAMLOGFileChangeCommentSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileChangeCommentSubscriptionDetails:fileChangeCommentSubscriptionDetails];
  } else if ([tag isEqualToString:@"file_delete_comment_details"]) {
    DBTEAMLOGFileDeleteCommentDetails *fileDeleteCommentDetails =
        [DBTEAMLOGFileDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDeleteCommentDetails:fileDeleteCommentDetails];
  } else if ([tag isEqualToString:@"file_edit_comment_details"]) {
    DBTEAMLOGFileEditCommentDetails *fileEditCommentDetails =
        [DBTEAMLOGFileEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileEditCommentDetails:fileEditCommentDetails];
  } else if ([tag isEqualToString:@"file_like_comment_details"]) {
    DBTEAMLOGFileLikeCommentDetails *fileLikeCommentDetails =
        [DBTEAMLOGFileLikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileLikeCommentDetails:fileLikeCommentDetails];
  } else if ([tag isEqualToString:@"file_resolve_comment_details"]) {
    DBTEAMLOGFileResolveCommentDetails *fileResolveCommentDetails =
        [DBTEAMLOGFileResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileResolveCommentDetails:fileResolveCommentDetails];
  } else if ([tag isEqualToString:@"file_unlike_comment_details"]) {
    DBTEAMLOGFileUnlikeCommentDetails *fileUnlikeCommentDetails =
        [DBTEAMLOGFileUnlikeCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileUnlikeCommentDetails:fileUnlikeCommentDetails];
  } else if ([tag isEqualToString:@"file_unresolve_comment_details"]) {
    DBTEAMLOGFileUnresolveCommentDetails *fileUnresolveCommentDetails =
        [DBTEAMLOGFileUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileUnresolveCommentDetails:fileUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"governance_policy_add_folders_details"]) {
    DBTEAMLOGGovernancePolicyAddFoldersDetails *governancePolicyAddFoldersDetails =
        [DBTEAMLOGGovernancePolicyAddFoldersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGovernancePolicyAddFoldersDetails:governancePolicyAddFoldersDetails];
  } else if ([tag isEqualToString:@"governance_policy_add_folder_failed_details"]) {
    DBTEAMLOGGovernancePolicyAddFolderFailedDetails *governancePolicyAddFolderFailedDetails =
        [DBTEAMLOGGovernancePolicyAddFolderFailedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyAddFolderFailedDetails:governancePolicyAddFolderFailedDetails];
  } else if ([tag isEqualToString:@"governance_policy_content_disposed_details"]) {
    DBTEAMLOGGovernancePolicyContentDisposedDetails *governancePolicyContentDisposedDetails =
        [DBTEAMLOGGovernancePolicyContentDisposedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyContentDisposedDetails:governancePolicyContentDisposedDetails];
  } else if ([tag isEqualToString:@"governance_policy_create_details"]) {
    DBTEAMLOGGovernancePolicyCreateDetails *governancePolicyCreateDetails =
        [DBTEAMLOGGovernancePolicyCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGovernancePolicyCreateDetails:governancePolicyCreateDetails];
  } else if ([tag isEqualToString:@"governance_policy_delete_details"]) {
    DBTEAMLOGGovernancePolicyDeleteDetails *governancePolicyDeleteDetails =
        [DBTEAMLOGGovernancePolicyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGovernancePolicyDeleteDetails:governancePolicyDeleteDetails];
  } else if ([tag isEqualToString:@"governance_policy_edit_details_details"]) {
    DBTEAMLOGGovernancePolicyEditDetailsDetails *governancePolicyEditDetailsDetails =
        [DBTEAMLOGGovernancePolicyEditDetailsDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithGovernancePolicyEditDetailsDetails:governancePolicyEditDetailsDetails];
  } else if ([tag isEqualToString:@"governance_policy_edit_duration_details"]) {
    DBTEAMLOGGovernancePolicyEditDurationDetails *governancePolicyEditDurationDetails =
        [DBTEAMLOGGovernancePolicyEditDurationDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithGovernancePolicyEditDurationDetails:governancePolicyEditDurationDetails];
  } else if ([tag isEqualToString:@"governance_policy_export_created_details"]) {
    DBTEAMLOGGovernancePolicyExportCreatedDetails *governancePolicyExportCreatedDetails =
        [DBTEAMLOGGovernancePolicyExportCreatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyExportCreatedDetails:governancePolicyExportCreatedDetails];
  } else if ([tag isEqualToString:@"governance_policy_export_removed_details"]) {
    DBTEAMLOGGovernancePolicyExportRemovedDetails *governancePolicyExportRemovedDetails =
        [DBTEAMLOGGovernancePolicyExportRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyExportRemovedDetails:governancePolicyExportRemovedDetails];
  } else if ([tag isEqualToString:@"governance_policy_remove_folders_details"]) {
    DBTEAMLOGGovernancePolicyRemoveFoldersDetails *governancePolicyRemoveFoldersDetails =
        [DBTEAMLOGGovernancePolicyRemoveFoldersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyRemoveFoldersDetails:governancePolicyRemoveFoldersDetails];
  } else if ([tag isEqualToString:@"governance_policy_report_created_details"]) {
    DBTEAMLOGGovernancePolicyReportCreatedDetails *governancePolicyReportCreatedDetails =
        [DBTEAMLOGGovernancePolicyReportCreatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyReportCreatedDetails:governancePolicyReportCreatedDetails];
  } else if ([tag isEqualToString:@"governance_policy_zip_part_downloaded_details"]) {
    DBTEAMLOGGovernancePolicyZipPartDownloadedDetails *governancePolicyZipPartDownloadedDetails =
        [DBTEAMLOGGovernancePolicyZipPartDownloadedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGovernancePolicyZipPartDownloadedDetails:governancePolicyZipPartDownloadedDetails];
  } else if ([tag isEqualToString:@"legal_holds_activate_a_hold_details"]) {
    DBTEAMLOGLegalHoldsActivateAHoldDetails *legalHoldsActivateAHoldDetails =
        [DBTEAMLOGLegalHoldsActivateAHoldDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsActivateAHoldDetails:legalHoldsActivateAHoldDetails];
  } else if ([tag isEqualToString:@"legal_holds_add_members_details"]) {
    DBTEAMLOGLegalHoldsAddMembersDetails *legalHoldsAddMembersDetails =
        [DBTEAMLOGLegalHoldsAddMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsAddMembersDetails:legalHoldsAddMembersDetails];
  } else if ([tag isEqualToString:@"legal_holds_change_hold_details_details"]) {
    DBTEAMLOGLegalHoldsChangeHoldDetailsDetails *legalHoldsChangeHoldDetailsDetails =
        [DBTEAMLOGLegalHoldsChangeHoldDetailsDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsChangeHoldDetailsDetails:legalHoldsChangeHoldDetailsDetails];
  } else if ([tag isEqualToString:@"legal_holds_change_hold_name_details"]) {
    DBTEAMLOGLegalHoldsChangeHoldNameDetails *legalHoldsChangeHoldNameDetails =
        [DBTEAMLOGLegalHoldsChangeHoldNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsChangeHoldNameDetails:legalHoldsChangeHoldNameDetails];
  } else if ([tag isEqualToString:@"legal_holds_export_a_hold_details"]) {
    DBTEAMLOGLegalHoldsExportAHoldDetails *legalHoldsExportAHoldDetails =
        [DBTEAMLOGLegalHoldsExportAHoldDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsExportAHoldDetails:legalHoldsExportAHoldDetails];
  } else if ([tag isEqualToString:@"legal_holds_export_cancelled_details"]) {
    DBTEAMLOGLegalHoldsExportCancelledDetails *legalHoldsExportCancelledDetails =
        [DBTEAMLOGLegalHoldsExportCancelledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsExportCancelledDetails:legalHoldsExportCancelledDetails];
  } else if ([tag isEqualToString:@"legal_holds_export_downloaded_details"]) {
    DBTEAMLOGLegalHoldsExportDownloadedDetails *legalHoldsExportDownloadedDetails =
        [DBTEAMLOGLegalHoldsExportDownloadedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsExportDownloadedDetails:legalHoldsExportDownloadedDetails];
  } else if ([tag isEqualToString:@"legal_holds_export_removed_details"]) {
    DBTEAMLOGLegalHoldsExportRemovedDetails *legalHoldsExportRemovedDetails =
        [DBTEAMLOGLegalHoldsExportRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsExportRemovedDetails:legalHoldsExportRemovedDetails];
  } else if ([tag isEqualToString:@"legal_holds_release_a_hold_details"]) {
    DBTEAMLOGLegalHoldsReleaseAHoldDetails *legalHoldsReleaseAHoldDetails =
        [DBTEAMLOGLegalHoldsReleaseAHoldDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsReleaseAHoldDetails:legalHoldsReleaseAHoldDetails];
  } else if ([tag isEqualToString:@"legal_holds_remove_members_details"]) {
    DBTEAMLOGLegalHoldsRemoveMembersDetails *legalHoldsRemoveMembersDetails =
        [DBTEAMLOGLegalHoldsRemoveMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsRemoveMembersDetails:legalHoldsRemoveMembersDetails];
  } else if ([tag isEqualToString:@"legal_holds_report_a_hold_details"]) {
    DBTEAMLOGLegalHoldsReportAHoldDetails *legalHoldsReportAHoldDetails =
        [DBTEAMLOGLegalHoldsReportAHoldDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLegalHoldsReportAHoldDetails:legalHoldsReportAHoldDetails];
  } else if ([tag isEqualToString:@"device_change_ip_desktop_details"]) {
    DBTEAMLOGDeviceChangeIpDesktopDetails *deviceChangeIpDesktopDetails =
        [DBTEAMLOGDeviceChangeIpDesktopDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpDesktopDetails:deviceChangeIpDesktopDetails];
  } else if ([tag isEqualToString:@"device_change_ip_mobile_details"]) {
    DBTEAMLOGDeviceChangeIpMobileDetails *deviceChangeIpMobileDetails =
        [DBTEAMLOGDeviceChangeIpMobileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpMobileDetails:deviceChangeIpMobileDetails];
  } else if ([tag isEqualToString:@"device_change_ip_web_details"]) {
    DBTEAMLOGDeviceChangeIpWebDetails *deviceChangeIpWebDetails =
        [DBTEAMLOGDeviceChangeIpWebDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceChangeIpWebDetails:deviceChangeIpWebDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_fail_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkFailDetails *deviceDeleteOnUnlinkFailDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkFailDetails:deviceDeleteOnUnlinkFailDetails];
  } else if ([tag isEqualToString:@"device_delete_on_unlink_success_details"]) {
    DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetails *deviceDeleteOnUnlinkSuccessDetails =
        [DBTEAMLOGDeviceDeleteOnUnlinkSuccessDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithDeviceDeleteOnUnlinkSuccessDetails:deviceDeleteOnUnlinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_link_fail_details"]) {
    DBTEAMLOGDeviceLinkFailDetails *deviceLinkFailDetails =
        [DBTEAMLOGDeviceLinkFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkFailDetails:deviceLinkFailDetails];
  } else if ([tag isEqualToString:@"device_link_success_details"]) {
    DBTEAMLOGDeviceLinkSuccessDetails *deviceLinkSuccessDetails =
        [DBTEAMLOGDeviceLinkSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceLinkSuccessDetails:deviceLinkSuccessDetails];
  } else if ([tag isEqualToString:@"device_management_disabled_details"]) {
    DBTEAMLOGDeviceManagementDisabledDetails *deviceManagementDisabledDetails =
        [DBTEAMLOGDeviceManagementDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementDisabledDetails:deviceManagementDisabledDetails];
  } else if ([tag isEqualToString:@"device_management_enabled_details"]) {
    DBTEAMLOGDeviceManagementEnabledDetails *deviceManagementEnabledDetails =
        [DBTEAMLOGDeviceManagementEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceManagementEnabledDetails:deviceManagementEnabledDetails];
  } else if ([tag isEqualToString:@"device_sync_backup_status_changed_details"]) {
    DBTEAMLOGDeviceSyncBackupStatusChangedDetails *deviceSyncBackupStatusChangedDetails =
        [DBTEAMLOGDeviceSyncBackupStatusChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceSyncBackupStatusChangedDetails:deviceSyncBackupStatusChangedDetails];
  } else if ([tag isEqualToString:@"device_unlink_details"]) {
    DBTEAMLOGDeviceUnlinkDetails *deviceUnlinkDetails = [DBTEAMLOGDeviceUnlinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeviceUnlinkDetails:deviceUnlinkDetails];
  } else if ([tag isEqualToString:@"dropbox_passwords_exported_details"]) {
    DBTEAMLOGDropboxPasswordsExportedDetails *dropboxPasswordsExportedDetails =
        [DBTEAMLOGDropboxPasswordsExportedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDropboxPasswordsExportedDetails:dropboxPasswordsExportedDetails];
  } else if ([tag isEqualToString:@"dropbox_passwords_new_device_enrolled_details"]) {
    DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetails *dropboxPasswordsNewDeviceEnrolledDetails =
        [DBTEAMLOGDropboxPasswordsNewDeviceEnrolledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDropboxPasswordsNewDeviceEnrolledDetails:dropboxPasswordsNewDeviceEnrolledDetails];
  } else if ([tag isEqualToString:@"emm_refresh_auth_token_details"]) {
    DBTEAMLOGEmmRefreshAuthTokenDetails *emmRefreshAuthTokenDetails =
        [DBTEAMLOGEmmRefreshAuthTokenDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRefreshAuthTokenDetails:emmRefreshAuthTokenDetails];
  } else if ([tag isEqualToString:@"external_drive_backup_eligibility_status_checked_details"]) {
    DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetails *externalDriveBackupEligibilityStatusCheckedDetails =
        [DBTEAMLOGExternalDriveBackupEligibilityStatusCheckedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExternalDriveBackupEligibilityStatusCheckedDetails:externalDriveBackupEligibilityStatusCheckedDetails];
  } else if ([tag isEqualToString:@"external_drive_backup_status_changed_details"]) {
    DBTEAMLOGExternalDriveBackupStatusChangedDetails *externalDriveBackupStatusChangedDetails =
        [DBTEAMLOGExternalDriveBackupStatusChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExternalDriveBackupStatusChangedDetails:externalDriveBackupStatusChangedDetails];
  } else if ([tag isEqualToString:@"account_capture_change_availability_details"]) {
    DBTEAMLOGAccountCaptureChangeAvailabilityDetails *accountCaptureChangeAvailabilityDetails =
        [DBTEAMLOGAccountCaptureChangeAvailabilityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureChangeAvailabilityDetails:accountCaptureChangeAvailabilityDetails];
  } else if ([tag isEqualToString:@"account_capture_migrate_account_details"]) {
    DBTEAMLOGAccountCaptureMigrateAccountDetails *accountCaptureMigrateAccountDetails =
        [DBTEAMLOGAccountCaptureMigrateAccountDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureMigrateAccountDetails:accountCaptureMigrateAccountDetails];
  } else if ([tag isEqualToString:@"account_capture_notification_emails_sent_details"]) {
    DBTEAMLOGAccountCaptureNotificationEmailsSentDetails *accountCaptureNotificationEmailsSentDetails =
        [DBTEAMLOGAccountCaptureNotificationEmailsSentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureNotificationEmailsSentDetails:accountCaptureNotificationEmailsSentDetails];
  } else if ([tag isEqualToString:@"account_capture_relinquish_account_details"]) {
    DBTEAMLOGAccountCaptureRelinquishAccountDetails *accountCaptureRelinquishAccountDetails =
        [DBTEAMLOGAccountCaptureRelinquishAccountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithAccountCaptureRelinquishAccountDetails:accountCaptureRelinquishAccountDetails];
  } else if ([tag isEqualToString:@"disabled_domain_invites_details"]) {
    DBTEAMLOGDisabledDomainInvitesDetails *disabledDomainInvitesDetails =
        [DBTEAMLOGDisabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDisabledDomainInvitesDetails:disabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"domain_invites_approve_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetails *domainInvitesApproveRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesApproveRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesApproveRequestToJoinTeamDetails:domainInvitesApproveRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_decline_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetails *domainInvitesDeclineRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesDeclineRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesDeclineRequestToJoinTeamDetails:domainInvitesDeclineRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_email_existing_users_details"]) {
    DBTEAMLOGDomainInvitesEmailExistingUsersDetails *domainInvitesEmailExistingUsersDetails =
        [DBTEAMLOGDomainInvitesEmailExistingUsersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesEmailExistingUsersDetails:domainInvitesEmailExistingUsersDetails];
  } else if ([tag isEqualToString:@"domain_invites_request_to_join_team_details"]) {
    DBTEAMLOGDomainInvitesRequestToJoinTeamDetails *domainInvitesRequestToJoinTeamDetails =
        [DBTEAMLOGDomainInvitesRequestToJoinTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesRequestToJoinTeamDetails:domainInvitesRequestToJoinTeamDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_no_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetails *domainInvitesSetInviteNewUserPrefToNoDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToNoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToNoDetails:domainInvitesSetInviteNewUserPrefToNoDetails];
  } else if ([tag isEqualToString:@"domain_invites_set_invite_new_user_pref_to_yes_details"]) {
    DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetails *domainInvitesSetInviteNewUserPrefToYesDetails =
        [DBTEAMLOGDomainInvitesSetInviteNewUserPrefToYesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainInvitesSetInviteNewUserPrefToYesDetails:domainInvitesSetInviteNewUserPrefToYesDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_fail_details"]) {
    DBTEAMLOGDomainVerificationAddDomainFailDetails *domainVerificationAddDomainFailDetails =
        [DBTEAMLOGDomainVerificationAddDomainFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainFailDetails:domainVerificationAddDomainFailDetails];
  } else if ([tag isEqualToString:@"domain_verification_add_domain_success_details"]) {
    DBTEAMLOGDomainVerificationAddDomainSuccessDetails *domainVerificationAddDomainSuccessDetails =
        [DBTEAMLOGDomainVerificationAddDomainSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationAddDomainSuccessDetails:domainVerificationAddDomainSuccessDetails];
  } else if ([tag isEqualToString:@"domain_verification_remove_domain_details"]) {
    DBTEAMLOGDomainVerificationRemoveDomainDetails *domainVerificationRemoveDomainDetails =
        [DBTEAMLOGDomainVerificationRemoveDomainDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDomainVerificationRemoveDomainDetails:domainVerificationRemoveDomainDetails];
  } else if ([tag isEqualToString:@"enabled_domain_invites_details"]) {
    DBTEAMLOGEnabledDomainInvitesDetails *enabledDomainInvitesDetails =
        [DBTEAMLOGEnabledDomainInvitesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEnabledDomainInvitesDetails:enabledDomainInvitesDetails];
  } else if ([tag isEqualToString:@"apply_naming_convention_details"]) {
    DBTEAMLOGApplyNamingConventionDetails *applyNamingConventionDetails =
        [DBTEAMLOGApplyNamingConventionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithApplyNamingConventionDetails:applyNamingConventionDetails];
  } else if ([tag isEqualToString:@"create_folder_details"]) {
    DBTEAMLOGCreateFolderDetails *createFolderDetails = [DBTEAMLOGCreateFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCreateFolderDetails:createFolderDetails];
  } else if ([tag isEqualToString:@"file_add_details"]) {
    DBTEAMLOGFileAddDetails *fileAddDetails = [DBTEAMLOGFileAddDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileAddDetails:fileAddDetails];
  } else if ([tag isEqualToString:@"file_copy_details"]) {
    DBTEAMLOGFileCopyDetails *fileCopyDetails = [DBTEAMLOGFileCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCopyDetails:fileCopyDetails];
  } else if ([tag isEqualToString:@"file_delete_details"]) {
    DBTEAMLOGFileDeleteDetails *fileDeleteDetails = [DBTEAMLOGFileDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDeleteDetails:fileDeleteDetails];
  } else if ([tag isEqualToString:@"file_download_details"]) {
    DBTEAMLOGFileDownloadDetails *fileDownloadDetails = [DBTEAMLOGFileDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileDownloadDetails:fileDownloadDetails];
  } else if ([tag isEqualToString:@"file_edit_details"]) {
    DBTEAMLOGFileEditDetails *fileEditDetails = [DBTEAMLOGFileEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileEditDetails:fileEditDetails];
  } else if ([tag isEqualToString:@"file_get_copy_reference_details"]) {
    DBTEAMLOGFileGetCopyReferenceDetails *fileGetCopyReferenceDetails =
        [DBTEAMLOGFileGetCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileGetCopyReferenceDetails:fileGetCopyReferenceDetails];
  } else if ([tag isEqualToString:@"file_locking_lock_status_changed_details"]) {
    DBTEAMLOGFileLockingLockStatusChangedDetails *fileLockingLockStatusChangedDetails =
        [DBTEAMLOGFileLockingLockStatusChangedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithFileLockingLockStatusChangedDetails:fileLockingLockStatusChangedDetails];
  } else if ([tag isEqualToString:@"file_move_details"]) {
    DBTEAMLOGFileMoveDetails *fileMoveDetails = [DBTEAMLOGFileMoveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileMoveDetails:fileMoveDetails];
  } else if ([tag isEqualToString:@"file_permanently_delete_details"]) {
    DBTEAMLOGFilePermanentlyDeleteDetails *filePermanentlyDeleteDetails =
        [DBTEAMLOGFilePermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePermanentlyDeleteDetails:filePermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"file_preview_details"]) {
    DBTEAMLOGFilePreviewDetails *filePreviewDetails = [DBTEAMLOGFilePreviewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFilePreviewDetails:filePreviewDetails];
  } else if ([tag isEqualToString:@"file_rename_details"]) {
    DBTEAMLOGFileRenameDetails *fileRenameDetails = [DBTEAMLOGFileRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRenameDetails:fileRenameDetails];
  } else if ([tag isEqualToString:@"file_restore_details"]) {
    DBTEAMLOGFileRestoreDetails *fileRestoreDetails = [DBTEAMLOGFileRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRestoreDetails:fileRestoreDetails];
  } else if ([tag isEqualToString:@"file_revert_details"]) {
    DBTEAMLOGFileRevertDetails *fileRevertDetails = [DBTEAMLOGFileRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRevertDetails:fileRevertDetails];
  } else if ([tag isEqualToString:@"file_rollback_changes_details"]) {
    DBTEAMLOGFileRollbackChangesDetails *fileRollbackChangesDetails =
        [DBTEAMLOGFileRollbackChangesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRollbackChangesDetails:fileRollbackChangesDetails];
  } else if ([tag isEqualToString:@"file_save_copy_reference_details"]) {
    DBTEAMLOGFileSaveCopyReferenceDetails *fileSaveCopyReferenceDetails =
        [DBTEAMLOGFileSaveCopyReferenceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileSaveCopyReferenceDetails:fileSaveCopyReferenceDetails];
  } else if ([tag isEqualToString:@"folder_overview_description_changed_details"]) {
    DBTEAMLOGFolderOverviewDescriptionChangedDetails *folderOverviewDescriptionChangedDetails =
        [DBTEAMLOGFolderOverviewDescriptionChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFolderOverviewDescriptionChangedDetails:folderOverviewDescriptionChangedDetails];
  } else if ([tag isEqualToString:@"folder_overview_item_pinned_details"]) {
    DBTEAMLOGFolderOverviewItemPinnedDetails *folderOverviewItemPinnedDetails =
        [DBTEAMLOGFolderOverviewItemPinnedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFolderOverviewItemPinnedDetails:folderOverviewItemPinnedDetails];
  } else if ([tag isEqualToString:@"folder_overview_item_unpinned_details"]) {
    DBTEAMLOGFolderOverviewItemUnpinnedDetails *folderOverviewItemUnpinnedDetails =
        [DBTEAMLOGFolderOverviewItemUnpinnedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFolderOverviewItemUnpinnedDetails:folderOverviewItemUnpinnedDetails];
  } else if ([tag isEqualToString:@"object_label_added_details"]) {
    DBTEAMLOGObjectLabelAddedDetails *objectLabelAddedDetails =
        [DBTEAMLOGObjectLabelAddedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithObjectLabelAddedDetails:objectLabelAddedDetails];
  } else if ([tag isEqualToString:@"object_label_removed_details"]) {
    DBTEAMLOGObjectLabelRemovedDetails *objectLabelRemovedDetails =
        [DBTEAMLOGObjectLabelRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithObjectLabelRemovedDetails:objectLabelRemovedDetails];
  } else if ([tag isEqualToString:@"object_label_updated_value_details"]) {
    DBTEAMLOGObjectLabelUpdatedValueDetails *objectLabelUpdatedValueDetails =
        [DBTEAMLOGObjectLabelUpdatedValueDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithObjectLabelUpdatedValueDetails:objectLabelUpdatedValueDetails];
  } else if ([tag isEqualToString:@"organize_folder_with_tidy_details"]) {
    DBTEAMLOGOrganizeFolderWithTidyDetails *organizeFolderWithTidyDetails =
        [DBTEAMLOGOrganizeFolderWithTidyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithOrganizeFolderWithTidyDetails:organizeFolderWithTidyDetails];
  } else if ([tag isEqualToString:@"rewind_folder_details"]) {
    DBTEAMLOGRewindFolderDetails *rewindFolderDetails = [DBTEAMLOGRewindFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithRewindFolderDetails:rewindFolderDetails];
  } else if ([tag isEqualToString:@"undo_naming_convention_details"]) {
    DBTEAMLOGUndoNamingConventionDetails *undoNamingConventionDetails =
        [DBTEAMLOGUndoNamingConventionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithUndoNamingConventionDetails:undoNamingConventionDetails];
  } else if ([tag isEqualToString:@"undo_organize_folder_with_tidy_details"]) {
    DBTEAMLOGUndoOrganizeFolderWithTidyDetails *undoOrganizeFolderWithTidyDetails =
        [DBTEAMLOGUndoOrganizeFolderWithTidyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithUndoOrganizeFolderWithTidyDetails:undoOrganizeFolderWithTidyDetails];
  } else if ([tag isEqualToString:@"user_tags_added_details"]) {
    DBTEAMLOGUserTagsAddedDetails *userTagsAddedDetails =
        [DBTEAMLOGUserTagsAddedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithUserTagsAddedDetails:userTagsAddedDetails];
  } else if ([tag isEqualToString:@"user_tags_removed_details"]) {
    DBTEAMLOGUserTagsRemovedDetails *userTagsRemovedDetails =
        [DBTEAMLOGUserTagsRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithUserTagsRemovedDetails:userTagsRemovedDetails];
  } else if ([tag isEqualToString:@"email_ingest_receive_file_details"]) {
    DBTEAMLOGEmailIngestReceiveFileDetails *emailIngestReceiveFileDetails =
        [DBTEAMLOGEmailIngestReceiveFileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmailIngestReceiveFileDetails:emailIngestReceiveFileDetails];
  } else if ([tag isEqualToString:@"file_request_change_details"]) {
    DBTEAMLOGFileRequestChangeDetails *fileRequestChangeDetails =
        [DBTEAMLOGFileRequestChangeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestChangeDetails:fileRequestChangeDetails];
  } else if ([tag isEqualToString:@"file_request_close_details"]) {
    DBTEAMLOGFileRequestCloseDetails *fileRequestCloseDetails =
        [DBTEAMLOGFileRequestCloseDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCloseDetails:fileRequestCloseDetails];
  } else if ([tag isEqualToString:@"file_request_create_details"]) {
    DBTEAMLOGFileRequestCreateDetails *fileRequestCreateDetails =
        [DBTEAMLOGFileRequestCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestCreateDetails:fileRequestCreateDetails];
  } else if ([tag isEqualToString:@"file_request_delete_details"]) {
    DBTEAMLOGFileRequestDeleteDetails *fileRequestDeleteDetails =
        [DBTEAMLOGFileRequestDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestDeleteDetails:fileRequestDeleteDetails];
  } else if ([tag isEqualToString:@"file_request_receive_file_details"]) {
    DBTEAMLOGFileRequestReceiveFileDetails *fileRequestReceiveFileDetails =
        [DBTEAMLOGFileRequestReceiveFileDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestReceiveFileDetails:fileRequestReceiveFileDetails];
  } else if ([tag isEqualToString:@"group_add_external_id_details"]) {
    DBTEAMLOGGroupAddExternalIdDetails *groupAddExternalIdDetails =
        [DBTEAMLOGGroupAddExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddExternalIdDetails:groupAddExternalIdDetails];
  } else if ([tag isEqualToString:@"group_add_member_details"]) {
    DBTEAMLOGGroupAddMemberDetails *groupAddMemberDetails =
        [DBTEAMLOGGroupAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupAddMemberDetails:groupAddMemberDetails];
  } else if ([tag isEqualToString:@"group_change_external_id_details"]) {
    DBTEAMLOGGroupChangeExternalIdDetails *groupChangeExternalIdDetails =
        [DBTEAMLOGGroupChangeExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeExternalIdDetails:groupChangeExternalIdDetails];
  } else if ([tag isEqualToString:@"group_change_management_type_details"]) {
    DBTEAMLOGGroupChangeManagementTypeDetails *groupChangeManagementTypeDetails =
        [DBTEAMLOGGroupChangeManagementTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeManagementTypeDetails:groupChangeManagementTypeDetails];
  } else if ([tag isEqualToString:@"group_change_member_role_details"]) {
    DBTEAMLOGGroupChangeMemberRoleDetails *groupChangeMemberRoleDetails =
        [DBTEAMLOGGroupChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupChangeMemberRoleDetails:groupChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"group_create_details"]) {
    DBTEAMLOGGroupCreateDetails *groupCreateDetails = [DBTEAMLOGGroupCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupCreateDetails:groupCreateDetails];
  } else if ([tag isEqualToString:@"group_delete_details"]) {
    DBTEAMLOGGroupDeleteDetails *groupDeleteDetails = [DBTEAMLOGGroupDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDeleteDetails:groupDeleteDetails];
  } else if ([tag isEqualToString:@"group_description_updated_details"]) {
    DBTEAMLOGGroupDescriptionUpdatedDetails *groupDescriptionUpdatedDetails =
        [DBTEAMLOGGroupDescriptionUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupDescriptionUpdatedDetails:groupDescriptionUpdatedDetails];
  } else if ([tag isEqualToString:@"group_join_policy_updated_details"]) {
    DBTEAMLOGGroupJoinPolicyUpdatedDetails *groupJoinPolicyUpdatedDetails =
        [DBTEAMLOGGroupJoinPolicyUpdatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupJoinPolicyUpdatedDetails:groupJoinPolicyUpdatedDetails];
  } else if ([tag isEqualToString:@"group_moved_details"]) {
    DBTEAMLOGGroupMovedDetails *groupMovedDetails = [DBTEAMLOGGroupMovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupMovedDetails:groupMovedDetails];
  } else if ([tag isEqualToString:@"group_remove_external_id_details"]) {
    DBTEAMLOGGroupRemoveExternalIdDetails *groupRemoveExternalIdDetails =
        [DBTEAMLOGGroupRemoveExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveExternalIdDetails:groupRemoveExternalIdDetails];
  } else if ([tag isEqualToString:@"group_remove_member_details"]) {
    DBTEAMLOGGroupRemoveMemberDetails *groupRemoveMemberDetails =
        [DBTEAMLOGGroupRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRemoveMemberDetails:groupRemoveMemberDetails];
  } else if ([tag isEqualToString:@"group_rename_details"]) {
    DBTEAMLOGGroupRenameDetails *groupRenameDetails = [DBTEAMLOGGroupRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGroupRenameDetails:groupRenameDetails];
  } else if ([tag isEqualToString:@"account_lock_or_unlocked_details"]) {
    DBTEAMLOGAccountLockOrUnlockedDetails *accountLockOrUnlockedDetails =
        [DBTEAMLOGAccountLockOrUnlockedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAccountLockOrUnlockedDetails:accountLockOrUnlockedDetails];
  } else if ([tag isEqualToString:@"emm_error_details"]) {
    DBTEAMLOGEmmErrorDetails *emmErrorDetails = [DBTEAMLOGEmmErrorDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmErrorDetails:emmErrorDetails];
  } else if ([tag isEqualToString:@"guest_admin_signed_in_via_trusted_teams_details"]) {
    DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetails *guestAdminSignedInViaTrustedTeamsDetails =
        [DBTEAMLOGGuestAdminSignedInViaTrustedTeamsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGuestAdminSignedInViaTrustedTeamsDetails:guestAdminSignedInViaTrustedTeamsDetails];
  } else if ([tag isEqualToString:@"guest_admin_signed_out_via_trusted_teams_details"]) {
    DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetails *guestAdminSignedOutViaTrustedTeamsDetails =
        [DBTEAMLOGGuestAdminSignedOutViaTrustedTeamsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGuestAdminSignedOutViaTrustedTeamsDetails:guestAdminSignedOutViaTrustedTeamsDetails];
  } else if ([tag isEqualToString:@"login_fail_details"]) {
    DBTEAMLOGLoginFailDetails *loginFailDetails = [DBTEAMLOGLoginFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLoginFailDetails:loginFailDetails];
  } else if ([tag isEqualToString:@"login_success_details"]) {
    DBTEAMLOGLoginSuccessDetails *loginSuccessDetails = [DBTEAMLOGLoginSuccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLoginSuccessDetails:loginSuccessDetails];
  } else if ([tag isEqualToString:@"logout_details"]) {
    DBTEAMLOGLogoutDetails *logoutDetails = [DBTEAMLOGLogoutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithLogoutDetails:logoutDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_end_details"]) {
    DBTEAMLOGResellerSupportSessionEndDetails *resellerSupportSessionEndDetails =
        [DBTEAMLOGResellerSupportSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionEndDetails:resellerSupportSessionEndDetails];
  } else if ([tag isEqualToString:@"reseller_support_session_start_details"]) {
    DBTEAMLOGResellerSupportSessionStartDetails *resellerSupportSessionStartDetails =
        [DBTEAMLOGResellerSupportSessionStartDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithResellerSupportSessionStartDetails:resellerSupportSessionStartDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_end_details"]) {
    DBTEAMLOGSignInAsSessionEndDetails *signInAsSessionEndDetails =
        [DBTEAMLOGSignInAsSessionEndDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionEndDetails:signInAsSessionEndDetails];
  } else if ([tag isEqualToString:@"sign_in_as_session_start_details"]) {
    DBTEAMLOGSignInAsSessionStartDetails *signInAsSessionStartDetails =
        [DBTEAMLOGSignInAsSessionStartDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSignInAsSessionStartDetails:signInAsSessionStartDetails];
  } else if ([tag isEqualToString:@"sso_error_details"]) {
    DBTEAMLOGSsoErrorDetails *ssoErrorDetails = [DBTEAMLOGSsoErrorDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoErrorDetails:ssoErrorDetails];
  } else if ([tag isEqualToString:@"create_team_invite_link_details"]) {
    DBTEAMLOGCreateTeamInviteLinkDetails *createTeamInviteLinkDetails =
        [DBTEAMLOGCreateTeamInviteLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCreateTeamInviteLinkDetails:createTeamInviteLinkDetails];
  } else if ([tag isEqualToString:@"delete_team_invite_link_details"]) {
    DBTEAMLOGDeleteTeamInviteLinkDetails *deleteTeamInviteLinkDetails =
        [DBTEAMLOGDeleteTeamInviteLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithDeleteTeamInviteLinkDetails:deleteTeamInviteLinkDetails];
  } else if ([tag isEqualToString:@"member_add_external_id_details"]) {
    DBTEAMLOGMemberAddExternalIdDetails *memberAddExternalIdDetails =
        [DBTEAMLOGMemberAddExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberAddExternalIdDetails:memberAddExternalIdDetails];
  } else if ([tag isEqualToString:@"member_add_name_details"]) {
    DBTEAMLOGMemberAddNameDetails *memberAddNameDetails =
        [DBTEAMLOGMemberAddNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberAddNameDetails:memberAddNameDetails];
  } else if ([tag isEqualToString:@"member_change_admin_role_details"]) {
    DBTEAMLOGMemberChangeAdminRoleDetails *memberChangeAdminRoleDetails =
        [DBTEAMLOGMemberChangeAdminRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeAdminRoleDetails:memberChangeAdminRoleDetails];
  } else if ([tag isEqualToString:@"member_change_email_details"]) {
    DBTEAMLOGMemberChangeEmailDetails *memberChangeEmailDetails =
        [DBTEAMLOGMemberChangeEmailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeEmailDetails:memberChangeEmailDetails];
  } else if ([tag isEqualToString:@"member_change_external_id_details"]) {
    DBTEAMLOGMemberChangeExternalIdDetails *memberChangeExternalIdDetails =
        [DBTEAMLOGMemberChangeExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeExternalIdDetails:memberChangeExternalIdDetails];
  } else if ([tag isEqualToString:@"member_change_membership_type_details"]) {
    DBTEAMLOGMemberChangeMembershipTypeDetails *memberChangeMembershipTypeDetails =
        [DBTEAMLOGMemberChangeMembershipTypeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeMembershipTypeDetails:memberChangeMembershipTypeDetails];
  } else if ([tag isEqualToString:@"member_change_name_details"]) {
    DBTEAMLOGMemberChangeNameDetails *memberChangeNameDetails =
        [DBTEAMLOGMemberChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeNameDetails:memberChangeNameDetails];
  } else if ([tag isEqualToString:@"member_change_reseller_role_details"]) {
    DBTEAMLOGMemberChangeResellerRoleDetails *memberChangeResellerRoleDetails =
        [DBTEAMLOGMemberChangeResellerRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeResellerRoleDetails:memberChangeResellerRoleDetails];
  } else if ([tag isEqualToString:@"member_change_status_details"]) {
    DBTEAMLOGMemberChangeStatusDetails *memberChangeStatusDetails =
        [DBTEAMLOGMemberChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberChangeStatusDetails:memberChangeStatusDetails];
  } else if ([tag isEqualToString:@"member_delete_manual_contacts_details"]) {
    DBTEAMLOGMemberDeleteManualContactsDetails *memberDeleteManualContactsDetails =
        [DBTEAMLOGMemberDeleteManualContactsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberDeleteManualContactsDetails:memberDeleteManualContactsDetails];
  } else if ([tag isEqualToString:@"member_delete_profile_photo_details"]) {
    DBTEAMLOGMemberDeleteProfilePhotoDetails *memberDeleteProfilePhotoDetails =
        [DBTEAMLOGMemberDeleteProfilePhotoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberDeleteProfilePhotoDetails:memberDeleteProfilePhotoDetails];
  } else if ([tag isEqualToString:@"member_permanently_delete_account_contents_details"]) {
    DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetails *memberPermanentlyDeleteAccountContentsDetails =
        [DBTEAMLOGMemberPermanentlyDeleteAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberPermanentlyDeleteAccountContentsDetails:memberPermanentlyDeleteAccountContentsDetails];
  } else if ([tag isEqualToString:@"member_remove_external_id_details"]) {
    DBTEAMLOGMemberRemoveExternalIdDetails *memberRemoveExternalIdDetails =
        [DBTEAMLOGMemberRemoveExternalIdDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberRemoveExternalIdDetails:memberRemoveExternalIdDetails];
  } else if ([tag isEqualToString:@"member_set_profile_photo_details"]) {
    DBTEAMLOGMemberSetProfilePhotoDetails *memberSetProfilePhotoDetails =
        [DBTEAMLOGMemberSetProfilePhotoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberSetProfilePhotoDetails:memberSetProfilePhotoDetails];
  } else if ([tag isEqualToString:@"member_space_limits_add_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetails *memberSpaceLimitsAddCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsAddCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsAddCustomQuotaDetails:memberSpaceLimitsAddCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetails *memberSpaceLimitsChangeCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeCustomQuotaDetails:memberSpaceLimitsChangeCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_status_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeStatusDetails *memberSpaceLimitsChangeStatusDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeStatusDetails:memberSpaceLimitsChangeStatusDetails];
  } else if ([tag isEqualToString:@"member_space_limits_remove_custom_quota_details"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetails *memberSpaceLimitsRemoveCustomQuotaDetails =
        [DBTEAMLOGMemberSpaceLimitsRemoveCustomQuotaDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsRemoveCustomQuotaDetails:memberSpaceLimitsRemoveCustomQuotaDetails];
  } else if ([tag isEqualToString:@"member_suggest_details"]) {
    DBTEAMLOGMemberSuggestDetails *memberSuggestDetails =
        [DBTEAMLOGMemberSuggestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberSuggestDetails:memberSuggestDetails];
  } else if ([tag isEqualToString:@"member_transfer_account_contents_details"]) {
    DBTEAMLOGMemberTransferAccountContentsDetails *memberTransferAccountContentsDetails =
        [DBTEAMLOGMemberTransferAccountContentsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberTransferAccountContentsDetails:memberTransferAccountContentsDetails];
  } else if ([tag isEqualToString:@"pending_secondary_email_added_details"]) {
    DBTEAMLOGPendingSecondaryEmailAddedDetails *pendingSecondaryEmailAddedDetails =
        [DBTEAMLOGPendingSecondaryEmailAddedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPendingSecondaryEmailAddedDetails:pendingSecondaryEmailAddedDetails];
  } else if ([tag isEqualToString:@"secondary_email_deleted_details"]) {
    DBTEAMLOGSecondaryEmailDeletedDetails *secondaryEmailDeletedDetails =
        [DBTEAMLOGSecondaryEmailDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSecondaryEmailDeletedDetails:secondaryEmailDeletedDetails];
  } else if ([tag isEqualToString:@"secondary_email_verified_details"]) {
    DBTEAMLOGSecondaryEmailVerifiedDetails *secondaryEmailVerifiedDetails =
        [DBTEAMLOGSecondaryEmailVerifiedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSecondaryEmailVerifiedDetails:secondaryEmailVerifiedDetails];
  } else if ([tag isEqualToString:@"secondary_mails_policy_changed_details"]) {
    DBTEAMLOGSecondaryMailsPolicyChangedDetails *secondaryMailsPolicyChangedDetails =
        [DBTEAMLOGSecondaryMailsPolicyChangedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSecondaryMailsPolicyChangedDetails:secondaryMailsPolicyChangedDetails];
  } else if ([tag isEqualToString:@"binder_add_page_details"]) {
    DBTEAMLOGBinderAddPageDetails *binderAddPageDetails =
        [DBTEAMLOGBinderAddPageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderAddPageDetails:binderAddPageDetails];
  } else if ([tag isEqualToString:@"binder_add_section_details"]) {
    DBTEAMLOGBinderAddSectionDetails *binderAddSectionDetails =
        [DBTEAMLOGBinderAddSectionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderAddSectionDetails:binderAddSectionDetails];
  } else if ([tag isEqualToString:@"binder_remove_page_details"]) {
    DBTEAMLOGBinderRemovePageDetails *binderRemovePageDetails =
        [DBTEAMLOGBinderRemovePageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderRemovePageDetails:binderRemovePageDetails];
  } else if ([tag isEqualToString:@"binder_remove_section_details"]) {
    DBTEAMLOGBinderRemoveSectionDetails *binderRemoveSectionDetails =
        [DBTEAMLOGBinderRemoveSectionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderRemoveSectionDetails:binderRemoveSectionDetails];
  } else if ([tag isEqualToString:@"binder_rename_page_details"]) {
    DBTEAMLOGBinderRenamePageDetails *binderRenamePageDetails =
        [DBTEAMLOGBinderRenamePageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderRenamePageDetails:binderRenamePageDetails];
  } else if ([tag isEqualToString:@"binder_rename_section_details"]) {
    DBTEAMLOGBinderRenameSectionDetails *binderRenameSectionDetails =
        [DBTEAMLOGBinderRenameSectionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderRenameSectionDetails:binderRenameSectionDetails];
  } else if ([tag isEqualToString:@"binder_reorder_page_details"]) {
    DBTEAMLOGBinderReorderPageDetails *binderReorderPageDetails =
        [DBTEAMLOGBinderReorderPageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderReorderPageDetails:binderReorderPageDetails];
  } else if ([tag isEqualToString:@"binder_reorder_section_details"]) {
    DBTEAMLOGBinderReorderSectionDetails *binderReorderSectionDetails =
        [DBTEAMLOGBinderReorderSectionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithBinderReorderSectionDetails:binderReorderSectionDetails];
  } else if ([tag isEqualToString:@"paper_content_add_member_details"]) {
    DBTEAMLOGPaperContentAddMemberDetails *paperContentAddMemberDetails =
        [DBTEAMLOGPaperContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddMemberDetails:paperContentAddMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_add_to_folder_details"]) {
    DBTEAMLOGPaperContentAddToFolderDetails *paperContentAddToFolderDetails =
        [DBTEAMLOGPaperContentAddToFolderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentAddToFolderDetails:paperContentAddToFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_archive_details"]) {
    DBTEAMLOGPaperContentArchiveDetails *paperContentArchiveDetails =
        [DBTEAMLOGPaperContentArchiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentArchiveDetails:paperContentArchiveDetails];
  } else if ([tag isEqualToString:@"paper_content_create_details"]) {
    DBTEAMLOGPaperContentCreateDetails *paperContentCreateDetails =
        [DBTEAMLOGPaperContentCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentCreateDetails:paperContentCreateDetails];
  } else if ([tag isEqualToString:@"paper_content_permanently_delete_details"]) {
    DBTEAMLOGPaperContentPermanentlyDeleteDetails *paperContentPermanentlyDeleteDetails =
        [DBTEAMLOGPaperContentPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperContentPermanentlyDeleteDetails:paperContentPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_from_folder_details"]) {
    DBTEAMLOGPaperContentRemoveFromFolderDetails *paperContentRemoveFromFolderDetails =
        [DBTEAMLOGPaperContentRemoveFromFolderDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveFromFolderDetails:paperContentRemoveFromFolderDetails];
  } else if ([tag isEqualToString:@"paper_content_remove_member_details"]) {
    DBTEAMLOGPaperContentRemoveMemberDetails *paperContentRemoveMemberDetails =
        [DBTEAMLOGPaperContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRemoveMemberDetails:paperContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"paper_content_rename_details"]) {
    DBTEAMLOGPaperContentRenameDetails *paperContentRenameDetails =
        [DBTEAMLOGPaperContentRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRenameDetails:paperContentRenameDetails];
  } else if ([tag isEqualToString:@"paper_content_restore_details"]) {
    DBTEAMLOGPaperContentRestoreDetails *paperContentRestoreDetails =
        [DBTEAMLOGPaperContentRestoreDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperContentRestoreDetails:paperContentRestoreDetails];
  } else if ([tag isEqualToString:@"paper_doc_add_comment_details"]) {
    DBTEAMLOGPaperDocAddCommentDetails *paperDocAddCommentDetails =
        [DBTEAMLOGPaperDocAddCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocAddCommentDetails:paperDocAddCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_member_role_details"]) {
    DBTEAMLOGPaperDocChangeMemberRoleDetails *paperDocChangeMemberRoleDetails =
        [DBTEAMLOGPaperDocChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeMemberRoleDetails:paperDocChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_sharing_policy_details"]) {
    DBTEAMLOGPaperDocChangeSharingPolicyDetails *paperDocChangeSharingPolicyDetails =
        [DBTEAMLOGPaperDocChangeSharingPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeSharingPolicyDetails:paperDocChangeSharingPolicyDetails];
  } else if ([tag isEqualToString:@"paper_doc_change_subscription_details"]) {
    DBTEAMLOGPaperDocChangeSubscriptionDetails *paperDocChangeSubscriptionDetails =
        [DBTEAMLOGPaperDocChangeSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocChangeSubscriptionDetails:paperDocChangeSubscriptionDetails];
  } else if ([tag isEqualToString:@"paper_doc_deleted_details"]) {
    DBTEAMLOGPaperDocDeletedDetails *paperDocDeletedDetails =
        [DBTEAMLOGPaperDocDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeletedDetails:paperDocDeletedDetails];
  } else if ([tag isEqualToString:@"paper_doc_delete_comment_details"]) {
    DBTEAMLOGPaperDocDeleteCommentDetails *paperDocDeleteCommentDetails =
        [DBTEAMLOGPaperDocDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDeleteCommentDetails:paperDocDeleteCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_download_details"]) {
    DBTEAMLOGPaperDocDownloadDetails *paperDocDownloadDetails =
        [DBTEAMLOGPaperDocDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocDownloadDetails:paperDocDownloadDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_details"]) {
    DBTEAMLOGPaperDocEditDetails *paperDocEditDetails = [DBTEAMLOGPaperDocEditDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditDetails:paperDocEditDetails];
  } else if ([tag isEqualToString:@"paper_doc_edit_comment_details"]) {
    DBTEAMLOGPaperDocEditCommentDetails *paperDocEditCommentDetails =
        [DBTEAMLOGPaperDocEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocEditCommentDetails:paperDocEditCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_followed_details"]) {
    DBTEAMLOGPaperDocFollowedDetails *paperDocFollowedDetails =
        [DBTEAMLOGPaperDocFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocFollowedDetails:paperDocFollowedDetails];
  } else if ([tag isEqualToString:@"paper_doc_mention_details"]) {
    DBTEAMLOGPaperDocMentionDetails *paperDocMentionDetails =
        [DBTEAMLOGPaperDocMentionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocMentionDetails:paperDocMentionDetails];
  } else if ([tag isEqualToString:@"paper_doc_ownership_changed_details"]) {
    DBTEAMLOGPaperDocOwnershipChangedDetails *paperDocOwnershipChangedDetails =
        [DBTEAMLOGPaperDocOwnershipChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocOwnershipChangedDetails:paperDocOwnershipChangedDetails];
  } else if ([tag isEqualToString:@"paper_doc_request_access_details"]) {
    DBTEAMLOGPaperDocRequestAccessDetails *paperDocRequestAccessDetails =
        [DBTEAMLOGPaperDocRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRequestAccessDetails:paperDocRequestAccessDetails];
  } else if ([tag isEqualToString:@"paper_doc_resolve_comment_details"]) {
    DBTEAMLOGPaperDocResolveCommentDetails *paperDocResolveCommentDetails =
        [DBTEAMLOGPaperDocResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocResolveCommentDetails:paperDocResolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_revert_details"]) {
    DBTEAMLOGPaperDocRevertDetails *paperDocRevertDetails =
        [DBTEAMLOGPaperDocRevertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocRevertDetails:paperDocRevertDetails];
  } else if ([tag isEqualToString:@"paper_doc_slack_share_details"]) {
    DBTEAMLOGPaperDocSlackShareDetails *paperDocSlackShareDetails =
        [DBTEAMLOGPaperDocSlackShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocSlackShareDetails:paperDocSlackShareDetails];
  } else if ([tag isEqualToString:@"paper_doc_team_invite_details"]) {
    DBTEAMLOGPaperDocTeamInviteDetails *paperDocTeamInviteDetails =
        [DBTEAMLOGPaperDocTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocTeamInviteDetails:paperDocTeamInviteDetails];
  } else if ([tag isEqualToString:@"paper_doc_trashed_details"]) {
    DBTEAMLOGPaperDocTrashedDetails *paperDocTrashedDetails =
        [DBTEAMLOGPaperDocTrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocTrashedDetails:paperDocTrashedDetails];
  } else if ([tag isEqualToString:@"paper_doc_unresolve_comment_details"]) {
    DBTEAMLOGPaperDocUnresolveCommentDetails *paperDocUnresolveCommentDetails =
        [DBTEAMLOGPaperDocUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocUnresolveCommentDetails:paperDocUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"paper_doc_untrashed_details"]) {
    DBTEAMLOGPaperDocUntrashedDetails *paperDocUntrashedDetails =
        [DBTEAMLOGPaperDocUntrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocUntrashedDetails:paperDocUntrashedDetails];
  } else if ([tag isEqualToString:@"paper_doc_view_details"]) {
    DBTEAMLOGPaperDocViewDetails *paperDocViewDetails = [DBTEAMLOGPaperDocViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDocViewDetails:paperDocViewDetails];
  } else if ([tag isEqualToString:@"paper_external_view_allow_details"]) {
    DBTEAMLOGPaperExternalViewAllowDetails *paperExternalViewAllowDetails =
        [DBTEAMLOGPaperExternalViewAllowDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewAllowDetails:paperExternalViewAllowDetails];
  } else if ([tag isEqualToString:@"paper_external_view_default_team_details"]) {
    DBTEAMLOGPaperExternalViewDefaultTeamDetails *paperExternalViewDefaultTeamDetails =
        [DBTEAMLOGPaperExternalViewDefaultTeamDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewDefaultTeamDetails:paperExternalViewDefaultTeamDetails];
  } else if ([tag isEqualToString:@"paper_external_view_forbid_details"]) {
    DBTEAMLOGPaperExternalViewForbidDetails *paperExternalViewForbidDetails =
        [DBTEAMLOGPaperExternalViewForbidDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperExternalViewForbidDetails:paperExternalViewForbidDetails];
  } else if ([tag isEqualToString:@"paper_folder_change_subscription_details"]) {
    DBTEAMLOGPaperFolderChangeSubscriptionDetails *paperFolderChangeSubscriptionDetails =
        [DBTEAMLOGPaperFolderChangeSubscriptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperFolderChangeSubscriptionDetails:paperFolderChangeSubscriptionDetails];
  } else if ([tag isEqualToString:@"paper_folder_deleted_details"]) {
    DBTEAMLOGPaperFolderDeletedDetails *paperFolderDeletedDetails =
        [DBTEAMLOGPaperFolderDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderDeletedDetails:paperFolderDeletedDetails];
  } else if ([tag isEqualToString:@"paper_folder_followed_details"]) {
    DBTEAMLOGPaperFolderFollowedDetails *paperFolderFollowedDetails =
        [DBTEAMLOGPaperFolderFollowedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderFollowedDetails:paperFolderFollowedDetails];
  } else if ([tag isEqualToString:@"paper_folder_team_invite_details"]) {
    DBTEAMLOGPaperFolderTeamInviteDetails *paperFolderTeamInviteDetails =
        [DBTEAMLOGPaperFolderTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperFolderTeamInviteDetails:paperFolderTeamInviteDetails];
  } else if ([tag isEqualToString:@"paper_published_link_change_permission_details"]) {
    DBTEAMLOGPaperPublishedLinkChangePermissionDetails *paperPublishedLinkChangePermissionDetails =
        [DBTEAMLOGPaperPublishedLinkChangePermissionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperPublishedLinkChangePermissionDetails:paperPublishedLinkChangePermissionDetails];
  } else if ([tag isEqualToString:@"paper_published_link_create_details"]) {
    DBTEAMLOGPaperPublishedLinkCreateDetails *paperPublishedLinkCreateDetails =
        [DBTEAMLOGPaperPublishedLinkCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperPublishedLinkCreateDetails:paperPublishedLinkCreateDetails];
  } else if ([tag isEqualToString:@"paper_published_link_disabled_details"]) {
    DBTEAMLOGPaperPublishedLinkDisabledDetails *paperPublishedLinkDisabledDetails =
        [DBTEAMLOGPaperPublishedLinkDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperPublishedLinkDisabledDetails:paperPublishedLinkDisabledDetails];
  } else if ([tag isEqualToString:@"paper_published_link_view_details"]) {
    DBTEAMLOGPaperPublishedLinkViewDetails *paperPublishedLinkViewDetails =
        [DBTEAMLOGPaperPublishedLinkViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperPublishedLinkViewDetails:paperPublishedLinkViewDetails];
  } else if ([tag isEqualToString:@"password_change_details"]) {
    DBTEAMLOGPasswordChangeDetails *passwordChangeDetails =
        [DBTEAMLOGPasswordChangeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordChangeDetails:passwordChangeDetails];
  } else if ([tag isEqualToString:@"password_reset_details"]) {
    DBTEAMLOGPasswordResetDetails *passwordResetDetails =
        [DBTEAMLOGPasswordResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetDetails:passwordResetDetails];
  } else if ([tag isEqualToString:@"password_reset_all_details"]) {
    DBTEAMLOGPasswordResetAllDetails *passwordResetAllDetails =
        [DBTEAMLOGPasswordResetAllDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPasswordResetAllDetails:passwordResetAllDetails];
  } else if ([tag isEqualToString:@"classification_create_report_details"]) {
    DBTEAMLOGClassificationCreateReportDetails *classificationCreateReportDetails =
        [DBTEAMLOGClassificationCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithClassificationCreateReportDetails:classificationCreateReportDetails];
  } else if ([tag isEqualToString:@"classification_create_report_fail_details"]) {
    DBTEAMLOGClassificationCreateReportFailDetails *classificationCreateReportFailDetails =
        [DBTEAMLOGClassificationCreateReportFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithClassificationCreateReportFailDetails:classificationCreateReportFailDetails];
  } else if ([tag isEqualToString:@"emm_create_exceptions_report_details"]) {
    DBTEAMLOGEmmCreateExceptionsReportDetails *emmCreateExceptionsReportDetails =
        [DBTEAMLOGEmmCreateExceptionsReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateExceptionsReportDetails:emmCreateExceptionsReportDetails];
  } else if ([tag isEqualToString:@"emm_create_usage_report_details"]) {
    DBTEAMLOGEmmCreateUsageReportDetails *emmCreateUsageReportDetails =
        [DBTEAMLOGEmmCreateUsageReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmCreateUsageReportDetails:emmCreateUsageReportDetails];
  } else if ([tag isEqualToString:@"export_members_report_details"]) {
    DBTEAMLOGExportMembersReportDetails *exportMembersReportDetails =
        [DBTEAMLOGExportMembersReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithExportMembersReportDetails:exportMembersReportDetails];
  } else if ([tag isEqualToString:@"export_members_report_fail_details"]) {
    DBTEAMLOGExportMembersReportFailDetails *exportMembersReportFailDetails =
        [DBTEAMLOGExportMembersReportFailDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithExportMembersReportFailDetails:exportMembersReportFailDetails];
  } else if ([tag isEqualToString:@"external_sharing_create_report_details"]) {
    DBTEAMLOGExternalSharingCreateReportDetails *externalSharingCreateReportDetails =
        [DBTEAMLOGExternalSharingCreateReportDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithExternalSharingCreateReportDetails:externalSharingCreateReportDetails];
  } else if ([tag isEqualToString:@"external_sharing_report_failed_details"]) {
    DBTEAMLOGExternalSharingReportFailedDetails *externalSharingReportFailedDetails =
        [DBTEAMLOGExternalSharingReportFailedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithExternalSharingReportFailedDetails:externalSharingReportFailedDetails];
  } else if ([tag isEqualToString:@"no_expiration_link_gen_create_report_details"]) {
    DBTEAMLOGNoExpirationLinkGenCreateReportDetails *noExpirationLinkGenCreateReportDetails =
        [DBTEAMLOGNoExpirationLinkGenCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoExpirationLinkGenCreateReportDetails:noExpirationLinkGenCreateReportDetails];
  } else if ([tag isEqualToString:@"no_expiration_link_gen_report_failed_details"]) {
    DBTEAMLOGNoExpirationLinkGenReportFailedDetails *noExpirationLinkGenReportFailedDetails =
        [DBTEAMLOGNoExpirationLinkGenReportFailedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoExpirationLinkGenReportFailedDetails:noExpirationLinkGenReportFailedDetails];
  } else if ([tag isEqualToString:@"no_password_link_gen_create_report_details"]) {
    DBTEAMLOGNoPasswordLinkGenCreateReportDetails *noPasswordLinkGenCreateReportDetails =
        [DBTEAMLOGNoPasswordLinkGenCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoPasswordLinkGenCreateReportDetails:noPasswordLinkGenCreateReportDetails];
  } else if ([tag isEqualToString:@"no_password_link_gen_report_failed_details"]) {
    DBTEAMLOGNoPasswordLinkGenReportFailedDetails *noPasswordLinkGenReportFailedDetails =
        [DBTEAMLOGNoPasswordLinkGenReportFailedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoPasswordLinkGenReportFailedDetails:noPasswordLinkGenReportFailedDetails];
  } else if ([tag isEqualToString:@"no_password_link_view_create_report_details"]) {
    DBTEAMLOGNoPasswordLinkViewCreateReportDetails *noPasswordLinkViewCreateReportDetails =
        [DBTEAMLOGNoPasswordLinkViewCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoPasswordLinkViewCreateReportDetails:noPasswordLinkViewCreateReportDetails];
  } else if ([tag isEqualToString:@"no_password_link_view_report_failed_details"]) {
    DBTEAMLOGNoPasswordLinkViewReportFailedDetails *noPasswordLinkViewReportFailedDetails =
        [DBTEAMLOGNoPasswordLinkViewReportFailedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithNoPasswordLinkViewReportFailedDetails:noPasswordLinkViewReportFailedDetails];
  } else if ([tag isEqualToString:@"outdated_link_view_create_report_details"]) {
    DBTEAMLOGOutdatedLinkViewCreateReportDetails *outdatedLinkViewCreateReportDetails =
        [DBTEAMLOGOutdatedLinkViewCreateReportDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithOutdatedLinkViewCreateReportDetails:outdatedLinkViewCreateReportDetails];
  } else if ([tag isEqualToString:@"outdated_link_view_report_failed_details"]) {
    DBTEAMLOGOutdatedLinkViewReportFailedDetails *outdatedLinkViewReportFailedDetails =
        [DBTEAMLOGOutdatedLinkViewReportFailedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithOutdatedLinkViewReportFailedDetails:outdatedLinkViewReportFailedDetails];
  } else if ([tag isEqualToString:@"paper_admin_export_start_details"]) {
    DBTEAMLOGPaperAdminExportStartDetails *paperAdminExportStartDetails =
        [DBTEAMLOGPaperAdminExportStartDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperAdminExportStartDetails:paperAdminExportStartDetails];
  } else if ([tag isEqualToString:@"smart_sync_create_admin_privilege_report_details"]) {
    DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetails *smartSyncCreateAdminPrivilegeReportDetails =
        [DBTEAMLOGSmartSyncCreateAdminPrivilegeReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSmartSyncCreateAdminPrivilegeReportDetails:smartSyncCreateAdminPrivilegeReportDetails];
  } else if ([tag isEqualToString:@"team_activity_create_report_details"]) {
    DBTEAMLOGTeamActivityCreateReportDetails *teamActivityCreateReportDetails =
        [DBTEAMLOGTeamActivityCreateReportDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamActivityCreateReportDetails:teamActivityCreateReportDetails];
  } else if ([tag isEqualToString:@"team_activity_create_report_fail_details"]) {
    DBTEAMLOGTeamActivityCreateReportFailDetails *teamActivityCreateReportFailDetails =
        [DBTEAMLOGTeamActivityCreateReportFailDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamActivityCreateReportFailDetails:teamActivityCreateReportFailDetails];
  } else if ([tag isEqualToString:@"collection_share_details"]) {
    DBTEAMLOGCollectionShareDetails *collectionShareDetails =
        [DBTEAMLOGCollectionShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCollectionShareDetails:collectionShareDetails];
  } else if ([tag isEqualToString:@"file_transfers_file_add_details"]) {
    DBTEAMLOGFileTransfersFileAddDetails *fileTransfersFileAddDetails =
        [DBTEAMLOGFileTransfersFileAddDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileTransfersFileAddDetails:fileTransfersFileAddDetails];
  } else if ([tag isEqualToString:@"file_transfers_transfer_delete_details"]) {
    DBTEAMLOGFileTransfersTransferDeleteDetails *fileTransfersTransferDeleteDetails =
        [DBTEAMLOGFileTransfersTransferDeleteDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithFileTransfersTransferDeleteDetails:fileTransfersTransferDeleteDetails];
  } else if ([tag isEqualToString:@"file_transfers_transfer_download_details"]) {
    DBTEAMLOGFileTransfersTransferDownloadDetails *fileTransfersTransferDownloadDetails =
        [DBTEAMLOGFileTransfersTransferDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileTransfersTransferDownloadDetails:fileTransfersTransferDownloadDetails];
  } else if ([tag isEqualToString:@"file_transfers_transfer_send_details"]) {
    DBTEAMLOGFileTransfersTransferSendDetails *fileTransfersTransferSendDetails =
        [DBTEAMLOGFileTransfersTransferSendDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileTransfersTransferSendDetails:fileTransfersTransferSendDetails];
  } else if ([tag isEqualToString:@"file_transfers_transfer_view_details"]) {
    DBTEAMLOGFileTransfersTransferViewDetails *fileTransfersTransferViewDetails =
        [DBTEAMLOGFileTransfersTransferViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileTransfersTransferViewDetails:fileTransfersTransferViewDetails];
  } else if ([tag isEqualToString:@"note_acl_invite_only_details"]) {
    DBTEAMLOGNoteAclInviteOnlyDetails *noteAclInviteOnlyDetails =
        [DBTEAMLOGNoteAclInviteOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclInviteOnlyDetails:noteAclInviteOnlyDetails];
  } else if ([tag isEqualToString:@"note_acl_link_details"]) {
    DBTEAMLOGNoteAclLinkDetails *noteAclLinkDetails = [DBTEAMLOGNoteAclLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclLinkDetails:noteAclLinkDetails];
  } else if ([tag isEqualToString:@"note_acl_team_link_details"]) {
    DBTEAMLOGNoteAclTeamLinkDetails *noteAclTeamLinkDetails =
        [DBTEAMLOGNoteAclTeamLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteAclTeamLinkDetails:noteAclTeamLinkDetails];
  } else if ([tag isEqualToString:@"note_shared_details"]) {
    DBTEAMLOGNoteSharedDetails *noteSharedDetails = [DBTEAMLOGNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteSharedDetails:noteSharedDetails];
  } else if ([tag isEqualToString:@"note_share_receive_details"]) {
    DBTEAMLOGNoteShareReceiveDetails *noteShareReceiveDetails =
        [DBTEAMLOGNoteShareReceiveDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNoteShareReceiveDetails:noteShareReceiveDetails];
  } else if ([tag isEqualToString:@"open_note_shared_details"]) {
    DBTEAMLOGOpenNoteSharedDetails *openNoteSharedDetails =
        [DBTEAMLOGOpenNoteSharedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithOpenNoteSharedDetails:openNoteSharedDetails];
  } else if ([tag isEqualToString:@"sf_add_group_details"]) {
    DBTEAMLOGSfAddGroupDetails *sfAddGroupDetails = [DBTEAMLOGSfAddGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfAddGroupDetails:sfAddGroupDetails];
  } else if ([tag isEqualToString:@"sf_allow_non_members_to_view_shared_links_details"]) {
    DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetails *sfAllowNonMembersToViewSharedLinksDetails =
        [DBTEAMLOGSfAllowNonMembersToViewSharedLinksDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSfAllowNonMembersToViewSharedLinksDetails:sfAllowNonMembersToViewSharedLinksDetails];
  } else if ([tag isEqualToString:@"sf_external_invite_warn_details"]) {
    DBTEAMLOGSfExternalInviteWarnDetails *sfExternalInviteWarnDetails =
        [DBTEAMLOGSfExternalInviteWarnDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfExternalInviteWarnDetails:sfExternalInviteWarnDetails];
  } else if ([tag isEqualToString:@"sf_fb_invite_details"]) {
    DBTEAMLOGSfFbInviteDetails *sfFbInviteDetails = [DBTEAMLOGSfFbInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbInviteDetails:sfFbInviteDetails];
  } else if ([tag isEqualToString:@"sf_fb_invite_change_role_details"]) {
    DBTEAMLOGSfFbInviteChangeRoleDetails *sfFbInviteChangeRoleDetails =
        [DBTEAMLOGSfFbInviteChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbInviteChangeRoleDetails:sfFbInviteChangeRoleDetails];
  } else if ([tag isEqualToString:@"sf_fb_uninvite_details"]) {
    DBTEAMLOGSfFbUninviteDetails *sfFbUninviteDetails = [DBTEAMLOGSfFbUninviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfFbUninviteDetails:sfFbUninviteDetails];
  } else if ([tag isEqualToString:@"sf_invite_group_details"]) {
    DBTEAMLOGSfInviteGroupDetails *sfInviteGroupDetails =
        [DBTEAMLOGSfInviteGroupDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfInviteGroupDetails:sfInviteGroupDetails];
  } else if ([tag isEqualToString:@"sf_team_grant_access_details"]) {
    DBTEAMLOGSfTeamGrantAccessDetails *sfTeamGrantAccessDetails =
        [DBTEAMLOGSfTeamGrantAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamGrantAccessDetails:sfTeamGrantAccessDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_details"]) {
    DBTEAMLOGSfTeamInviteDetails *sfTeamInviteDetails = [DBTEAMLOGSfTeamInviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteDetails:sfTeamInviteDetails];
  } else if ([tag isEqualToString:@"sf_team_invite_change_role_details"]) {
    DBTEAMLOGSfTeamInviteChangeRoleDetails *sfTeamInviteChangeRoleDetails =
        [DBTEAMLOGSfTeamInviteChangeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamInviteChangeRoleDetails:sfTeamInviteChangeRoleDetails];
  } else if ([tag isEqualToString:@"sf_team_join_details"]) {
    DBTEAMLOGSfTeamJoinDetails *sfTeamJoinDetails = [DBTEAMLOGSfTeamJoinDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinDetails:sfTeamJoinDetails];
  } else if ([tag isEqualToString:@"sf_team_join_from_oob_link_details"]) {
    DBTEAMLOGSfTeamJoinFromOobLinkDetails *sfTeamJoinFromOobLinkDetails =
        [DBTEAMLOGSfTeamJoinFromOobLinkDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamJoinFromOobLinkDetails:sfTeamJoinFromOobLinkDetails];
  } else if ([tag isEqualToString:@"sf_team_uninvite_details"]) {
    DBTEAMLOGSfTeamUninviteDetails *sfTeamUninviteDetails =
        [DBTEAMLOGSfTeamUninviteDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSfTeamUninviteDetails:sfTeamUninviteDetails];
  } else if ([tag isEqualToString:@"shared_content_add_invitees_details"]) {
    DBTEAMLOGSharedContentAddInviteesDetails *sharedContentAddInviteesDetails =
        [DBTEAMLOGSharedContentAddInviteesDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddInviteesDetails:sharedContentAddInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_expiry_details"]) {
    DBTEAMLOGSharedContentAddLinkExpiryDetails *sharedContentAddLinkExpiryDetails =
        [DBTEAMLOGSharedContentAddLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkExpiryDetails:sharedContentAddLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_add_link_password_details"]) {
    DBTEAMLOGSharedContentAddLinkPasswordDetails *sharedContentAddLinkPasswordDetails =
        [DBTEAMLOGSharedContentAddLinkPasswordDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddLinkPasswordDetails:sharedContentAddLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_add_member_details"]) {
    DBTEAMLOGSharedContentAddMemberDetails *sharedContentAddMemberDetails =
        [DBTEAMLOGSharedContentAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentAddMemberDetails:sharedContentAddMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_change_downloads_policy_details"]) {
    DBTEAMLOGSharedContentChangeDownloadsPolicyDetails *sharedContentChangeDownloadsPolicyDetails =
        [DBTEAMLOGSharedContentChangeDownloadsPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeDownloadsPolicyDetails:sharedContentChangeDownloadsPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_change_invitee_role_details"]) {
    DBTEAMLOGSharedContentChangeInviteeRoleDetails *sharedContentChangeInviteeRoleDetails =
        [DBTEAMLOGSharedContentChangeInviteeRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeInviteeRoleDetails:sharedContentChangeInviteeRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_audience_details"]) {
    DBTEAMLOGSharedContentChangeLinkAudienceDetails *sharedContentChangeLinkAudienceDetails =
        [DBTEAMLOGSharedContentChangeLinkAudienceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkAudienceDetails:sharedContentChangeLinkAudienceDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_expiry_details"]) {
    DBTEAMLOGSharedContentChangeLinkExpiryDetails *sharedContentChangeLinkExpiryDetails =
        [DBTEAMLOGSharedContentChangeLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkExpiryDetails:sharedContentChangeLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_change_link_password_details"]) {
    DBTEAMLOGSharedContentChangeLinkPasswordDetails *sharedContentChangeLinkPasswordDetails =
        [DBTEAMLOGSharedContentChangeLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeLinkPasswordDetails:sharedContentChangeLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_change_member_role_details"]) {
    DBTEAMLOGSharedContentChangeMemberRoleDetails *sharedContentChangeMemberRoleDetails =
        [DBTEAMLOGSharedContentChangeMemberRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeMemberRoleDetails:sharedContentChangeMemberRoleDetails];
  } else if ([tag isEqualToString:@"shared_content_change_viewer_info_policy_details"]) {
    DBTEAMLOGSharedContentChangeViewerInfoPolicyDetails *sharedContentChangeViewerInfoPolicyDetails =
        [DBTEAMLOGSharedContentChangeViewerInfoPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentChangeViewerInfoPolicyDetails:sharedContentChangeViewerInfoPolicyDetails];
  } else if ([tag isEqualToString:@"shared_content_claim_invitation_details"]) {
    DBTEAMLOGSharedContentClaimInvitationDetails *sharedContentClaimInvitationDetails =
        [DBTEAMLOGSharedContentClaimInvitationDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentClaimInvitationDetails:sharedContentClaimInvitationDetails];
  } else if ([tag isEqualToString:@"shared_content_copy_details"]) {
    DBTEAMLOGSharedContentCopyDetails *sharedContentCopyDetails =
        [DBTEAMLOGSharedContentCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentCopyDetails:sharedContentCopyDetails];
  } else if ([tag isEqualToString:@"shared_content_download_details"]) {
    DBTEAMLOGSharedContentDownloadDetails *sharedContentDownloadDetails =
        [DBTEAMLOGSharedContentDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentDownloadDetails:sharedContentDownloadDetails];
  } else if ([tag isEqualToString:@"shared_content_relinquish_membership_details"]) {
    DBTEAMLOGSharedContentRelinquishMembershipDetails *sharedContentRelinquishMembershipDetails =
        [DBTEAMLOGSharedContentRelinquishMembershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRelinquishMembershipDetails:sharedContentRelinquishMembershipDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_invitees_details"]) {
    DBTEAMLOGSharedContentRemoveInviteesDetails *sharedContentRemoveInviteesDetails =
        [DBTEAMLOGSharedContentRemoveInviteesDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveInviteesDetails:sharedContentRemoveInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_expiry_details"]) {
    DBTEAMLOGSharedContentRemoveLinkExpiryDetails *sharedContentRemoveLinkExpiryDetails =
        [DBTEAMLOGSharedContentRemoveLinkExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkExpiryDetails:sharedContentRemoveLinkExpiryDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_link_password_details"]) {
    DBTEAMLOGSharedContentRemoveLinkPasswordDetails *sharedContentRemoveLinkPasswordDetails =
        [DBTEAMLOGSharedContentRemoveLinkPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedContentRemoveLinkPasswordDetails:sharedContentRemoveLinkPasswordDetails];
  } else if ([tag isEqualToString:@"shared_content_remove_member_details"]) {
    DBTEAMLOGSharedContentRemoveMemberDetails *sharedContentRemoveMemberDetails =
        [DBTEAMLOGSharedContentRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRemoveMemberDetails:sharedContentRemoveMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_request_access_details"]) {
    DBTEAMLOGSharedContentRequestAccessDetails *sharedContentRequestAccessDetails =
        [DBTEAMLOGSharedContentRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRequestAccessDetails:sharedContentRequestAccessDetails];
  } else if ([tag isEqualToString:@"shared_content_restore_invitees_details"]) {
    DBTEAMLOGSharedContentRestoreInviteesDetails *sharedContentRestoreInviteesDetails =
        [DBTEAMLOGSharedContentRestoreInviteesDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedContentRestoreInviteesDetails:sharedContentRestoreInviteesDetails];
  } else if ([tag isEqualToString:@"shared_content_restore_member_details"]) {
    DBTEAMLOGSharedContentRestoreMemberDetails *sharedContentRestoreMemberDetails =
        [DBTEAMLOGSharedContentRestoreMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentRestoreMemberDetails:sharedContentRestoreMemberDetails];
  } else if ([tag isEqualToString:@"shared_content_unshare_details"]) {
    DBTEAMLOGSharedContentUnshareDetails *sharedContentUnshareDetails =
        [DBTEAMLOGSharedContentUnshareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentUnshareDetails:sharedContentUnshareDetails];
  } else if ([tag isEqualToString:@"shared_content_view_details"]) {
    DBTEAMLOGSharedContentViewDetails *sharedContentViewDetails =
        [DBTEAMLOGSharedContentViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedContentViewDetails:sharedContentViewDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_link_policy_details"]) {
    DBTEAMLOGSharedFolderChangeLinkPolicyDetails *sharedFolderChangeLinkPolicyDetails =
        [DBTEAMLOGSharedFolderChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithSharedFolderChangeLinkPolicyDetails:sharedFolderChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_inheritance_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetails *sharedFolderChangeMembersInheritancePolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersInheritancePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersInheritancePolicyDetails:sharedFolderChangeMembersInheritancePolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_management_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetails *sharedFolderChangeMembersManagementPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersManagementPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersManagementPolicyDetails:sharedFolderChangeMembersManagementPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_change_members_policy_details"]) {
    DBTEAMLOGSharedFolderChangeMembersPolicyDetails *sharedFolderChangeMembersPolicyDetails =
        [DBTEAMLOGSharedFolderChangeMembersPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderChangeMembersPolicyDetails:sharedFolderChangeMembersPolicyDetails];
  } else if ([tag isEqualToString:@"shared_folder_create_details"]) {
    DBTEAMLOGSharedFolderCreateDetails *sharedFolderCreateDetails =
        [DBTEAMLOGSharedFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderCreateDetails:sharedFolderCreateDetails];
  } else if ([tag isEqualToString:@"shared_folder_decline_invitation_details"]) {
    DBTEAMLOGSharedFolderDeclineInvitationDetails *sharedFolderDeclineInvitationDetails =
        [DBTEAMLOGSharedFolderDeclineInvitationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderDeclineInvitationDetails:sharedFolderDeclineInvitationDetails];
  } else if ([tag isEqualToString:@"shared_folder_mount_details"]) {
    DBTEAMLOGSharedFolderMountDetails *sharedFolderMountDetails =
        [DBTEAMLOGSharedFolderMountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderMountDetails:sharedFolderMountDetails];
  } else if ([tag isEqualToString:@"shared_folder_nest_details"]) {
    DBTEAMLOGSharedFolderNestDetails *sharedFolderNestDetails =
        [DBTEAMLOGSharedFolderNestDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderNestDetails:sharedFolderNestDetails];
  } else if ([tag isEqualToString:@"shared_folder_transfer_ownership_details"]) {
    DBTEAMLOGSharedFolderTransferOwnershipDetails *sharedFolderTransferOwnershipDetails =
        [DBTEAMLOGSharedFolderTransferOwnershipDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedFolderTransferOwnershipDetails:sharedFolderTransferOwnershipDetails];
  } else if ([tag isEqualToString:@"shared_folder_unmount_details"]) {
    DBTEAMLOGSharedFolderUnmountDetails *sharedFolderUnmountDetails =
        [DBTEAMLOGSharedFolderUnmountDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedFolderUnmountDetails:sharedFolderUnmountDetails];
  } else if ([tag isEqualToString:@"shared_link_add_expiry_details"]) {
    DBTEAMLOGSharedLinkAddExpiryDetails *sharedLinkAddExpiryDetails =
        [DBTEAMLOGSharedLinkAddExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkAddExpiryDetails:sharedLinkAddExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_change_expiry_details"]) {
    DBTEAMLOGSharedLinkChangeExpiryDetails *sharedLinkChangeExpiryDetails =
        [DBTEAMLOGSharedLinkChangeExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkChangeExpiryDetails:sharedLinkChangeExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_change_visibility_details"]) {
    DBTEAMLOGSharedLinkChangeVisibilityDetails *sharedLinkChangeVisibilityDetails =
        [DBTEAMLOGSharedLinkChangeVisibilityDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkChangeVisibilityDetails:sharedLinkChangeVisibilityDetails];
  } else if ([tag isEqualToString:@"shared_link_copy_details"]) {
    DBTEAMLOGSharedLinkCopyDetails *sharedLinkCopyDetails =
        [DBTEAMLOGSharedLinkCopyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkCopyDetails:sharedLinkCopyDetails];
  } else if ([tag isEqualToString:@"shared_link_create_details"]) {
    DBTEAMLOGSharedLinkCreateDetails *sharedLinkCreateDetails =
        [DBTEAMLOGSharedLinkCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkCreateDetails:sharedLinkCreateDetails];
  } else if ([tag isEqualToString:@"shared_link_disable_details"]) {
    DBTEAMLOGSharedLinkDisableDetails *sharedLinkDisableDetails =
        [DBTEAMLOGSharedLinkDisableDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkDisableDetails:sharedLinkDisableDetails];
  } else if ([tag isEqualToString:@"shared_link_download_details"]) {
    DBTEAMLOGSharedLinkDownloadDetails *sharedLinkDownloadDetails =
        [DBTEAMLOGSharedLinkDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkDownloadDetails:sharedLinkDownloadDetails];
  } else if ([tag isEqualToString:@"shared_link_remove_expiry_details"]) {
    DBTEAMLOGSharedLinkRemoveExpiryDetails *sharedLinkRemoveExpiryDetails =
        [DBTEAMLOGSharedLinkRemoveExpiryDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkRemoveExpiryDetails:sharedLinkRemoveExpiryDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_add_expiration_details"]) {
    DBTEAMLOGSharedLinkSettingsAddExpirationDetails *sharedLinkSettingsAddExpirationDetails =
        [DBTEAMLOGSharedLinkSettingsAddExpirationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsAddExpirationDetails:sharedLinkSettingsAddExpirationDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_add_password_details"]) {
    DBTEAMLOGSharedLinkSettingsAddPasswordDetails *sharedLinkSettingsAddPasswordDetails =
        [DBTEAMLOGSharedLinkSettingsAddPasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsAddPasswordDetails:sharedLinkSettingsAddPasswordDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_allow_download_disabled_details"]) {
    DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetails *sharedLinkSettingsAllowDownloadDisabledDetails =
        [DBTEAMLOGSharedLinkSettingsAllowDownloadDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsAllowDownloadDisabledDetails:sharedLinkSettingsAllowDownloadDisabledDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_allow_download_enabled_details"]) {
    DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetails *sharedLinkSettingsAllowDownloadEnabledDetails =
        [DBTEAMLOGSharedLinkSettingsAllowDownloadEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsAllowDownloadEnabledDetails:sharedLinkSettingsAllowDownloadEnabledDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_change_audience_details"]) {
    DBTEAMLOGSharedLinkSettingsChangeAudienceDetails *sharedLinkSettingsChangeAudienceDetails =
        [DBTEAMLOGSharedLinkSettingsChangeAudienceDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsChangeAudienceDetails:sharedLinkSettingsChangeAudienceDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_change_expiration_details"]) {
    DBTEAMLOGSharedLinkSettingsChangeExpirationDetails *sharedLinkSettingsChangeExpirationDetails =
        [DBTEAMLOGSharedLinkSettingsChangeExpirationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsChangeExpirationDetails:sharedLinkSettingsChangeExpirationDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_change_password_details"]) {
    DBTEAMLOGSharedLinkSettingsChangePasswordDetails *sharedLinkSettingsChangePasswordDetails =
        [DBTEAMLOGSharedLinkSettingsChangePasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsChangePasswordDetails:sharedLinkSettingsChangePasswordDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_remove_expiration_details"]) {
    DBTEAMLOGSharedLinkSettingsRemoveExpirationDetails *sharedLinkSettingsRemoveExpirationDetails =
        [DBTEAMLOGSharedLinkSettingsRemoveExpirationDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsRemoveExpirationDetails:sharedLinkSettingsRemoveExpirationDetails];
  } else if ([tag isEqualToString:@"shared_link_settings_remove_password_details"]) {
    DBTEAMLOGSharedLinkSettingsRemovePasswordDetails *sharedLinkSettingsRemovePasswordDetails =
        [DBTEAMLOGSharedLinkSettingsRemovePasswordDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharedLinkSettingsRemovePasswordDetails:sharedLinkSettingsRemovePasswordDetails];
  } else if ([tag isEqualToString:@"shared_link_share_details"]) {
    DBTEAMLOGSharedLinkShareDetails *sharedLinkShareDetails =
        [DBTEAMLOGSharedLinkShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkShareDetails:sharedLinkShareDetails];
  } else if ([tag isEqualToString:@"shared_link_view_details"]) {
    DBTEAMLOGSharedLinkViewDetails *sharedLinkViewDetails =
        [DBTEAMLOGSharedLinkViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedLinkViewDetails:sharedLinkViewDetails];
  } else if ([tag isEqualToString:@"shared_note_opened_details"]) {
    DBTEAMLOGSharedNoteOpenedDetails *sharedNoteOpenedDetails =
        [DBTEAMLOGSharedNoteOpenedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharedNoteOpenedDetails:sharedNoteOpenedDetails];
  } else if ([tag isEqualToString:@"shmodel_disable_downloads_details"]) {
    DBTEAMLOGShmodelDisableDownloadsDetails *shmodelDisableDownloadsDetails =
        [DBTEAMLOGShmodelDisableDownloadsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelDisableDownloadsDetails:shmodelDisableDownloadsDetails];
  } else if ([tag isEqualToString:@"shmodel_enable_downloads_details"]) {
    DBTEAMLOGShmodelEnableDownloadsDetails *shmodelEnableDownloadsDetails =
        [DBTEAMLOGShmodelEnableDownloadsDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelEnableDownloadsDetails:shmodelEnableDownloadsDetails];
  } else if ([tag isEqualToString:@"shmodel_group_share_details"]) {
    DBTEAMLOGShmodelGroupShareDetails *shmodelGroupShareDetails =
        [DBTEAMLOGShmodelGroupShareDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShmodelGroupShareDetails:shmodelGroupShareDetails];
  } else if ([tag isEqualToString:@"showcase_access_granted_details"]) {
    DBTEAMLOGShowcaseAccessGrantedDetails *showcaseAccessGrantedDetails =
        [DBTEAMLOGShowcaseAccessGrantedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseAccessGrantedDetails:showcaseAccessGrantedDetails];
  } else if ([tag isEqualToString:@"showcase_add_member_details"]) {
    DBTEAMLOGShowcaseAddMemberDetails *showcaseAddMemberDetails =
        [DBTEAMLOGShowcaseAddMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseAddMemberDetails:showcaseAddMemberDetails];
  } else if ([tag isEqualToString:@"showcase_archived_details"]) {
    DBTEAMLOGShowcaseArchivedDetails *showcaseArchivedDetails =
        [DBTEAMLOGShowcaseArchivedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseArchivedDetails:showcaseArchivedDetails];
  } else if ([tag isEqualToString:@"showcase_created_details"]) {
    DBTEAMLOGShowcaseCreatedDetails *showcaseCreatedDetails =
        [DBTEAMLOGShowcaseCreatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseCreatedDetails:showcaseCreatedDetails];
  } else if ([tag isEqualToString:@"showcase_delete_comment_details"]) {
    DBTEAMLOGShowcaseDeleteCommentDetails *showcaseDeleteCommentDetails =
        [DBTEAMLOGShowcaseDeleteCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseDeleteCommentDetails:showcaseDeleteCommentDetails];
  } else if ([tag isEqualToString:@"showcase_edited_details"]) {
    DBTEAMLOGShowcaseEditedDetails *showcaseEditedDetails =
        [DBTEAMLOGShowcaseEditedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseEditedDetails:showcaseEditedDetails];
  } else if ([tag isEqualToString:@"showcase_edit_comment_details"]) {
    DBTEAMLOGShowcaseEditCommentDetails *showcaseEditCommentDetails =
        [DBTEAMLOGShowcaseEditCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseEditCommentDetails:showcaseEditCommentDetails];
  } else if ([tag isEqualToString:@"showcase_file_added_details"]) {
    DBTEAMLOGShowcaseFileAddedDetails *showcaseFileAddedDetails =
        [DBTEAMLOGShowcaseFileAddedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileAddedDetails:showcaseFileAddedDetails];
  } else if ([tag isEqualToString:@"showcase_file_download_details"]) {
    DBTEAMLOGShowcaseFileDownloadDetails *showcaseFileDownloadDetails =
        [DBTEAMLOGShowcaseFileDownloadDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileDownloadDetails:showcaseFileDownloadDetails];
  } else if ([tag isEqualToString:@"showcase_file_removed_details"]) {
    DBTEAMLOGShowcaseFileRemovedDetails *showcaseFileRemovedDetails =
        [DBTEAMLOGShowcaseFileRemovedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileRemovedDetails:showcaseFileRemovedDetails];
  } else if ([tag isEqualToString:@"showcase_file_view_details"]) {
    DBTEAMLOGShowcaseFileViewDetails *showcaseFileViewDetails =
        [DBTEAMLOGShowcaseFileViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseFileViewDetails:showcaseFileViewDetails];
  } else if ([tag isEqualToString:@"showcase_permanently_deleted_details"]) {
    DBTEAMLOGShowcasePermanentlyDeletedDetails *showcasePermanentlyDeletedDetails =
        [DBTEAMLOGShowcasePermanentlyDeletedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcasePermanentlyDeletedDetails:showcasePermanentlyDeletedDetails];
  } else if ([tag isEqualToString:@"showcase_post_comment_details"]) {
    DBTEAMLOGShowcasePostCommentDetails *showcasePostCommentDetails =
        [DBTEAMLOGShowcasePostCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcasePostCommentDetails:showcasePostCommentDetails];
  } else if ([tag isEqualToString:@"showcase_remove_member_details"]) {
    DBTEAMLOGShowcaseRemoveMemberDetails *showcaseRemoveMemberDetails =
        [DBTEAMLOGShowcaseRemoveMemberDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRemoveMemberDetails:showcaseRemoveMemberDetails];
  } else if ([tag isEqualToString:@"showcase_renamed_details"]) {
    DBTEAMLOGShowcaseRenamedDetails *showcaseRenamedDetails =
        [DBTEAMLOGShowcaseRenamedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRenamedDetails:showcaseRenamedDetails];
  } else if ([tag isEqualToString:@"showcase_request_access_details"]) {
    DBTEAMLOGShowcaseRequestAccessDetails *showcaseRequestAccessDetails =
        [DBTEAMLOGShowcaseRequestAccessDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRequestAccessDetails:showcaseRequestAccessDetails];
  } else if ([tag isEqualToString:@"showcase_resolve_comment_details"]) {
    DBTEAMLOGShowcaseResolveCommentDetails *showcaseResolveCommentDetails =
        [DBTEAMLOGShowcaseResolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseResolveCommentDetails:showcaseResolveCommentDetails];
  } else if ([tag isEqualToString:@"showcase_restored_details"]) {
    DBTEAMLOGShowcaseRestoredDetails *showcaseRestoredDetails =
        [DBTEAMLOGShowcaseRestoredDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseRestoredDetails:showcaseRestoredDetails];
  } else if ([tag isEqualToString:@"showcase_trashed_details"]) {
    DBTEAMLOGShowcaseTrashedDetails *showcaseTrashedDetails =
        [DBTEAMLOGShowcaseTrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseTrashedDetails:showcaseTrashedDetails];
  } else if ([tag isEqualToString:@"showcase_trashed_deprecated_details"]) {
    DBTEAMLOGShowcaseTrashedDeprecatedDetails *showcaseTrashedDeprecatedDetails =
        [DBTEAMLOGShowcaseTrashedDeprecatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseTrashedDeprecatedDetails:showcaseTrashedDeprecatedDetails];
  } else if ([tag isEqualToString:@"showcase_unresolve_comment_details"]) {
    DBTEAMLOGShowcaseUnresolveCommentDetails *showcaseUnresolveCommentDetails =
        [DBTEAMLOGShowcaseUnresolveCommentDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseUnresolveCommentDetails:showcaseUnresolveCommentDetails];
  } else if ([tag isEqualToString:@"showcase_untrashed_details"]) {
    DBTEAMLOGShowcaseUntrashedDetails *showcaseUntrashedDetails =
        [DBTEAMLOGShowcaseUntrashedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseUntrashedDetails:showcaseUntrashedDetails];
  } else if ([tag isEqualToString:@"showcase_untrashed_deprecated_details"]) {
    DBTEAMLOGShowcaseUntrashedDeprecatedDetails *showcaseUntrashedDeprecatedDetails =
        [DBTEAMLOGShowcaseUntrashedDeprecatedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseUntrashedDeprecatedDetails:showcaseUntrashedDeprecatedDetails];
  } else if ([tag isEqualToString:@"showcase_view_details"]) {
    DBTEAMLOGShowcaseViewDetails *showcaseViewDetails = [DBTEAMLOGShowcaseViewDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithShowcaseViewDetails:showcaseViewDetails];
  } else if ([tag isEqualToString:@"sso_add_cert_details"]) {
    DBTEAMLOGSsoAddCertDetails *ssoAddCertDetails = [DBTEAMLOGSsoAddCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddCertDetails:ssoAddCertDetails];
  } else if ([tag isEqualToString:@"sso_add_login_url_details"]) {
    DBTEAMLOGSsoAddLoginUrlDetails *ssoAddLoginUrlDetails =
        [DBTEAMLOGSsoAddLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddLoginUrlDetails:ssoAddLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_add_logout_url_details"]) {
    DBTEAMLOGSsoAddLogoutUrlDetails *ssoAddLogoutUrlDetails =
        [DBTEAMLOGSsoAddLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoAddLogoutUrlDetails:ssoAddLogoutUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_cert_details"]) {
    DBTEAMLOGSsoChangeCertDetails *ssoChangeCertDetails =
        [DBTEAMLOGSsoChangeCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeCertDetails:ssoChangeCertDetails];
  } else if ([tag isEqualToString:@"sso_change_login_url_details"]) {
    DBTEAMLOGSsoChangeLoginUrlDetails *ssoChangeLoginUrlDetails =
        [DBTEAMLOGSsoChangeLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLoginUrlDetails:ssoChangeLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_logout_url_details"]) {
    DBTEAMLOGSsoChangeLogoutUrlDetails *ssoChangeLogoutUrlDetails =
        [DBTEAMLOGSsoChangeLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeLogoutUrlDetails:ssoChangeLogoutUrlDetails];
  } else if ([tag isEqualToString:@"sso_change_saml_identity_mode_details"]) {
    DBTEAMLOGSsoChangeSamlIdentityModeDetails *ssoChangeSamlIdentityModeDetails =
        [DBTEAMLOGSsoChangeSamlIdentityModeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangeSamlIdentityModeDetails:ssoChangeSamlIdentityModeDetails];
  } else if ([tag isEqualToString:@"sso_remove_cert_details"]) {
    DBTEAMLOGSsoRemoveCertDetails *ssoRemoveCertDetails =
        [DBTEAMLOGSsoRemoveCertDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveCertDetails:ssoRemoveCertDetails];
  } else if ([tag isEqualToString:@"sso_remove_login_url_details"]) {
    DBTEAMLOGSsoRemoveLoginUrlDetails *ssoRemoveLoginUrlDetails =
        [DBTEAMLOGSsoRemoveLoginUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveLoginUrlDetails:ssoRemoveLoginUrlDetails];
  } else if ([tag isEqualToString:@"sso_remove_logout_url_details"]) {
    DBTEAMLOGSsoRemoveLogoutUrlDetails *ssoRemoveLogoutUrlDetails =
        [DBTEAMLOGSsoRemoveLogoutUrlDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoRemoveLogoutUrlDetails:ssoRemoveLogoutUrlDetails];
  } else if ([tag isEqualToString:@"team_folder_change_status_details"]) {
    DBTEAMLOGTeamFolderChangeStatusDetails *teamFolderChangeStatusDetails =
        [DBTEAMLOGTeamFolderChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderChangeStatusDetails:teamFolderChangeStatusDetails];
  } else if ([tag isEqualToString:@"team_folder_create_details"]) {
    DBTEAMLOGTeamFolderCreateDetails *teamFolderCreateDetails =
        [DBTEAMLOGTeamFolderCreateDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderCreateDetails:teamFolderCreateDetails];
  } else if ([tag isEqualToString:@"team_folder_downgrade_details"]) {
    DBTEAMLOGTeamFolderDowngradeDetails *teamFolderDowngradeDetails =
        [DBTEAMLOGTeamFolderDowngradeDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderDowngradeDetails:teamFolderDowngradeDetails];
  } else if ([tag isEqualToString:@"team_folder_permanently_delete_details"]) {
    DBTEAMLOGTeamFolderPermanentlyDeleteDetails *teamFolderPermanentlyDeleteDetails =
        [DBTEAMLOGTeamFolderPermanentlyDeleteDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamFolderPermanentlyDeleteDetails:teamFolderPermanentlyDeleteDetails];
  } else if ([tag isEqualToString:@"team_folder_rename_details"]) {
    DBTEAMLOGTeamFolderRenameDetails *teamFolderRenameDetails =
        [DBTEAMLOGTeamFolderRenameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamFolderRenameDetails:teamFolderRenameDetails];
  } else if ([tag isEqualToString:@"team_selective_sync_settings_changed_details"]) {
    DBTEAMLOGTeamSelectiveSyncSettingsChangedDetails *teamSelectiveSyncSettingsChangedDetails =
        [DBTEAMLOGTeamSelectiveSyncSettingsChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamSelectiveSyncSettingsChangedDetails:teamSelectiveSyncSettingsChangedDetails];
  } else if ([tag isEqualToString:@"account_capture_change_policy_details"]) {
    DBTEAMLOGAccountCaptureChangePolicyDetails *accountCaptureChangePolicyDetails =
        [DBTEAMLOGAccountCaptureChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAccountCaptureChangePolicyDetails:accountCaptureChangePolicyDetails];
  } else if ([tag isEqualToString:@"admin_email_reminders_changed_details"]) {
    DBTEAMLOGAdminEmailRemindersChangedDetails *adminEmailRemindersChangedDetails =
        [DBTEAMLOGAdminEmailRemindersChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAdminEmailRemindersChangedDetails:adminEmailRemindersChangedDetails];
  } else if ([tag isEqualToString:@"allow_download_disabled_details"]) {
    DBTEAMLOGAllowDownloadDisabledDetails *allowDownloadDisabledDetails =
        [DBTEAMLOGAllowDownloadDisabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadDisabledDetails:allowDownloadDisabledDetails];
  } else if ([tag isEqualToString:@"allow_download_enabled_details"]) {
    DBTEAMLOGAllowDownloadEnabledDetails *allowDownloadEnabledDetails =
        [DBTEAMLOGAllowDownloadEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAllowDownloadEnabledDetails:allowDownloadEnabledDetails];
  } else if ([tag isEqualToString:@"app_permissions_changed_details"]) {
    DBTEAMLOGAppPermissionsChangedDetails *appPermissionsChangedDetails =
        [DBTEAMLOGAppPermissionsChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithAppPermissionsChangedDetails:appPermissionsChangedDetails];
  } else if ([tag isEqualToString:@"camera_uploads_policy_changed_details"]) {
    DBTEAMLOGCameraUploadsPolicyChangedDetails *cameraUploadsPolicyChangedDetails =
        [DBTEAMLOGCameraUploadsPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithCameraUploadsPolicyChangedDetails:cameraUploadsPolicyChangedDetails];
  } else if ([tag isEqualToString:@"capture_transcript_policy_changed_details"]) {
    DBTEAMLOGCaptureTranscriptPolicyChangedDetails *captureTranscriptPolicyChangedDetails =
        [DBTEAMLOGCaptureTranscriptPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithCaptureTranscriptPolicyChangedDetails:captureTranscriptPolicyChangedDetails];
  } else if ([tag isEqualToString:@"classification_change_policy_details"]) {
    DBTEAMLOGClassificationChangePolicyDetails *classificationChangePolicyDetails =
        [DBTEAMLOGClassificationChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithClassificationChangePolicyDetails:classificationChangePolicyDetails];
  } else if ([tag isEqualToString:@"computer_backup_policy_changed_details"]) {
    DBTEAMLOGComputerBackupPolicyChangedDetails *computerBackupPolicyChangedDetails =
        [DBTEAMLOGComputerBackupPolicyChangedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithComputerBackupPolicyChangedDetails:computerBackupPolicyChangedDetails];
  } else if ([tag isEqualToString:@"content_administration_policy_changed_details"]) {
    DBTEAMLOGContentAdministrationPolicyChangedDetails *contentAdministrationPolicyChangedDetails =
        [DBTEAMLOGContentAdministrationPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithContentAdministrationPolicyChangedDetails:contentAdministrationPolicyChangedDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_change_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionChangePolicyDetails *dataPlacementRestrictionChangePolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionChangePolicyDetails:dataPlacementRestrictionChangePolicyDetails];
  } else if ([tag isEqualToString:@"data_placement_restriction_satisfy_policy_details"]) {
    DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetails *dataPlacementRestrictionSatisfyPolicyDetails =
        [DBTEAMLOGDataPlacementRestrictionSatisfyPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataPlacementRestrictionSatisfyPolicyDetails:dataPlacementRestrictionSatisfyPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_add_exception_details"]) {
    DBTEAMLOGDeviceApprovalsAddExceptionDetails *deviceApprovalsAddExceptionDetails =
        [DBTEAMLOGDeviceApprovalsAddExceptionDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithDeviceApprovalsAddExceptionDetails:deviceApprovalsAddExceptionDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_desktop_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetails *deviceApprovalsChangeDesktopPolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeDesktopPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeDesktopPolicyDetails:deviceApprovalsChangeDesktopPolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_mobile_policy_details"]) {
    DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetails *deviceApprovalsChangeMobilePolicyDetails =
        [DBTEAMLOGDeviceApprovalsChangeMobilePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeMobilePolicyDetails:deviceApprovalsChangeMobilePolicyDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_overage_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeOverageActionDetails *deviceApprovalsChangeOverageActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeOverageActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeOverageActionDetails:deviceApprovalsChangeOverageActionDetails];
  } else if ([tag isEqualToString:@"device_approvals_change_unlink_action_details"]) {
    DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetails *deviceApprovalsChangeUnlinkActionDetails =
        [DBTEAMLOGDeviceApprovalsChangeUnlinkActionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsChangeUnlinkActionDetails:deviceApprovalsChangeUnlinkActionDetails];
  } else if ([tag isEqualToString:@"device_approvals_remove_exception_details"]) {
    DBTEAMLOGDeviceApprovalsRemoveExceptionDetails *deviceApprovalsRemoveExceptionDetails =
        [DBTEAMLOGDeviceApprovalsRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDeviceApprovalsRemoveExceptionDetails:deviceApprovalsRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"directory_restrictions_add_members_details"]) {
    DBTEAMLOGDirectoryRestrictionsAddMembersDetails *directoryRestrictionsAddMembersDetails =
        [DBTEAMLOGDirectoryRestrictionsAddMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDirectoryRestrictionsAddMembersDetails:directoryRestrictionsAddMembersDetails];
  } else if ([tag isEqualToString:@"directory_restrictions_remove_members_details"]) {
    DBTEAMLOGDirectoryRestrictionsRemoveMembersDetails *directoryRestrictionsRemoveMembersDetails =
        [DBTEAMLOGDirectoryRestrictionsRemoveMembersDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDirectoryRestrictionsRemoveMembersDetails:directoryRestrictionsRemoveMembersDetails];
  } else if ([tag isEqualToString:@"dropbox_passwords_policy_changed_details"]) {
    DBTEAMLOGDropboxPasswordsPolicyChangedDetails *dropboxPasswordsPolicyChangedDetails =
        [DBTEAMLOGDropboxPasswordsPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDropboxPasswordsPolicyChangedDetails:dropboxPasswordsPolicyChangedDetails];
  } else if ([tag isEqualToString:@"email_ingest_policy_changed_details"]) {
    DBTEAMLOGEmailIngestPolicyChangedDetails *emailIngestPolicyChangedDetails =
        [DBTEAMLOGEmailIngestPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmailIngestPolicyChangedDetails:emailIngestPolicyChangedDetails];
  } else if ([tag isEqualToString:@"emm_add_exception_details"]) {
    DBTEAMLOGEmmAddExceptionDetails *emmAddExceptionDetails =
        [DBTEAMLOGEmmAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmAddExceptionDetails:emmAddExceptionDetails];
  } else if ([tag isEqualToString:@"emm_change_policy_details"]) {
    DBTEAMLOGEmmChangePolicyDetails *emmChangePolicyDetails =
        [DBTEAMLOGEmmChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmChangePolicyDetails:emmChangePolicyDetails];
  } else if ([tag isEqualToString:@"emm_remove_exception_details"]) {
    DBTEAMLOGEmmRemoveExceptionDetails *emmRemoveExceptionDetails =
        [DBTEAMLOGEmmRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEmmRemoveExceptionDetails:emmRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"extended_version_history_change_policy_details"]) {
    DBTEAMLOGExtendedVersionHistoryChangePolicyDetails *extendedVersionHistoryChangePolicyDetails =
        [DBTEAMLOGExtendedVersionHistoryChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExtendedVersionHistoryChangePolicyDetails:extendedVersionHistoryChangePolicyDetails];
  } else if ([tag isEqualToString:@"external_drive_backup_policy_changed_details"]) {
    DBTEAMLOGExternalDriveBackupPolicyChangedDetails *externalDriveBackupPolicyChangedDetails =
        [DBTEAMLOGExternalDriveBackupPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithExternalDriveBackupPolicyChangedDetails:externalDriveBackupPolicyChangedDetails];
  } else if ([tag isEqualToString:@"file_comments_change_policy_details"]) {
    DBTEAMLOGFileCommentsChangePolicyDetails *fileCommentsChangePolicyDetails =
        [DBTEAMLOGFileCommentsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileCommentsChangePolicyDetails:fileCommentsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_locking_policy_changed_details"]) {
    DBTEAMLOGFileLockingPolicyChangedDetails *fileLockingPolicyChangedDetails =
        [DBTEAMLOGFileLockingPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileLockingPolicyChangedDetails:fileLockingPolicyChangedDetails];
  } else if ([tag isEqualToString:@"file_requests_change_policy_details"]) {
    DBTEAMLOGFileRequestsChangePolicyDetails *fileRequestsChangePolicyDetails =
        [DBTEAMLOGFileRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsChangePolicyDetails:fileRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_enabled_details"]) {
    DBTEAMLOGFileRequestsEmailsEnabledDetails *fileRequestsEmailsEnabledDetails =
        [DBTEAMLOGFileRequestsEmailsEnabledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileRequestsEmailsEnabledDetails:fileRequestsEmailsEnabledDetails];
  } else if ([tag isEqualToString:@"file_requests_emails_restricted_to_team_only_details"]) {
    DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetails *fileRequestsEmailsRestrictedToTeamOnlyDetails =
        [DBTEAMLOGFileRequestsEmailsRestrictedToTeamOnlyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithFileRequestsEmailsRestrictedToTeamOnlyDetails:fileRequestsEmailsRestrictedToTeamOnlyDetails];
  } else if ([tag isEqualToString:@"file_transfers_policy_changed_details"]) {
    DBTEAMLOGFileTransfersPolicyChangedDetails *fileTransfersPolicyChangedDetails =
        [DBTEAMLOGFileTransfersPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithFileTransfersPolicyChangedDetails:fileTransfersPolicyChangedDetails];
  } else if ([tag isEqualToString:@"google_sso_change_policy_details"]) {
    DBTEAMLOGGoogleSsoChangePolicyDetails *googleSsoChangePolicyDetails =
        [DBTEAMLOGGoogleSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGoogleSsoChangePolicyDetails:googleSsoChangePolicyDetails];
  } else if ([tag isEqualToString:@"group_user_management_change_policy_details"]) {
    DBTEAMLOGGroupUserManagementChangePolicyDetails *groupUserManagementChangePolicyDetails =
        [DBTEAMLOGGroupUserManagementChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithGroupUserManagementChangePolicyDetails:groupUserManagementChangePolicyDetails];
  } else if ([tag isEqualToString:@"integration_policy_changed_details"]) {
    DBTEAMLOGIntegrationPolicyChangedDetails *integrationPolicyChangedDetails =
        [DBTEAMLOGIntegrationPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithIntegrationPolicyChangedDetails:integrationPolicyChangedDetails];
  } else if ([tag isEqualToString:@"invite_acceptance_email_policy_changed_details"]) {
    DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetails *inviteAcceptanceEmailPolicyChangedDetails =
        [DBTEAMLOGInviteAcceptanceEmailPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithInviteAcceptanceEmailPolicyChangedDetails:inviteAcceptanceEmailPolicyChangedDetails];
  } else if ([tag isEqualToString:@"member_requests_change_policy_details"]) {
    DBTEAMLOGMemberRequestsChangePolicyDetails *memberRequestsChangePolicyDetails =
        [DBTEAMLOGMemberRequestsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMemberRequestsChangePolicyDetails:memberRequestsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_send_invite_policy_changed_details"]) {
    DBTEAMLOGMemberSendInvitePolicyChangedDetails *memberSendInvitePolicyChangedDetails =
        [DBTEAMLOGMemberSendInvitePolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSendInvitePolicyChangedDetails:memberSendInvitePolicyChangedDetails];
  } else if ([tag isEqualToString:@"member_space_limits_add_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsAddExceptionDetails *memberSpaceLimitsAddExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsAddExceptionDetails:memberSpaceLimitsAddExceptionDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_caps_type_policy_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetails *memberSpaceLimitsChangeCapsTypePolicyDetails =
        [DBTEAMLOGMemberSpaceLimitsChangeCapsTypePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangeCapsTypePolicyDetails:memberSpaceLimitsChangeCapsTypePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_change_policy_details"]) {
    DBTEAMLOGMemberSpaceLimitsChangePolicyDetails *memberSpaceLimitsChangePolicyDetails =
        [DBTEAMLOGMemberSpaceLimitsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsChangePolicyDetails:memberSpaceLimitsChangePolicyDetails];
  } else if ([tag isEqualToString:@"member_space_limits_remove_exception_details"]) {
    DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetails *memberSpaceLimitsRemoveExceptionDetails =
        [DBTEAMLOGMemberSpaceLimitsRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSpaceLimitsRemoveExceptionDetails:memberSpaceLimitsRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"member_suggestions_change_policy_details"]) {
    DBTEAMLOGMemberSuggestionsChangePolicyDetails *memberSuggestionsChangePolicyDetails =
        [DBTEAMLOGMemberSuggestionsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMemberSuggestionsChangePolicyDetails:memberSuggestionsChangePolicyDetails];
  } else if ([tag isEqualToString:@"microsoft_office_addin_change_policy_details"]) {
    DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetails *microsoftOfficeAddinChangePolicyDetails =
        [DBTEAMLOGMicrosoftOfficeAddinChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithMicrosoftOfficeAddinChangePolicyDetails:microsoftOfficeAddinChangePolicyDetails];
  } else if ([tag isEqualToString:@"network_control_change_policy_details"]) {
    DBTEAMLOGNetworkControlChangePolicyDetails *networkControlChangePolicyDetails =
        [DBTEAMLOGNetworkControlChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithNetworkControlChangePolicyDetails:networkControlChangePolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_deployment_policy_details"]) {
    DBTEAMLOGPaperChangeDeploymentPolicyDetails *paperChangeDeploymentPolicyDetails =
        [DBTEAMLOGPaperChangeDeploymentPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperChangeDeploymentPolicyDetails:paperChangeDeploymentPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_member_link_policy_details"]) {
    DBTEAMLOGPaperChangeMemberLinkPolicyDetails *paperChangeMemberLinkPolicyDetails =
        [DBTEAMLOGPaperChangeMemberLinkPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPaperChangeMemberLinkPolicyDetails:paperChangeMemberLinkPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_member_policy_details"]) {
    DBTEAMLOGPaperChangeMemberPolicyDetails *paperChangeMemberPolicyDetails =
        [DBTEAMLOGPaperChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangeMemberPolicyDetails:paperChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"paper_change_policy_details"]) {
    DBTEAMLOGPaperChangePolicyDetails *paperChangePolicyDetails =
        [DBTEAMLOGPaperChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperChangePolicyDetails:paperChangePolicyDetails];
  } else if ([tag isEqualToString:@"paper_default_folder_policy_changed_details"]) {
    DBTEAMLOGPaperDefaultFolderPolicyChangedDetails *paperDefaultFolderPolicyChangedDetails =
        [DBTEAMLOGPaperDefaultFolderPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperDefaultFolderPolicyChangedDetails:paperDefaultFolderPolicyChangedDetails];
  } else if ([tag isEqualToString:@"paper_desktop_policy_changed_details"]) {
    DBTEAMLOGPaperDesktopPolicyChangedDetails *paperDesktopPolicyChangedDetails =
        [DBTEAMLOGPaperDesktopPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithPaperDesktopPolicyChangedDetails:paperDesktopPolicyChangedDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_addition_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupAdditionDetails *paperEnabledUsersGroupAdditionDetails =
        [DBTEAMLOGPaperEnabledUsersGroupAdditionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupAdditionDetails:paperEnabledUsersGroupAdditionDetails];
  } else if ([tag isEqualToString:@"paper_enabled_users_group_removal_details"]) {
    DBTEAMLOGPaperEnabledUsersGroupRemovalDetails *paperEnabledUsersGroupRemovalDetails =
        [DBTEAMLOGPaperEnabledUsersGroupRemovalDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPaperEnabledUsersGroupRemovalDetails:paperEnabledUsersGroupRemovalDetails];
  } else if ([tag isEqualToString:@"password_strength_requirements_change_policy_details"]) {
    DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetails *passwordStrengthRequirementsChangePolicyDetails =
        [DBTEAMLOGPasswordStrengthRequirementsChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithPasswordStrengthRequirementsChangePolicyDetails:passwordStrengthRequirementsChangePolicyDetails];
  } else if ([tag isEqualToString:@"permanent_delete_change_policy_details"]) {
    DBTEAMLOGPermanentDeleteChangePolicyDetails *permanentDeleteChangePolicyDetails =
        [DBTEAMLOGPermanentDeleteChangePolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithPermanentDeleteChangePolicyDetails:permanentDeleteChangePolicyDetails];
  } else if ([tag isEqualToString:@"reseller_support_change_policy_details"]) {
    DBTEAMLOGResellerSupportChangePolicyDetails *resellerSupportChangePolicyDetails =
        [DBTEAMLOGResellerSupportChangePolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithResellerSupportChangePolicyDetails:resellerSupportChangePolicyDetails];
  } else if ([tag isEqualToString:@"rewind_policy_changed_details"]) {
    DBTEAMLOGRewindPolicyChangedDetails *rewindPolicyChangedDetails =
        [DBTEAMLOGRewindPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithRewindPolicyChangedDetails:rewindPolicyChangedDetails];
  } else if ([tag isEqualToString:@"send_for_signature_policy_changed_details"]) {
    DBTEAMLOGSendForSignaturePolicyChangedDetails *sendForSignaturePolicyChangedDetails =
        [DBTEAMLOGSendForSignaturePolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSendForSignaturePolicyChangedDetails:sendForSignaturePolicyChangedDetails];
  } else if ([tag isEqualToString:@"sharing_change_folder_join_policy_details"]) {
    DBTEAMLOGSharingChangeFolderJoinPolicyDetails *sharingChangeFolderJoinPolicyDetails =
        [DBTEAMLOGSharingChangeFolderJoinPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharingChangeFolderJoinPolicyDetails:sharingChangeFolderJoinPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_allow_change_expiration_policy_details"]) {
    DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetails *sharingChangeLinkAllowChangeExpirationPolicyDetails =
        [DBTEAMLOGSharingChangeLinkAllowChangeExpirationPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeLinkAllowChangeExpirationPolicyDetails:
                                              sharingChangeLinkAllowChangeExpirationPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_default_expiration_policy_details"]) {
    DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetails *sharingChangeLinkDefaultExpirationPolicyDetails =
        [DBTEAMLOGSharingChangeLinkDefaultExpirationPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharingChangeLinkDefaultExpirationPolicyDetails:sharingChangeLinkDefaultExpirationPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_enforce_password_policy_details"]) {
    DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetails *sharingChangeLinkEnforcePasswordPolicyDetails =
        [DBTEAMLOGSharingChangeLinkEnforcePasswordPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSharingChangeLinkEnforcePasswordPolicyDetails:sharingChangeLinkEnforcePasswordPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_link_policy_details"]) {
    DBTEAMLOGSharingChangeLinkPolicyDetails *sharingChangeLinkPolicyDetails =
        [DBTEAMLOGSharingChangeLinkPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeLinkPolicyDetails:sharingChangeLinkPolicyDetails];
  } else if ([tag isEqualToString:@"sharing_change_member_policy_details"]) {
    DBTEAMLOGSharingChangeMemberPolicyDetails *sharingChangeMemberPolicyDetails =
        [DBTEAMLOGSharingChangeMemberPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSharingChangeMemberPolicyDetails:sharingChangeMemberPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_download_policy_details"]) {
    DBTEAMLOGShowcaseChangeDownloadPolicyDetails *showcaseChangeDownloadPolicyDetails =
        [DBTEAMLOGShowcaseChangeDownloadPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseChangeDownloadPolicyDetails:showcaseChangeDownloadPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_enabled_policy_details"]) {
    DBTEAMLOGShowcaseChangeEnabledPolicyDetails *showcaseChangeEnabledPolicyDetails =
        [DBTEAMLOGShowcaseChangeEnabledPolicyDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithShowcaseChangeEnabledPolicyDetails:showcaseChangeEnabledPolicyDetails];
  } else if ([tag isEqualToString:@"showcase_change_external_sharing_policy_details"]) {
    DBTEAMLOGShowcaseChangeExternalSharingPolicyDetails *showcaseChangeExternalSharingPolicyDetails =
        [DBTEAMLOGShowcaseChangeExternalSharingPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithShowcaseChangeExternalSharingPolicyDetails:showcaseChangeExternalSharingPolicyDetails];
  } else if ([tag isEqualToString:@"smarter_smart_sync_policy_changed_details"]) {
    DBTEAMLOGSmarterSmartSyncPolicyChangedDetails *smarterSmartSyncPolicyChangedDetails =
        [DBTEAMLOGSmarterSmartSyncPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithSmarterSmartSyncPolicyChangedDetails:smarterSmartSyncPolicyChangedDetails];
  } else if ([tag isEqualToString:@"smart_sync_change_policy_details"]) {
    DBTEAMLOGSmartSyncChangePolicyDetails *smartSyncChangePolicyDetails =
        [DBTEAMLOGSmartSyncChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncChangePolicyDetails:smartSyncChangePolicyDetails];
  } else if ([tag isEqualToString:@"smart_sync_not_opt_out_details"]) {
    DBTEAMLOGSmartSyncNotOptOutDetails *smartSyncNotOptOutDetails =
        [DBTEAMLOGSmartSyncNotOptOutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncNotOptOutDetails:smartSyncNotOptOutDetails];
  } else if ([tag isEqualToString:@"smart_sync_opt_out_details"]) {
    DBTEAMLOGSmartSyncOptOutDetails *smartSyncOptOutDetails =
        [DBTEAMLOGSmartSyncOptOutDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSmartSyncOptOutDetails:smartSyncOptOutDetails];
  } else if ([tag isEqualToString:@"sso_change_policy_details"]) {
    DBTEAMLOGSsoChangePolicyDetails *ssoChangePolicyDetails =
        [DBTEAMLOGSsoChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithSsoChangePolicyDetails:ssoChangePolicyDetails];
  } else if ([tag isEqualToString:@"team_branding_policy_changed_details"]) {
    DBTEAMLOGTeamBrandingPolicyChangedDetails *teamBrandingPolicyChangedDetails =
        [DBTEAMLOGTeamBrandingPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamBrandingPolicyChangedDetails:teamBrandingPolicyChangedDetails];
  } else if ([tag isEqualToString:@"team_extensions_policy_changed_details"]) {
    DBTEAMLOGTeamExtensionsPolicyChangedDetails *teamExtensionsPolicyChangedDetails =
        [DBTEAMLOGTeamExtensionsPolicyChangedDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamExtensionsPolicyChangedDetails:teamExtensionsPolicyChangedDetails];
  } else if ([tag isEqualToString:@"team_selective_sync_policy_changed_details"]) {
    DBTEAMLOGTeamSelectiveSyncPolicyChangedDetails *teamSelectiveSyncPolicyChangedDetails =
        [DBTEAMLOGTeamSelectiveSyncPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamSelectiveSyncPolicyChangedDetails:teamSelectiveSyncPolicyChangedDetails];
  } else if ([tag isEqualToString:@"team_sharing_whitelist_subjects_changed_details"]) {
    DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetails *teamSharingWhitelistSubjectsChangedDetails =
        [DBTEAMLOGTeamSharingWhitelistSubjectsChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamSharingWhitelistSubjectsChangedDetails:teamSharingWhitelistSubjectsChangedDetails];
  } else if ([tag isEqualToString:@"tfa_add_exception_details"]) {
    DBTEAMLOGTfaAddExceptionDetails *tfaAddExceptionDetails =
        [DBTEAMLOGTfaAddExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddExceptionDetails:tfaAddExceptionDetails];
  } else if ([tag isEqualToString:@"tfa_change_policy_details"]) {
    DBTEAMLOGTfaChangePolicyDetails *tfaChangePolicyDetails =
        [DBTEAMLOGTfaChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangePolicyDetails:tfaChangePolicyDetails];
  } else if ([tag isEqualToString:@"tfa_remove_exception_details"]) {
    DBTEAMLOGTfaRemoveExceptionDetails *tfaRemoveExceptionDetails =
        [DBTEAMLOGTfaRemoveExceptionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveExceptionDetails:tfaRemoveExceptionDetails];
  } else if ([tag isEqualToString:@"two_account_change_policy_details"]) {
    DBTEAMLOGTwoAccountChangePolicyDetails *twoAccountChangePolicyDetails =
        [DBTEAMLOGTwoAccountChangePolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTwoAccountChangePolicyDetails:twoAccountChangePolicyDetails];
  } else if ([tag isEqualToString:@"viewer_info_policy_changed_details"]) {
    DBTEAMLOGViewerInfoPolicyChangedDetails *viewerInfoPolicyChangedDetails =
        [DBTEAMLOGViewerInfoPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithViewerInfoPolicyChangedDetails:viewerInfoPolicyChangedDetails];
  } else if ([tag isEqualToString:@"watermarking_policy_changed_details"]) {
    DBTEAMLOGWatermarkingPolicyChangedDetails *watermarkingPolicyChangedDetails =
        [DBTEAMLOGWatermarkingPolicyChangedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithWatermarkingPolicyChangedDetails:watermarkingPolicyChangedDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_active_session_limit_details"]) {
    DBTEAMLOGWebSessionsChangeActiveSessionLimitDetails *webSessionsChangeActiveSessionLimitDetails =
        [DBTEAMLOGWebSessionsChangeActiveSessionLimitDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeActiveSessionLimitDetails:webSessionsChangeActiveSessionLimitDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_fixed_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetails *webSessionsChangeFixedLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeFixedLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeFixedLengthPolicyDetails:webSessionsChangeFixedLengthPolicyDetails];
  } else if ([tag isEqualToString:@"web_sessions_change_idle_length_policy_details"]) {
    DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetails *webSessionsChangeIdleLengthPolicyDetails =
        [DBTEAMLOGWebSessionsChangeIdleLengthPolicyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithWebSessionsChangeIdleLengthPolicyDetails:webSessionsChangeIdleLengthPolicyDetails];
  } else if ([tag isEqualToString:@"data_residency_migration_request_successful_details"]) {
    DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetails *dataResidencyMigrationRequestSuccessfulDetails =
        [DBTEAMLOGDataResidencyMigrationRequestSuccessfulDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataResidencyMigrationRequestSuccessfulDetails:dataResidencyMigrationRequestSuccessfulDetails];
  } else if ([tag isEqualToString:@"data_residency_migration_request_unsuccessful_details"]) {
    DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetails *dataResidencyMigrationRequestUnsuccessfulDetails =
        [DBTEAMLOGDataResidencyMigrationRequestUnsuccessfulDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithDataResidencyMigrationRequestUnsuccessfulDetails:dataResidencyMigrationRequestUnsuccessfulDetails];
  } else if ([tag isEqualToString:@"team_merge_from_details"]) {
    DBTEAMLOGTeamMergeFromDetails *teamMergeFromDetails =
        [DBTEAMLOGTeamMergeFromDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeFromDetails:teamMergeFromDetails];
  } else if ([tag isEqualToString:@"team_merge_to_details"]) {
    DBTEAMLOGTeamMergeToDetails *teamMergeToDetails = [DBTEAMLOGTeamMergeToDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeToDetails:teamMergeToDetails];
  } else if ([tag isEqualToString:@"team_profile_add_background_details"]) {
    DBTEAMLOGTeamProfileAddBackgroundDetails *teamProfileAddBackgroundDetails =
        [DBTEAMLOGTeamProfileAddBackgroundDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileAddBackgroundDetails:teamProfileAddBackgroundDetails];
  } else if ([tag isEqualToString:@"team_profile_add_logo_details"]) {
    DBTEAMLOGTeamProfileAddLogoDetails *teamProfileAddLogoDetails =
        [DBTEAMLOGTeamProfileAddLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileAddLogoDetails:teamProfileAddLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_background_details"]) {
    DBTEAMLOGTeamProfileChangeBackgroundDetails *teamProfileChangeBackgroundDetails =
        [DBTEAMLOGTeamProfileChangeBackgroundDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeBackgroundDetails:teamProfileChangeBackgroundDetails];
  } else if ([tag isEqualToString:@"team_profile_change_default_language_details"]) {
    DBTEAMLOGTeamProfileChangeDefaultLanguageDetails *teamProfileChangeDefaultLanguageDetails =
        [DBTEAMLOGTeamProfileChangeDefaultLanguageDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamProfileChangeDefaultLanguageDetails:teamProfileChangeDefaultLanguageDetails];
  } else if ([tag isEqualToString:@"team_profile_change_logo_details"]) {
    DBTEAMLOGTeamProfileChangeLogoDetails *teamProfileChangeLogoDetails =
        [DBTEAMLOGTeamProfileChangeLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeLogoDetails:teamProfileChangeLogoDetails];
  } else if ([tag isEqualToString:@"team_profile_change_name_details"]) {
    DBTEAMLOGTeamProfileChangeNameDetails *teamProfileChangeNameDetails =
        [DBTEAMLOGTeamProfileChangeNameDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileChangeNameDetails:teamProfileChangeNameDetails];
  } else if ([tag isEqualToString:@"team_profile_remove_background_details"]) {
    DBTEAMLOGTeamProfileRemoveBackgroundDetails *teamProfileRemoveBackgroundDetails =
        [DBTEAMLOGTeamProfileRemoveBackgroundDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamProfileRemoveBackgroundDetails:teamProfileRemoveBackgroundDetails];
  } else if ([tag isEqualToString:@"team_profile_remove_logo_details"]) {
    DBTEAMLOGTeamProfileRemoveLogoDetails *teamProfileRemoveLogoDetails =
        [DBTEAMLOGTeamProfileRemoveLogoDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamProfileRemoveLogoDetails:teamProfileRemoveLogoDetails];
  } else if ([tag isEqualToString:@"tfa_add_backup_phone_details"]) {
    DBTEAMLOGTfaAddBackupPhoneDetails *tfaAddBackupPhoneDetails =
        [DBTEAMLOGTfaAddBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddBackupPhoneDetails:tfaAddBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_add_security_key_details"]) {
    DBTEAMLOGTfaAddSecurityKeyDetails *tfaAddSecurityKeyDetails =
        [DBTEAMLOGTfaAddSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaAddSecurityKeyDetails:tfaAddSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_change_backup_phone_details"]) {
    DBTEAMLOGTfaChangeBackupPhoneDetails *tfaChangeBackupPhoneDetails =
        [DBTEAMLOGTfaChangeBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeBackupPhoneDetails:tfaChangeBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_change_status_details"]) {
    DBTEAMLOGTfaChangeStatusDetails *tfaChangeStatusDetails =
        [DBTEAMLOGTfaChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaChangeStatusDetails:tfaChangeStatusDetails];
  } else if ([tag isEqualToString:@"tfa_remove_backup_phone_details"]) {
    DBTEAMLOGTfaRemoveBackupPhoneDetails *tfaRemoveBackupPhoneDetails =
        [DBTEAMLOGTfaRemoveBackupPhoneDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveBackupPhoneDetails:tfaRemoveBackupPhoneDetails];
  } else if ([tag isEqualToString:@"tfa_remove_security_key_details"]) {
    DBTEAMLOGTfaRemoveSecurityKeyDetails *tfaRemoveSecurityKeyDetails =
        [DBTEAMLOGTfaRemoveSecurityKeyDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaRemoveSecurityKeyDetails:tfaRemoveSecurityKeyDetails];
  } else if ([tag isEqualToString:@"tfa_reset_details"]) {
    DBTEAMLOGTfaResetDetails *tfaResetDetails = [DBTEAMLOGTfaResetDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTfaResetDetails:tfaResetDetails];
  } else if ([tag isEqualToString:@"changed_enterprise_admin_role_details"]) {
    DBTEAMLOGChangedEnterpriseAdminRoleDetails *changedEnterpriseAdminRoleDetails =
        [DBTEAMLOGChangedEnterpriseAdminRoleDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithChangedEnterpriseAdminRoleDetails:changedEnterpriseAdminRoleDetails];
  } else if ([tag isEqualToString:@"changed_enterprise_connected_team_status_details"]) {
    DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetails *changedEnterpriseConnectedTeamStatusDetails =
        [DBTEAMLOGChangedEnterpriseConnectedTeamStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithChangedEnterpriseConnectedTeamStatusDetails:changedEnterpriseConnectedTeamStatusDetails];
  } else if ([tag isEqualToString:@"ended_enterprise_admin_session_details"]) {
    DBTEAMLOGEndedEnterpriseAdminSessionDetails *endedEnterpriseAdminSessionDetails =
        [DBTEAMLOGEndedEnterpriseAdminSessionDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithEndedEnterpriseAdminSessionDetails:endedEnterpriseAdminSessionDetails];
  } else if ([tag isEqualToString:@"ended_enterprise_admin_session_deprecated_details"]) {
    DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetails *endedEnterpriseAdminSessionDeprecatedDetails =
        [DBTEAMLOGEndedEnterpriseAdminSessionDeprecatedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithEndedEnterpriseAdminSessionDeprecatedDetails:endedEnterpriseAdminSessionDeprecatedDetails];
  } else if ([tag isEqualToString:@"enterprise_settings_locking_details"]) {
    DBTEAMLOGEnterpriseSettingsLockingDetails *enterpriseSettingsLockingDetails =
        [DBTEAMLOGEnterpriseSettingsLockingDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithEnterpriseSettingsLockingDetails:enterpriseSettingsLockingDetails];
  } else if ([tag isEqualToString:@"guest_admin_change_status_details"]) {
    DBTEAMLOGGuestAdminChangeStatusDetails *guestAdminChangeStatusDetails =
        [DBTEAMLOGGuestAdminChangeStatusDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithGuestAdminChangeStatusDetails:guestAdminChangeStatusDetails];
  } else if ([tag isEqualToString:@"started_enterprise_admin_session_details"]) {
    DBTEAMLOGStartedEnterpriseAdminSessionDetails *startedEnterpriseAdminSessionDetails =
        [DBTEAMLOGStartedEnterpriseAdminSessionDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithStartedEnterpriseAdminSessionDetails:startedEnterpriseAdminSessionDetails];
  } else if ([tag isEqualToString:@"team_merge_request_accepted_details"]) {
    DBTEAMLOGTeamMergeRequestAcceptedDetails *teamMergeRequestAcceptedDetails =
        [DBTEAMLOGTeamMergeRequestAcceptedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestAcceptedDetails:teamMergeRequestAcceptedDetails];
  } else if ([tag isEqualToString:@"team_merge_request_accepted_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetails *teamMergeRequestAcceptedShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestAcceptedShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestAcceptedShownToPrimaryTeamDetails:teamMergeRequestAcceptedShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_accepted_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetails *teamMergeRequestAcceptedShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestAcceptedShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestAcceptedShownToSecondaryTeamDetails:
                                              teamMergeRequestAcceptedShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_auto_canceled_details"]) {
    DBTEAMLOGTeamMergeRequestAutoCanceledDetails *teamMergeRequestAutoCanceledDetails =
        [DBTEAMLOGTeamMergeRequestAutoCanceledDetailsSerializer deserialize:valueDict];
    return
        [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestAutoCanceledDetails:teamMergeRequestAutoCanceledDetails];
  } else if ([tag isEqualToString:@"team_merge_request_canceled_details"]) {
    DBTEAMLOGTeamMergeRequestCanceledDetails *teamMergeRequestCanceledDetails =
        [DBTEAMLOGTeamMergeRequestCanceledDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestCanceledDetails:teamMergeRequestCanceledDetails];
  } else if ([tag isEqualToString:@"team_merge_request_canceled_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetails *teamMergeRequestCanceledShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestCanceledShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestCanceledShownToPrimaryTeamDetails:teamMergeRequestCanceledShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_canceled_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetails *teamMergeRequestCanceledShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestCanceledShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestCanceledShownToSecondaryTeamDetails:
                                              teamMergeRequestCanceledShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_expired_details"]) {
    DBTEAMLOGTeamMergeRequestExpiredDetails *teamMergeRequestExpiredDetails =
        [DBTEAMLOGTeamMergeRequestExpiredDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestExpiredDetails:teamMergeRequestExpiredDetails];
  } else if ([tag isEqualToString:@"team_merge_request_expired_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetails *teamMergeRequestExpiredShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestExpiredShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestExpiredShownToPrimaryTeamDetails:teamMergeRequestExpiredShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_expired_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetails *teamMergeRequestExpiredShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestExpiredShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestExpiredShownToSecondaryTeamDetails:teamMergeRequestExpiredShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_rejected_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetails *teamMergeRequestRejectedShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestRejectedShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestRejectedShownToPrimaryTeamDetails:teamMergeRequestRejectedShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_rejected_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetails *teamMergeRequestRejectedShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestRejectedShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestRejectedShownToSecondaryTeamDetails:
                                              teamMergeRequestRejectedShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_reminder_details"]) {
    DBTEAMLOGTeamMergeRequestReminderDetails *teamMergeRequestReminderDetails =
        [DBTEAMLOGTeamMergeRequestReminderDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestReminderDetails:teamMergeRequestReminderDetails];
  } else if ([tag isEqualToString:@"team_merge_request_reminder_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetails *teamMergeRequestReminderShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestReminderShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestReminderShownToPrimaryTeamDetails:teamMergeRequestReminderShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_reminder_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetails *teamMergeRequestReminderShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestReminderShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestReminderShownToSecondaryTeamDetails:
                                              teamMergeRequestReminderShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_revoked_details"]) {
    DBTEAMLOGTeamMergeRequestRevokedDetails *teamMergeRequestRevokedDetails =
        [DBTEAMLOGTeamMergeRequestRevokedDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithTeamMergeRequestRevokedDetails:teamMergeRequestRevokedDetails];
  } else if ([tag isEqualToString:@"team_merge_request_sent_shown_to_primary_team_details"]) {
    DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetails *teamMergeRequestSentShownToPrimaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestSentShownToPrimaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestSentShownToPrimaryTeamDetails:teamMergeRequestSentShownToPrimaryTeamDetails];
  } else if ([tag isEqualToString:@"team_merge_request_sent_shown_to_secondary_team_details"]) {
    DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetails *teamMergeRequestSentShownToSecondaryTeamDetails =
        [DBTEAMLOGTeamMergeRequestSentShownToSecondaryTeamDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc]
        initWithTeamMergeRequestSentShownToSecondaryTeamDetails:teamMergeRequestSentShownToSecondaryTeamDetails];
  } else if ([tag isEqualToString:@"missing_details"]) {
    DBTEAMLOGMissingDetails *missingDetails = [DBTEAMLOGMissingDetailsSerializer deserialize:valueDict];
    return [[DBTEAMLOGEventDetails alloc] initWithMissingDetails:missingDetails];
  } else if ([tag isEqualToString:@"other"]) {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  } else {
    return [[DBTEAMLOGEventDetails alloc] initWithOther];
  }
}

@end
